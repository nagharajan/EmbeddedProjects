
HAR_Model_PoC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c3398  080124b0  080124b0  000224b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d5848  080d5848  000f08e4  2**0
                  CONTENTS
  4 .ARM          00000008  080d5848  080d5848  000e5848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d5850  080d5850  000f08e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d5850  080d5850  000e5850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080d5854  080d5854  000e5854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008e4  20000000  080d5858  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067d4  200008e8  080d613c  000f08e8  2**3
                  ALLOC
 10 ._user_heap_stack 00002404  200070bc  080d613c  000f70bc  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  000f08e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6e6  00000000  00000000  000f0916  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f2f  00000000  00000000  0010dffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00111f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  00113178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bdf4  00000000  00000000  00114248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001150f  00000000  00000000  0014003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff93c  00000000  00000000  0015154b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000031fa  00000000  00000000  00250e87  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000035b  00000000  00000000  00254081  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  002543dc  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00009cec  00000000  00000000  00254410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200008e8 	.word	0x200008e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08012494 	.word	0x08012494

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200008ec 	.word	0x200008ec
 800023c:	08012494 	.word	0x08012494

08000240 <ai_inspector_default_config>:
 8000240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000244:	b084      	sub	sp, #16
 8000246:	2600      	movs	r6, #0
 8000248:	4669      	mov	r1, sp
 800024a:	2200      	movs	r2, #0
 800024c:	2300      	movs	r3, #0
 800024e:	2400      	movs	r4, #0
 8000250:	2500      	movs	r5, #0
 8000252:	f046 0601 	orr.w	r6, r6, #1
 8000256:	e881 003c 	stmia.w	r1, {r2, r3, r4, r5}
 800025a:	f88d 6000 	strb.w	r6, [sp]
 800025e:	e891 4380 	ldmia.w	r1, {r7, r8, r9, lr}
 8000262:	e880 4380 	stmia.w	r0, {r7, r8, r9, lr}
 8000266:	b004      	add	sp, #16
 8000268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800026c <ai_inspector_create>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	0004      	movs	r4, r0
 8000270:	b081      	sub	sp, #4
 8000272:	bf08      	it	eq
 8000274:	2000      	moveq	r0, #0
 8000276:	d026      	beq.n	80002c6 <ai_inspector_create+0x5a>
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <.text_6>)
 800027a:	2200      	movs	r2, #0
 800027c:	2300      	movs	r3, #0
 800027e:	2500      	movs	r5, #0
 8000280:	c02c      	stmia	r0!, {r2, r3, r5}
 8000282:	c02c      	stmia	r0!, {r2, r3, r5}
 8000284:	c02c      	stmia	r0!, {r2, r3, r5}
 8000286:	3824      	subs	r0, #36	; 0x24
 8000288:	2601      	movs	r6, #1
 800028a:	f100 0c18 	add.w	ip, r0, #24
 800028e:	f100 0218 	add.w	r2, r0, #24
 8000292:	7286      	strb	r6, [r0, #10]
 8000294:	8406      	strh	r6, [r0, #32]
 8000296:	f8c0 c018 	str.w	ip, [r0, #24]
 800029a:	61c2      	str	r2, [r0, #28]
 800029c:	b131      	cbz	r1, 80002ac <ai_inspector_create+0x40>
 800029e:	780a      	ldrb	r2, [r1, #0]
 80002a0:	784b      	ldrb	r3, [r1, #1]
 80002a2:	788d      	ldrb	r5, [r1, #2]
 80002a4:	684e      	ldr	r6, [r1, #4]
 80002a6:	688f      	ldr	r7, [r1, #8]
 80002a8:	68c9      	ldr	r1, [r1, #12]
 80002aa:	e002      	b.n	80002b2 <ai_inspector_create+0x46>
 80002ac:	2201      	movs	r2, #1
 80002ae:	2600      	movs	r6, #0
 80002b0:	2700      	movs	r7, #0
 80002b2:	7202      	strb	r2, [r0, #8]
 80002b4:	7243      	strb	r3, [r0, #9]
 80002b6:	7285      	strb	r5, [r0, #10]
 80002b8:	60c6      	str	r6, [r0, #12]
 80002ba:	6107      	str	r7, [r0, #16]
 80002bc:	6141      	str	r1, [r0, #20]
 80002be:	f000 fcdd 	bl	8000c7c <ai_platform_context_release>
 80002c2:	6020      	str	r0, [r4, #0]
 80002c4:	2001      	movs	r0, #1
 80002c6:	b001      	add	sp, #4
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002cc <.text_6>:
 80002cc:	20000904 	.word	0x20000904

080002d0 <ai_inspector_destroy>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f000 fc7e 	bl	8000bd2 <ai_platform_context_acquire>
 80002d6:	0004      	movs	r4, r0
 80002d8:	d101      	bne.n	80002de <ai_inspector_destroy+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd70      	pop	{r4, r5, r6, pc}
 80002de:	69a0      	ldr	r0, [r4, #24]
 80002e0:	f1a0 0534 	sub.w	r5, r0, #52	; 0x34
 80002e4:	f105 0234 	add.w	r2, r5, #52	; 0x34
 80002e8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80002ea:	f104 0018 	add.w	r0, r4, #24
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f1a1 0634 	sub.w	r6, r1, #52	; 0x34
 80002f4:	d015      	beq.n	8000322 <ai_inspector_destroy+0x52>
 80002f6:	6828      	ldr	r0, [r5, #0]
 80002f8:	f001 fc09 	bl	8001b0e <ai_network_inspect_destroy>
 80002fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80002fe:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000300:	6048      	str	r0, [r1, #4]
 8000302:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000304:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000306:	6002      	str	r2, [r0, #0]
 8000308:	4628      	mov	r0, r5
 800030a:	f000 ff92 	bl	8001232 <core_mem_free>
 800030e:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8000310:	4635      	mov	r5, r6
 8000312:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8000316:	f104 0218 	add.w	r2, r4, #24
 800031a:	4290      	cmp	r0, r2
 800031c:	f1a1 0634 	sub.w	r6, r1, #52	; 0x34
 8000320:	d1e9      	bne.n	80002f6 <ai_inspector_destroy+0x26>
 8000322:	2001      	movs	r0, #1
 8000324:	bd70      	pop	{r4, r5, r6, pc}

08000326 <ai_inspector_bind_network>:
 8000326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000328:	b081      	sub	sp, #4
 800032a:	460c      	mov	r4, r1
 800032c:	f000 fc51 	bl	8000bd2 <ai_platform_context_acquire>
 8000330:	0005      	movs	r5, r0
 8000332:	bf18      	it	ne
 8000334:	2c00      	cmpne	r4, #0
 8000336:	d033      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000338:	6820      	ldr	r0, [r4, #0]
 800033a:	b388      	cbz	r0, 80003a0 <ai_inspector_bind_network+0x7a>
 800033c:	203c      	movs	r0, #60	; 0x3c
 800033e:	f000 ff6b 	bl	8001218 <core_mem_alloc>
 8000342:	0006      	movs	r6, r0
 8000344:	d02c      	beq.n	80003a0 <ai_inspector_bind_network+0x7a>
 8000346:	8c28      	ldrh	r0, [r5, #32]
 8000348:	1c41      	adds	r1, r0, #1
 800034a:	8429      	strh	r1, [r5, #32]
 800034c:	f105 0118 	add.w	r1, r5, #24
 8000350:	8630      	strh	r0, [r6, #48]	; 0x30
 8000352:	e8b4 508d 	ldmia.w	r4!, {r0, r2, r3, r7, ip, lr}
 8000356:	e8a6 508d 	stmia.w	r6!, {r0, r2, r3, r7, ip, lr}
 800035a:	e8b4 508d 	ldmia.w	r4!, {r0, r2, r3, r7, ip, lr}
 800035e:	e8a6 508d 	stmia.w	r6!, {r0, r2, r3, r7, ip, lr}
 8000362:	3e30      	subs	r6, #48	; 0x30
 8000364:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8000368:	6024      	str	r4, [r4, #0]
 800036a:	63b4      	str	r4, [r6, #56]	; 0x38
 800036c:	69a8      	ldr	r0, [r5, #24]
 800036e:	6020      	str	r0, [r4, #0]
 8000370:	6061      	str	r1, [r4, #4]
 8000372:	f105 0108 	add.w	r1, r5, #8
 8000376:	6044      	str	r4, [r0, #4]
 8000378:	61ac      	str	r4, [r5, #24]
 800037a:	6830      	ldr	r0, [r6, #0]
 800037c:	f001 fb65 	bl	8001a4a <ai_network_inspect_init>
 8000380:	b110      	cbz	r0, 8000388 <ai_inspector_bind_network+0x62>
 8000382:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 8000384:	b001      	add	sp, #4
 8000386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000388:	6821      	ldr	r1, [r4, #0]
 800038a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800038c:	6048      	str	r0, [r1, #4]
 800038e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000390:	6822      	ldr	r2, [r4, #0]
 8000392:	4630      	mov	r0, r6
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	f000 ff4c 	bl	8001232 <core_mem_free>
 800039a:	8c28      	ldrh	r0, [r5, #32]
 800039c:	1e41      	subs	r1, r0, #1
 800039e:	8429      	strh	r1, [r5, #32]
 80003a0:	2000      	movs	r0, #0
 80003a2:	b001      	add	sp, #4
 80003a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003a8 <ai_inspector_unbind_network>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	460d      	mov	r5, r1
 80003ac:	f000 fc11 	bl	8000bd2 <ai_platform_context_acquire>
 80003b0:	b380      	cbz	r0, 8000414 <ai_inspector_unbind_network+0x6c>
 80003b2:	0029      	movs	r1, r5
 80003b4:	f000 802e 	beq.w	8000414 <ai_inspector_unbind_network+0x6c>
 80003b8:	f850 1f18 	ldr.w	r1, [r0, #24]!
 80003bc:	f1a1 0434 	sub.w	r4, r1, #52	; 0x34
 80003c0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80003c4:	4282      	cmp	r2, r0
 80003c6:	d025      	beq.n	8000414 <ai_inspector_unbind_network+0x6c>
 80003c8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80003ca:	42a9      	cmp	r1, r5
 80003cc:	d024      	beq.n	8000418 <ai_inspector_unbind_network+0x70>
 80003ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003d0:	f1a2 0434 	sub.w	r4, r2, #52	; 0x34
 80003d4:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80003d8:	4286      	cmp	r6, r0
 80003da:	d01b      	beq.n	8000414 <ai_inspector_unbind_network+0x6c>
 80003dc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80003de:	42a9      	cmp	r1, r5
 80003e0:	d01a      	beq.n	8000418 <ai_inspector_unbind_network+0x70>
 80003e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003e4:	f1a2 0434 	sub.w	r4, r2, #52	; 0x34
 80003e8:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80003ec:	4286      	cmp	r6, r0
 80003ee:	d011      	beq.n	8000414 <ai_inspector_unbind_network+0x6c>
 80003f0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80003f2:	42a9      	cmp	r1, r5
 80003f4:	d010      	beq.n	8000418 <ai_inspector_unbind_network+0x70>
 80003f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003f8:	f1a2 0434 	sub.w	r4, r2, #52	; 0x34
 80003fc:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8000400:	4286      	cmp	r6, r0
 8000402:	d007      	beq.n	8000414 <ai_inspector_unbind_network+0x6c>
 8000404:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8000406:	42a9      	cmp	r1, r5
 8000408:	bf1c      	itt	ne
 800040a:	6b62      	ldrne	r2, [r4, #52]	; 0x34
 800040c:	f1a2 0434 	subne.w	r4, r2, #52	; 0x34
 8000410:	d1d6      	bne.n	80003c0 <ai_inspector_unbind_network+0x18>
 8000412:	e001      	b.n	8000418 <ai_inspector_unbind_network+0x70>
 8000414:	2000      	movs	r0, #0
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	2c00      	cmp	r4, #0
 800041a:	d0fb      	beq.n	8000414 <ai_inspector_unbind_network+0x6c>
 800041c:	6820      	ldr	r0, [r4, #0]
 800041e:	f001 fb76 	bl	8001b0e <ai_network_inspect_destroy>
 8000422:	2800      	cmp	r0, #0
 8000424:	d0f7      	beq.n	8000416 <ai_inspector_unbind_network+0x6e>
 8000426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000428:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800042a:	6048      	str	r0, [r1, #4]
 800042c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800042e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000430:	6002      	str	r2, [r0, #0]
 8000432:	4620      	mov	r0, r4
 8000434:	f000 fefd 	bl	8001232 <core_mem_free>
 8000438:	2001      	movs	r0, #1
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <ai_inspector_get_report>:
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	b081      	sub	sp, #4
 8000440:	460d      	mov	r5, r1
 8000442:	4614      	mov	r4, r2
 8000444:	f000 fbc5 	bl	8000bd2 <ai_platform_context_acquire>
 8000448:	2800      	cmp	r0, #0
 800044a:	bf18      	it	ne
 800044c:	2c00      	cmpne	r4, #0
 800044e:	d028      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 8000450:	f100 0118 	add.w	r1, r0, #24
 8000454:	6808      	ldr	r0, [r1, #0]
 8000456:	3834      	subs	r0, #52	; 0x34
 8000458:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800045c:	428a      	cmp	r2, r1
 800045e:	d020      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 8000460:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000462:	42ab      	cmp	r3, r5
 8000464:	d020      	beq.n	80004a8 <ai_inspector_get_report+0x6c>
 8000466:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000468:	3834      	subs	r0, #52	; 0x34
 800046a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800046e:	428a      	cmp	r2, r1
 8000470:	d017      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 8000472:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000474:	42ab      	cmp	r3, r5
 8000476:	d017      	beq.n	80004a8 <ai_inspector_get_report+0x6c>
 8000478:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800047a:	3834      	subs	r0, #52	; 0x34
 800047c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8000480:	428a      	cmp	r2, r1
 8000482:	d00e      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 8000484:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000486:	42ab      	cmp	r3, r5
 8000488:	d00e      	beq.n	80004a8 <ai_inspector_get_report+0x6c>
 800048a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800048c:	3834      	subs	r0, #52	; 0x34
 800048e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8000492:	428a      	cmp	r2, r1
 8000494:	d005      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 8000496:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000498:	42ab      	cmp	r3, r5
 800049a:	bf18      	it	ne
 800049c:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 800049e:	d1da      	bne.n	8000456 <ai_inspector_get_report+0x1a>
 80004a0:	e002      	b.n	80004a8 <ai_inspector_get_report+0x6c>
 80004a2:	2000      	movs	r0, #0
 80004a4:	b001      	add	sp, #4
 80004a6:	bd30      	pop	{r4, r5, pc}
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d0fa      	beq.n	80004a2 <ai_inspector_get_report+0x66>
 80004ac:	6800      	ldr	r0, [r0, #0]
 80004ae:	4621      	mov	r1, r4
 80004b0:	b001      	add	sp, #4
 80004b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80004b6:	f001 bb12 	b.w	8001ade <ai_network_inspect_get_report>

080004ba <ai_inspector_run>:
 80004ba:	b570      	push	{r4, r5, r6, lr}
 80004bc:	460e      	mov	r6, r1
 80004be:	4614      	mov	r4, r2
 80004c0:	461d      	mov	r5, r3
 80004c2:	f000 fb86 	bl	8000bd2 <ai_platform_context_acquire>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	bf18      	it	ne
 80004ca:	2c00      	cmpne	r4, #0
 80004cc:	d028      	beq.n	8000520 <ai_inspector_run+0x66>
 80004ce:	f100 0118 	add.w	r1, r0, #24
 80004d2:	6808      	ldr	r0, [r1, #0]
 80004d4:	3834      	subs	r0, #52	; 0x34
 80004d6:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004da:	428a      	cmp	r2, r1
 80004dc:	d020      	beq.n	8000520 <ai_inspector_run+0x66>
 80004de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004e0:	42b3      	cmp	r3, r6
 80004e2:	d01f      	beq.n	8000524 <ai_inspector_run+0x6a>
 80004e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004e6:	3834      	subs	r0, #52	; 0x34
 80004e8:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d017      	beq.n	8000520 <ai_inspector_run+0x66>
 80004f0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004f2:	42b3      	cmp	r3, r6
 80004f4:	d016      	beq.n	8000524 <ai_inspector_run+0x6a>
 80004f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004f8:	3834      	subs	r0, #52	; 0x34
 80004fa:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004fe:	428a      	cmp	r2, r1
 8000500:	d00e      	beq.n	8000520 <ai_inspector_run+0x66>
 8000502:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000504:	42b3      	cmp	r3, r6
 8000506:	d00d      	beq.n	8000524 <ai_inspector_run+0x6a>
 8000508:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800050a:	3834      	subs	r0, #52	; 0x34
 800050c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8000510:	428a      	cmp	r2, r1
 8000512:	d005      	beq.n	8000520 <ai_inspector_run+0x66>
 8000514:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000516:	42b3      	cmp	r3, r6
 8000518:	bf18      	it	ne
 800051a:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 800051c:	d1da      	bne.n	80004d4 <ai_inspector_run+0x1a>
 800051e:	e001      	b.n	8000524 <ai_inspector_run+0x6a>
 8000520:	2000      	movs	r0, #0
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	2800      	cmp	r0, #0
 8000526:	d0fb      	beq.n	8000520 <ai_inspector_run+0x66>
 8000528:	462a      	mov	r2, r5
 800052a:	4621      	mov	r1, r4
 800052c:	6800      	ldr	r0, [r0, #0]
 800052e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000532:	f000 bdcf 	b.w	80010d4 <ai_platform_network_process>
	...

08000538 <CRC_Lock>:
 8000538:	f8df 09cc 	ldr.w	r0, [pc, #2508]	; 8000f08 <.text_19>
 800053c:	f240 4249 	movw	r2, #1097	; 0x449
 8000540:	6801      	ldr	r1, [r0, #0]
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	0049      	lsls	r1, r1, #1
 8000546:	6001      	str	r1, [r0, #0]
 8000548:	f8df 0a60 	ldr.w	r0, [pc, #2656]	; 8000fac <.text_21>
 800054c:	6801      	ldr	r1, [r0, #0]
 800054e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000552:	4291      	cmp	r1, r2
 8000554:	d115      	bne.n	8000582 <CRC_Lock+0x4a>
 8000556:	2001      	movs	r0, #1
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	4310      	orrs	r0, r2
 800055e:	4308      	orrs	r0, r1
 8000560:	d01d      	beq.n	800059e <CRC_Lock+0x66>
 8000562:	f8df 1a4c 	ldr.w	r1, [pc, #2636]	; 8000fb0 <.text_22>
 8000566:	2201      	movs	r2, #1
 8000568:	608a      	str	r2, [r1, #8]
 800056a:	6888      	ldr	r0, [r1, #8]
 800056c:	2800      	cmp	r0, #0
 800056e:	d1fc      	bne.n	800056a <CRC_Lock+0x32>
 8000570:	f8df 2a40 	ldr.w	r2, [pc, #2624]	; 8000fb4 <.text_23>
 8000574:	f8df 3b58 	ldr.w	r3, [pc, #2904]	; 80010d0 <.text_28>
 8000578:	600a      	str	r2, [r1, #0]
 800057a:	6809      	ldr	r1, [r1, #0]
 800057c:	4299      	cmp	r1, r3
 800057e:	d026      	beq.n	80005ce <CRC_Lock+0x96>
 8000580:	e7fe      	b.n	8000580 <CRC_Lock+0x48>
 8000582:	2000      	movs	r0, #0
 8000584:	f240 4c51 	movw	ip, #1105	; 0x451
 8000588:	4561      	cmp	r1, ip
 800058a:	bf08      	it	eq
 800058c:	2201      	moveq	r2, #1
 800058e:	d0e4      	beq.n	800055a <CRC_Lock+0x22>
 8000590:	2200      	movs	r2, #0
 8000592:	f240 4352 	movw	r3, #1106	; 0x452
 8000596:	4299      	cmp	r1, r3
 8000598:	d1df      	bne.n	800055a <CRC_Lock+0x22>
 800059a:	2101      	movs	r1, #1
 800059c:	e7de      	b.n	800055c <CRC_Lock+0x24>
 800059e:	f8df 0a18 	ldr.w	r0, [pc, #2584]	; 8000fb8 <.text_24>
 80005a2:	6801      	ldr	r1, [r0, #0]
 80005a4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005a8:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005ac:	d10f      	bne.n	80005ce <CRC_Lock+0x96>
 80005ae:	f8df 1a0c 	ldr.w	r1, [pc, #2572]	; 8000fbc <.text_25>
 80005b2:	2201      	movs	r2, #1
 80005b4:	608a      	str	r2, [r1, #8]
 80005b6:	6888      	ldr	r0, [r1, #8]
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d1fc      	bne.n	80005b6 <CRC_Lock+0x7e>
 80005bc:	f8df 29f4 	ldr.w	r2, [pc, #2548]	; 8000fb4 <.text_23>
 80005c0:	f8df 3b0c 	ldr.w	r3, [pc, #2828]	; 80010d0 <.text_28>
 80005c4:	600a      	str	r2, [r1, #0]
 80005c6:	6809      	ldr	r1, [r1, #0]
 80005c8:	4299      	cmp	r1, r3
 80005ca:	d000      	beq.n	80005ce <CRC_Lock+0x96>
 80005cc:	e7fe      	b.n	80005cc <CRC_Lock+0x94>
 80005ce:	4770      	bx	lr

080005d0 <_ai_platform_get_io_buffers>:
 80005d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d4:	b081      	sub	sp, #4
 80005d6:	468b      	mov	fp, r1
 80005d8:	6801      	ldr	r1, [r0, #0]
 80005da:	2600      	movs	r6, #0
 80005dc:	46b0      	mov	r8, r6
 80005de:	f04f 0904 	mov.w	r9, #4
 80005e2:	46b2      	mov	sl, r6
 80005e4:	680f      	ldr	r7, [r1, #0]
 80005e6:	8901      	ldrh	r1, [r0, #8]
 80005e8:	b339      	cbz	r1, 800063a <_ai_platform_get_io_buffers+0x6a>
 80005ea:	4604      	mov	r4, r0
 80005ec:	6862      	ldr	r2, [r4, #4]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	1c76      	adds	r6, r6, #1
 80005f2:	f108 0801 	add.w	r8, r8, #1
 80005f6:	6851      	ldr	r1, [r2, #4]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	eb01 050a 	add.w	r5, r1, sl
 80005fe:	f10a 0a14 	add.w	sl, sl, #20
 8000602:	f005 f8d9 	bl	80057b8 <ai_array_to_buffer_fmt>
 8000606:	6028      	str	r0, [r5, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	80aa      	strh	r2, [r5, #4]
 800060c:	6938      	ldr	r0, [r7, #16]
 800060e:	80e8      	strh	r0, [r5, #6]
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	8129      	strh	r1, [r5, #8]
 8000614:	68b8      	ldr	r0, [r7, #8]
 8000616:	60e8      	str	r0, [r5, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	6891      	ldr	r1, [r2, #8]
 800061c:	6129      	str	r1, [r5, #16]
 800061e:	8921      	ldrh	r1, [r4, #8]
 8000620:	6820      	ldr	r0, [r4, #0]
 8000622:	4588      	cmp	r8, r1
 8000624:	f850 7009 	ldr.w	r7, [r0, r9]
 8000628:	f109 0904 	add.w	r9, r9, #4
 800062c:	d3de      	bcc.n	80005ec <_ai_platform_get_io_buffers+0x1c>
 800062e:	b2b0      	uxth	r0, r6
 8000630:	b118      	cbz	r0, 800063a <_ai_platform_get_io_buffers+0x6a>
 8000632:	6860      	ldr	r0, [r4, #4]
 8000634:	6841      	ldr	r1, [r0, #4]
 8000636:	f8cb 1000 	str.w	r1, [fp]
 800063a:	b2b0      	uxth	r0, r6
 800063c:	b001      	add	sp, #4
 800063e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000642 <_platform_network_state_setup>:
 8000642:	b430      	push	{r4, r5}
 8000644:	6914      	ldr	r4, [r2, #16]
 8000646:	6a13      	ldr	r3, [r2, #32]
 8000648:	435c      	muls	r4, r3
 800064a:	6084      	str	r4, [r0, #8]
 800064c:	888d      	ldrh	r5, [r1, #4]
 800064e:	436c      	muls	r4, r5
 8000650:	60c4      	str	r4, [r0, #12]
 8000652:	6909      	ldr	r1, [r1, #16]
 8000654:	68c3      	ldr	r3, [r0, #12]
 8000656:	6041      	str	r1, [r0, #4]
 8000658:	4419      	add	r1, r3
 800065a:	6001      	str	r1, [r0, #0]
 800065c:	6812      	ldr	r2, [r2, #0]
 800065e:	6814      	ldr	r4, [r2, #0]
 8000660:	00a5      	lsls	r5, r4, #2
 8000662:	d407      	bmi.n	8000674 <_platform_network_state_setup+0x32>
 8000664:	6894      	ldr	r4, [r2, #8]
 8000666:	68d1      	ldr	r1, [r2, #12]
 8000668:	6843      	ldr	r3, [r0, #4]
 800066a:	1a64      	subs	r4, r4, r1
 800066c:	1919      	adds	r1, r3, r4
 800066e:	6091      	str	r1, [r2, #8]
 8000670:	6840      	ldr	r0, [r0, #4]
 8000672:	60d0      	str	r0, [r2, #12]
 8000674:	bc30      	pop	{r4, r5}
 8000676:	4770      	bx	lr

08000678 <_platform_network_state_update_input>:
 8000678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800067c:	4605      	mov	r5, r0
 800067e:	2600      	movs	r6, #0
 8000680:	6828      	ldr	r0, [r5, #0]
 8000682:	2704      	movs	r7, #4
 8000684:	46b0      	mov	r8, r6
 8000686:	6801      	ldr	r1, [r0, #0]
 8000688:	8928      	ldrh	r0, [r5, #8]
 800068a:	b340      	cbz	r0, 80006de <_platform_network_state_update_input+0x66>
 800068c:	686a      	ldr	r2, [r5, #4]
 800068e:	6813      	ldr	r3, [r2, #0]
 8000690:	680a      	ldr	r2, [r1, #0]
 8000692:	eb03 0408 	add.w	r4, r3, r8
 8000696:	6861      	ldr	r1, [r4, #4]
 8000698:	6813      	ldr	r3, [r2, #0]
 800069a:	6890      	ldr	r0, [r2, #8]
 800069c:	ea5f 0c83 	movs.w	ip, r3, lsl #2
 80006a0:	d503      	bpl.n	80006aa <_platform_network_state_update_input+0x32>
 80006a2:	68a2      	ldr	r2, [r4, #8]
 80006a4:	f00e ff56 	bl	800f554 <__aeabi_memcpy>
 80006a8:	e005      	b.n	80006b6 <_platform_network_state_update_input+0x3e>
 80006aa:	68d3      	ldr	r3, [r2, #12]
 80006ac:	1ac0      	subs	r0, r0, r3
 80006ae:	180b      	adds	r3, r1, r0
 80006b0:	6093      	str	r3, [r2, #8]
 80006b2:	6860      	ldr	r0, [r4, #4]
 80006b4:	60d0      	str	r0, [r2, #12]
 80006b6:	6861      	ldr	r1, [r4, #4]
 80006b8:	68a0      	ldr	r0, [r4, #8]
 80006ba:	4408      	add	r0, r1
 80006bc:	6821      	ldr	r1, [r4, #0]
 80006be:	6060      	str	r0, [r4, #4]
 80006c0:	4288      	cmp	r0, r1
 80006c2:	d302      	bcc.n	80006ca <_platform_network_state_update_input+0x52>
 80006c4:	68e2      	ldr	r2, [r4, #12]
 80006c6:	4252      	negs	r2, r2
 80006c8:	1888      	adds	r0, r1, r2
 80006ca:	6060      	str	r0, [r4, #4]
 80006cc:	6828      	ldr	r0, [r5, #0]
 80006ce:	892a      	ldrh	r2, [r5, #8]
 80006d0:	1c76      	adds	r6, r6, #1
 80006d2:	f108 0810 	add.w	r8, r8, #16
 80006d6:	59c1      	ldr	r1, [r0, r7]
 80006d8:	1d3f      	adds	r7, r7, #4
 80006da:	4296      	cmp	r6, r2
 80006dc:	d3d6      	bcc.n	800068c <_platform_network_state_update_input+0x14>
 80006de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080006e2 <_platform_network_state_update_output>:
 80006e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e6:	4605      	mov	r5, r0
 80006e8:	2600      	movs	r6, #0
 80006ea:	6828      	ldr	r0, [r5, #0]
 80006ec:	2704      	movs	r7, #4
 80006ee:	46b0      	mov	r8, r6
 80006f0:	6801      	ldr	r1, [r0, #0]
 80006f2:	8928      	ldrh	r0, [r5, #8]
 80006f4:	b398      	cbz	r0, 800075e <_platform_network_state_update_output+0x7c>
 80006f6:	6809      	ldr	r1, [r1, #0]
 80006f8:	686a      	ldr	r2, [r5, #4]
 80006fa:	6813      	ldr	r3, [r2, #0]
 80006fc:	eb03 0408 	add.w	r4, r3, r8
 8000700:	680b      	ldr	r3, [r1, #0]
 8000702:	6860      	ldr	r0, [r4, #4]
 8000704:	68a2      	ldr	r2, [r4, #8]
 8000706:	ea5f 0c83 	movs.w	ip, r3, lsl #2
 800070a:	d50e      	bpl.n	800072a <_platform_network_state_update_output+0x48>
 800070c:	6889      	ldr	r1, [r1, #8]
 800070e:	f00e ff21 	bl	800f554 <__aeabi_memcpy>
 8000712:	6821      	ldr	r1, [r4, #0]
 8000714:	6862      	ldr	r2, [r4, #4]
 8000716:	68a3      	ldr	r3, [r4, #8]
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	4288      	cmp	r0, r1
 800071c:	6060      	str	r0, [r4, #4]
 800071e:	d302      	bcc.n	8000726 <_platform_network_state_update_output+0x44>
 8000720:	68e0      	ldr	r0, [r4, #12]
 8000722:	4240      	negs	r0, r0
 8000724:	4408      	add	r0, r1
 8000726:	6060      	str	r0, [r4, #4]
 8000728:	e010      	b.n	800074c <_platform_network_state_update_output+0x6a>
 800072a:	4410      	add	r0, r2
 800072c:	6822      	ldr	r2, [r4, #0]
 800072e:	6060      	str	r0, [r4, #4]
 8000730:	4290      	cmp	r0, r2
 8000732:	d302      	bcc.n	800073a <_platform_network_state_update_output+0x58>
 8000734:	68e0      	ldr	r0, [r4, #12]
 8000736:	4240      	negs	r0, r0
 8000738:	4410      	add	r0, r2
 800073a:	6060      	str	r0, [r4, #4]
 800073c:	4602      	mov	r2, r0
 800073e:	6888      	ldr	r0, [r1, #8]
 8000740:	68cb      	ldr	r3, [r1, #12]
 8000742:	1ac0      	subs	r0, r0, r3
 8000744:	1813      	adds	r3, r2, r0
 8000746:	608b      	str	r3, [r1, #8]
 8000748:	6862      	ldr	r2, [r4, #4]
 800074a:	60ca      	str	r2, [r1, #12]
 800074c:	6828      	ldr	r0, [r5, #0]
 800074e:	892a      	ldrh	r2, [r5, #8]
 8000750:	1c76      	adds	r6, r6, #1
 8000752:	f108 0810 	add.w	r8, r8, #16
 8000756:	59c1      	ldr	r1, [r0, r7]
 8000758:	1d3f      	adds	r7, r7, #4
 800075a:	4296      	cmp	r6, r2
 800075c:	d3cb      	bcc.n	80006f6 <_platform_network_state_update_output+0x14>
 800075e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000762 <_platform_network_io_bind>:
 8000762:	2800      	cmp	r0, #0
 8000764:	d100      	bne.n	8000768 <_platform_network_io_bind+0x6>
 8000766:	4770      	bx	lr
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	b081      	sub	sp, #4
 800076e:	2300      	movs	r3, #0
 8000770:	b405      	push	{r0, r2}
 8000772:	b081      	sub	sp, #4
 8000774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000776:	8243      	strh	r3, [r0, #18]
 8000778:	9b01      	ldr	r3, [sp, #4]
 800077a:	2000      	movs	r0, #0
 800077c:	8218      	strh	r0, [r3, #16]
 800077e:	9c01      	ldr	r4, [sp, #4]
 8000780:	7a20      	ldrb	r0, [r4, #8]
 8000782:	f000 0003 	and.w	r0, r0, #3
 8000786:	2803      	cmp	r0, #3
 8000788:	d004      	beq.n	8000794 <_platform_network_io_bind+0x32>
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2111      	movs	r1, #17
 800078e:	f104 000c 	add.w	r0, r4, #12
 8000792:	e0d1      	b.n	8000938 <_platform_network_io_bind+0x1d6>
 8000794:	2900      	cmp	r1, #0
 8000796:	bf1c      	itt	ne
 8000798:	8910      	ldrhne	r0, [r2, #8]
 800079a:	2800      	cmpne	r0, #0
 800079c:	f000 80c6 	beq.w	800092c <_platform_network_io_bind+0x1ca>
 80007a0:	6813      	ldr	r3, [r2, #0]
 80007a2:	2700      	movs	r7, #0
 80007a4:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80007a8:	2504      	movs	r5, #4
 80007aa:	46b9      	mov	r9, r7
 80007ac:	1d0e      	adds	r6, r1, #4
 80007ae:	681c      	ldr	r4, [r3, #0]
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	9800      	ldr	r0, [sp, #0]
 80007b4:	8901      	ldrh	r1, [r0, #8]
 80007b6:	428f      	cmp	r7, r1
 80007b8:	f080 80b4 	bcs.w	8000924 <_platform_network_io_bind+0x1c2>
 80007bc:	6840      	ldr	r0, [r0, #4]
 80007be:	2c00      	cmp	r4, #0
 80007c0:	6801      	ldr	r1, [r0, #0]
 80007c2:	eb01 0809 	add.w	r8, r1, r9
 80007c6:	bf18      	it	ne
 80007c8:	f1b8 0f00 	cmpne.w	r8, #0
 80007cc:	f000 80ae 	beq.w	800092c <_platform_network_io_bind+0x1ca>
 80007d0:	8873      	ldrh	r3, [r6, #2]
 80007d2:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80007d6:	6820      	ldr	r0, [r4, #0]
 80007d8:	68b2      	ldr	r2, [r6, #8]
 80007da:	fb03 fe0c 	mul.w	lr, r3, ip
 80007de:	6841      	ldr	r1, [r0, #4]
 80007e0:	fb02 fe0e 	mul.w	lr, r2, lr
 80007e4:	4571      	cmp	r1, lr
 80007e6:	f0c0 80a3 	bcc.w	8000930 <_platform_network_io_bind+0x1ce>
 80007ea:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80007ee:	459e      	cmp	lr, r3
 80007f0:	bf04      	itt	eq
 80007f2:	68e3      	ldreq	r3, [r4, #12]
 80007f4:	4563      	cmpeq	r3, ip
 80007f6:	bf04      	itt	eq
 80007f8:	f8d4 c008 	ldreq.w	ip, [r4, #8]
 80007fc:	4594      	cmpeq	ip, r2
 80007fe:	f040 8097 	bne.w	8000930 <_platform_network_io_bind+0x1ce>
 8000802:	6800      	ldr	r0, [r0, #0]
 8000804:	f005 f8b0 	bl	8005968 <ai_array_get_byte_size>
 8000808:	6921      	ldr	r1, [r4, #16]
 800080a:	6a22      	ldr	r2, [r4, #32]
 800080c:	4351      	muls	r1, r2
 800080e:	4288      	cmp	r0, r1
 8000810:	f0c0 808e 	bcc.w	8000930 <_platform_network_io_bind+0x1ce>
 8000814:	6820      	ldr	r0, [r4, #0]
 8000816:	6800      	ldr	r0, [r0, #0]
 8000818:	f004 ffce 	bl	80057b8 <ai_array_to_buffer_fmt>
 800081c:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000820:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000824:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000828:	4288      	cmp	r0, r1
 800082a:	d115      	bne.n	8000858 <_platform_network_io_bind+0xf6>
 800082c:	68f0      	ldr	r0, [r6, #12]
 800082e:	2800      	cmp	r0, #0
 8000830:	d07c      	beq.n	800092c <_platform_network_io_bind+0x1ca>
 8000832:	8830      	ldrh	r0, [r6, #0]
 8000834:	b190      	cbz	r0, 800085c <_platform_network_io_bind+0xfa>
 8000836:	4550      	cmp	r0, sl
 8000838:	4622      	mov	r2, r4
 800083a:	f109 0910 	add.w	r9, r9, #16
 800083e:	bf28      	it	cs
 8000840:	4682      	movcs	sl, r0
 8000842:	1f31      	subs	r1, r6, #4
 8000844:	4640      	mov	r0, r8
 8000846:	f7ff fefc 	bl	8000642 <_platform_network_state_setup>
 800084a:	9800      	ldr	r0, [sp, #0]
 800084c:	1c7f      	adds	r7, r7, #1
 800084e:	3614      	adds	r6, #20
 8000850:	6801      	ldr	r1, [r0, #0]
 8000852:	594c      	ldr	r4, [r1, r5]
 8000854:	1d2d      	adds	r5, r5, #4
 8000856:	e7ac      	b.n	80007b2 <_platform_network_io_bind+0x50>
 8000858:	2219      	movs	r2, #25
 800085a:	e06a      	b.n	8000932 <_platform_network_io_bind+0x1d0>
 800085c:	2221      	movs	r2, #33	; 0x21
 800085e:	e068      	b.n	8000932 <_platform_network_io_bind+0x1d0>
 8000860:	9a01      	ldr	r2, [sp, #4]
 8000862:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000864:	f103 020c 	add.w	r2, r3, #12
 8000868:	8911      	ldrh	r1, [r2, #8]
 800086a:	2900      	cmp	r1, #0
 800086c:	d074      	beq.n	8000958 <_platform_network_io_bind+0x1f6>
 800086e:	6813      	ldr	r3, [r2, #0]
 8000870:	2700      	movs	r7, #0
 8000872:	2504      	movs	r5, #4
 8000874:	46b9      	mov	r9, r7
 8000876:	1d06      	adds	r6, r0, #4
 8000878:	681c      	ldr	r4, [r3, #0]
 800087a:	9200      	str	r2, [sp, #0]
 800087c:	9800      	ldr	r0, [sp, #0]
 800087e:	8901      	ldrh	r1, [r0, #8]
 8000880:	428f      	cmp	r7, r1
 8000882:	d25f      	bcs.n	8000944 <_platform_network_io_bind+0x1e2>
 8000884:	6840      	ldr	r0, [r0, #4]
 8000886:	2c00      	cmp	r4, #0
 8000888:	6801      	ldr	r1, [r0, #0]
 800088a:	eb01 0809 	add.w	r8, r1, r9
 800088e:	bf18      	it	ne
 8000890:	f1b8 0f00 	cmpne.w	r8, #0
 8000894:	d05d      	beq.n	8000952 <_platform_network_io_bind+0x1f0>
 8000896:	8873      	ldrh	r3, [r6, #2]
 8000898:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	68b2      	ldr	r2, [r6, #8]
 80008a0:	fb03 fe0c 	mul.w	lr, r3, ip
 80008a4:	6841      	ldr	r1, [r0, #4]
 80008a6:	fb02 fe0e 	mul.w	lr, r2, lr
 80008aa:	4571      	cmp	r1, lr
 80008ac:	d354      	bcc.n	8000958 <_platform_network_io_bind+0x1f6>
 80008ae:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80008b2:	459e      	cmp	lr, r3
 80008b4:	bf04      	itt	eq
 80008b6:	68e3      	ldreq	r3, [r4, #12]
 80008b8:	4563      	cmpeq	r3, ip
 80008ba:	bf04      	itt	eq
 80008bc:	f8d4 c008 	ldreq.w	ip, [r4, #8]
 80008c0:	4594      	cmpeq	ip, r2
 80008c2:	d149      	bne.n	8000958 <_platform_network_io_bind+0x1f6>
 80008c4:	6800      	ldr	r0, [r0, #0]
 80008c6:	f005 f84f 	bl	8005968 <ai_array_get_byte_size>
 80008ca:	6921      	ldr	r1, [r4, #16]
 80008cc:	6a22      	ldr	r2, [r4, #32]
 80008ce:	4351      	muls	r1, r2
 80008d0:	4288      	cmp	r0, r1
 80008d2:	d341      	bcc.n	8000958 <_platform_network_io_bind+0x1f6>
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	6800      	ldr	r0, [r0, #0]
 80008d8:	f004 ff6e 	bl	80057b8 <ai_array_to_buffer_fmt>
 80008dc:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80008e0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80008e4:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80008e8:	4288      	cmp	r0, r1
 80008ea:	d115      	bne.n	8000918 <_platform_network_io_bind+0x1b6>
 80008ec:	68f0      	ldr	r0, [r6, #12]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d02f      	beq.n	8000952 <_platform_network_io_bind+0x1f0>
 80008f2:	8830      	ldrh	r0, [r6, #0]
 80008f4:	b198      	cbz	r0, 800091e <_platform_network_io_bind+0x1bc>
 80008f6:	4550      	cmp	r0, sl
 80008f8:	4622      	mov	r2, r4
 80008fa:	f109 0910 	add.w	r9, r9, #16
 80008fe:	bf28      	it	cs
 8000900:	4682      	movcs	sl, r0
 8000902:	1f31      	subs	r1, r6, #4
 8000904:	4640      	mov	r0, r8
 8000906:	f7ff fe9c 	bl	8000642 <_platform_network_state_setup>
 800090a:	9800      	ldr	r0, [sp, #0]
 800090c:	1c7f      	adds	r7, r7, #1
 800090e:	3614      	adds	r6, #20
 8000910:	6801      	ldr	r1, [r0, #0]
 8000912:	594c      	ldr	r4, [r1, r5]
 8000914:	1d2d      	adds	r5, r5, #4
 8000916:	e7b1      	b.n	800087c <_platform_network_io_bind+0x11a>
 8000918:	2219      	movs	r2, #25
 800091a:	2113      	movs	r1, #19
 800091c:	e00a      	b.n	8000934 <_platform_network_io_bind+0x1d2>
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	2113      	movs	r1, #19
 8000922:	e007      	b.n	8000934 <_platform_network_io_bind+0x1d2>
 8000924:	9802      	ldr	r0, [sp, #8]
 8000926:	2800      	cmp	r0, #0
 8000928:	d19a      	bne.n	8000860 <_platform_network_io_bind+0xfe>
 800092a:	e00e      	b.n	800094a <_platform_network_io_bind+0x1e8>
 800092c:	2217      	movs	r2, #23
 800092e:	e000      	b.n	8000932 <_platform_network_io_bind+0x1d0>
 8000930:	2218      	movs	r2, #24
 8000932:	2112      	movs	r1, #18
 8000934:	9801      	ldr	r0, [sp, #4]
 8000936:	300c      	adds	r0, #12
 8000938:	f000 fc63 	bl	8001202 <core_set_error>
 800093c:	2000      	movs	r0, #0
 800093e:	b004      	add	sp, #16
 8000940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000944:	9801      	ldr	r0, [sp, #4]
 8000946:	f8a0 a010 	strh.w	sl, [r0, #16]
 800094a:	2001      	movs	r0, #1
 800094c:	b004      	add	sp, #16
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	2217      	movs	r2, #23
 8000954:	2113      	movs	r1, #19
 8000956:	e7ed      	b.n	8000934 <_platform_network_io_bind+0x1d2>
 8000958:	2218      	movs	r2, #24
 800095a:	2113      	movs	r1, #19
 800095c:	e7ea      	b.n	8000934 <_platform_network_io_bind+0x1d2>

0800095e <ai_platform_runtime_get_revision>:
 800095e:	f8df 05a8 	ldr.w	r0, [pc, #1448]	; 8000f08 <.text_19>
 8000962:	f240 4249 	movw	r2, #1097	; 0x449
 8000966:	6801      	ldr	r1, [r0, #0]
 8000968:	0849      	lsrs	r1, r1, #1
 800096a:	0049      	lsls	r1, r1, #1
 800096c:	6001      	str	r1, [r0, #0]
 800096e:	f8df 063c 	ldr.w	r0, [pc, #1596]	; 8000fac <.text_21>
 8000972:	6801      	ldr	r1, [r0, #0]
 8000974:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000978:	4291      	cmp	r1, r2
 800097a:	d115      	bne.n	80009a8 <ai_platform_runtime_get_revision+0x4a>
 800097c:	2001      	movs	r0, #1
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	4310      	orrs	r0, r2
 8000984:	4308      	orrs	r0, r1
 8000986:	d01d      	beq.n	80009c4 <ai_platform_runtime_get_revision+0x66>
 8000988:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 8000fb0 <.text_22>
 800098c:	2201      	movs	r2, #1
 800098e:	608a      	str	r2, [r1, #8]
 8000990:	6888      	ldr	r0, [r1, #8]
 8000992:	2800      	cmp	r0, #0
 8000994:	d1fc      	bne.n	8000990 <ai_platform_runtime_get_revision+0x32>
 8000996:	f8df 261c 	ldr.w	r2, [pc, #1564]	; 8000fb4 <.text_23>
 800099a:	f8df 3734 	ldr.w	r3, [pc, #1844]	; 80010d0 <.text_28>
 800099e:	600a      	str	r2, [r1, #0]
 80009a0:	6809      	ldr	r1, [r1, #0]
 80009a2:	4299      	cmp	r1, r3
 80009a4:	d026      	beq.n	80009f4 <ai_platform_runtime_get_revision+0x96>
 80009a6:	e7fe      	b.n	80009a6 <ai_platform_runtime_get_revision+0x48>
 80009a8:	2000      	movs	r0, #0
 80009aa:	f240 4c51 	movw	ip, #1105	; 0x451
 80009ae:	4561      	cmp	r1, ip
 80009b0:	bf08      	it	eq
 80009b2:	2201      	moveq	r2, #1
 80009b4:	d0e4      	beq.n	8000980 <ai_platform_runtime_get_revision+0x22>
 80009b6:	2200      	movs	r2, #0
 80009b8:	f240 4352 	movw	r3, #1106	; 0x452
 80009bc:	4299      	cmp	r1, r3
 80009be:	d1df      	bne.n	8000980 <ai_platform_runtime_get_revision+0x22>
 80009c0:	2101      	movs	r1, #1
 80009c2:	e7de      	b.n	8000982 <ai_platform_runtime_get_revision+0x24>
 80009c4:	f8df 05f0 	ldr.w	r0, [pc, #1520]	; 8000fb8 <.text_24>
 80009c8:	6801      	ldr	r1, [r0, #0]
 80009ca:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80009ce:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80009d2:	d10f      	bne.n	80009f4 <ai_platform_runtime_get_revision+0x96>
 80009d4:	f8df 15e4 	ldr.w	r1, [pc, #1508]	; 8000fbc <.text_25>
 80009d8:	2201      	movs	r2, #1
 80009da:	608a      	str	r2, [r1, #8]
 80009dc:	6888      	ldr	r0, [r1, #8]
 80009de:	2800      	cmp	r0, #0
 80009e0:	d1fc      	bne.n	80009dc <ai_platform_runtime_get_revision+0x7e>
 80009e2:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 8000fb4 <.text_23>
 80009e6:	f8df 36e8 	ldr.w	r3, [pc, #1768]	; 80010d0 <.text_28>
 80009ea:	600a      	str	r2, [r1, #0]
 80009ec:	6809      	ldr	r1, [r1, #0]
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d000      	beq.n	80009f4 <ai_platform_runtime_get_revision+0x96>
 80009f2:	e7fe      	b.n	80009f2 <ai_platform_runtime_get_revision+0x94>
 80009f4:	a0a3      	add	r0, pc, #652	; (adr r0, 8000c84 <.text_14>)
 80009f6:	4770      	bx	lr

080009f8 <ai_platform_runtime_get_version>:
 80009f8:	f8df 050c 	ldr.w	r0, [pc, #1292]	; 8000f08 <.text_19>
 80009fc:	f240 4249 	movw	r2, #1097	; 0x449
 8000a00:	6801      	ldr	r1, [r0, #0]
 8000a02:	0849      	lsrs	r1, r1, #1
 8000a04:	0049      	lsls	r1, r1, #1
 8000a06:	6001      	str	r1, [r0, #0]
 8000a08:	f8df 05a0 	ldr.w	r0, [pc, #1440]	; 8000fac <.text_21>
 8000a0c:	6801      	ldr	r1, [r0, #0]
 8000a0e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000a12:	4291      	cmp	r1, r2
 8000a14:	d115      	bne.n	8000a42 <ai_platform_runtime_get_version+0x4a>
 8000a16:	2001      	movs	r0, #1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4310      	orrs	r0, r2
 8000a1e:	4308      	orrs	r0, r1
 8000a20:	d01d      	beq.n	8000a5e <ai_platform_runtime_get_version+0x66>
 8000a22:	f8df 158c 	ldr.w	r1, [pc, #1420]	; 8000fb0 <.text_22>
 8000a26:	2201      	movs	r2, #1
 8000a28:	608a      	str	r2, [r1, #8]
 8000a2a:	6888      	ldr	r0, [r1, #8]
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d1fc      	bne.n	8000a2a <ai_platform_runtime_get_version+0x32>
 8000a30:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8000fb4 <.text_23>
 8000a34:	f8df 3770 	ldr.w	r3, [pc, #1904]	; 80011a8 <.text_30>
 8000a38:	600a      	str	r2, [r1, #0]
 8000a3a:	6809      	ldr	r1, [r1, #0]
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d026      	beq.n	8000a8e <ai_platform_runtime_get_version+0x96>
 8000a40:	e7fe      	b.n	8000a40 <ai_platform_runtime_get_version+0x48>
 8000a42:	2000      	movs	r0, #0
 8000a44:	f240 4c51 	movw	ip, #1105	; 0x451
 8000a48:	4561      	cmp	r1, ip
 8000a4a:	bf08      	it	eq
 8000a4c:	2201      	moveq	r2, #1
 8000a4e:	d0e4      	beq.n	8000a1a <ai_platform_runtime_get_version+0x22>
 8000a50:	2200      	movs	r2, #0
 8000a52:	f240 4352 	movw	r3, #1106	; 0x452
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d1df      	bne.n	8000a1a <ai_platform_runtime_get_version+0x22>
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	e7de      	b.n	8000a1c <ai_platform_runtime_get_version+0x24>
 8000a5e:	f8df 0558 	ldr.w	r0, [pc, #1368]	; 8000fb8 <.text_24>
 8000a62:	6801      	ldr	r1, [r0, #0]
 8000a64:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000a68:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000a6c:	d10f      	bne.n	8000a8e <ai_platform_runtime_get_version+0x96>
 8000a6e:	f8df 154c 	ldr.w	r1, [pc, #1356]	; 8000fbc <.text_25>
 8000a72:	2201      	movs	r2, #1
 8000a74:	608a      	str	r2, [r1, #8]
 8000a76:	6888      	ldr	r0, [r1, #8]
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d1fc      	bne.n	8000a76 <ai_platform_runtime_get_version+0x7e>
 8000a7c:	f8df 2534 	ldr.w	r2, [pc, #1332]	; 8000fb4 <.text_23>
 8000a80:	f8df 3724 	ldr.w	r3, [pc, #1828]	; 80011a8 <.text_30>
 8000a84:	600a      	str	r2, [r1, #0]
 8000a86:	6809      	ldr	r1, [r1, #0]
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d000      	beq.n	8000a8e <ai_platform_runtime_get_version+0x96>
 8000a8c:	e7fe      	b.n	8000a8c <ai_platform_runtime_get_version+0x94>
 8000a8e:	f20f 703c 	addw	r0, pc, #1852	; 0x73c
 8000a92:	6800      	ldr	r0, [r0, #0]
 8000a94:	4770      	bx	lr

08000a96 <ai_platform_api_get_version>:
 8000a96:	f8df 0470 	ldr.w	r0, [pc, #1136]	; 8000f08 <.text_19>
 8000a9a:	f240 4249 	movw	r2, #1097	; 0x449
 8000a9e:	6801      	ldr	r1, [r0, #0]
 8000aa0:	0849      	lsrs	r1, r1, #1
 8000aa2:	0049      	lsls	r1, r1, #1
 8000aa4:	6001      	str	r1, [r0, #0]
 8000aa6:	f8df 0504 	ldr.w	r0, [pc, #1284]	; 8000fac <.text_21>
 8000aaa:	6801      	ldr	r1, [r0, #0]
 8000aac:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000ab0:	4291      	cmp	r1, r2
 8000ab2:	d115      	bne.n	8000ae0 <ai_platform_api_get_version+0x4a>
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4310      	orrs	r0, r2
 8000abc:	4308      	orrs	r0, r1
 8000abe:	d01d      	beq.n	8000afc <ai_platform_api_get_version+0x66>
 8000ac0:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000fb0 <.text_22>
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	608a      	str	r2, [r1, #8]
 8000ac8:	6888      	ldr	r0, [r1, #8]
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d1fc      	bne.n	8000ac8 <ai_platform_api_get_version+0x32>
 8000ace:	f8df 24e4 	ldr.w	r2, [pc, #1252]	; 8000fb4 <.text_23>
 8000ad2:	f8df 36d4 	ldr.w	r3, [pc, #1748]	; 80011a8 <.text_30>
 8000ad6:	600a      	str	r2, [r1, #0]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d026      	beq.n	8000b2c <ai_platform_api_get_version+0x96>
 8000ade:	e7fe      	b.n	8000ade <ai_platform_api_get_version+0x48>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f240 4c51 	movw	ip, #1105	; 0x451
 8000ae6:	4561      	cmp	r1, ip
 8000ae8:	bf08      	it	eq
 8000aea:	2201      	moveq	r2, #1
 8000aec:	d0e4      	beq.n	8000ab8 <ai_platform_api_get_version+0x22>
 8000aee:	2200      	movs	r2, #0
 8000af0:	f240 4352 	movw	r3, #1106	; 0x452
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d1df      	bne.n	8000ab8 <ai_platform_api_get_version+0x22>
 8000af8:	2101      	movs	r1, #1
 8000afa:	e7de      	b.n	8000aba <ai_platform_api_get_version+0x24>
 8000afc:	f8df 04b8 	ldr.w	r0, [pc, #1208]	; 8000fb8 <.text_24>
 8000b00:	6801      	ldr	r1, [r0, #0]
 8000b02:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b06:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000b0a:	d10f      	bne.n	8000b2c <ai_platform_api_get_version+0x96>
 8000b0c:	f8df 14ac 	ldr.w	r1, [pc, #1196]	; 8000fbc <.text_25>
 8000b10:	2201      	movs	r2, #1
 8000b12:	608a      	str	r2, [r1, #8]
 8000b14:	6888      	ldr	r0, [r1, #8]
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d1fc      	bne.n	8000b14 <ai_platform_api_get_version+0x7e>
 8000b1a:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000fb4 <.text_23>
 8000b1e:	f8df 3688 	ldr.w	r3, [pc, #1672]	; 80011a8 <.text_30>
 8000b22:	600a      	str	r2, [r1, #0]
 8000b24:	6809      	ldr	r1, [r1, #0]
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d000      	beq.n	8000b2c <ai_platform_api_get_version+0x96>
 8000b2a:	e7fe      	b.n	8000b2a <ai_platform_api_get_version+0x94>
 8000b2c:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8000b30:	6800      	ldr	r0, [r0, #0]
 8000b32:	4770      	bx	lr

08000b34 <ai_platform_interface_api_get_version>:
 8000b34:	f8df 03d0 	ldr.w	r0, [pc, #976]	; 8000f08 <.text_19>
 8000b38:	f240 4249 	movw	r2, #1097	; 0x449
 8000b3c:	6801      	ldr	r1, [r0, #0]
 8000b3e:	0849      	lsrs	r1, r1, #1
 8000b40:	0049      	lsls	r1, r1, #1
 8000b42:	6001      	str	r1, [r0, #0]
 8000b44:	f8df 0464 	ldr.w	r0, [pc, #1124]	; 8000fac <.text_21>
 8000b48:	6801      	ldr	r1, [r0, #0]
 8000b4a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b4e:	4291      	cmp	r1, r2
 8000b50:	d115      	bne.n	8000b7e <ai_platform_interface_api_get_version+0x4a>
 8000b52:	2001      	movs	r0, #1
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4310      	orrs	r0, r2
 8000b5a:	4308      	orrs	r0, r1
 8000b5c:	d01d      	beq.n	8000b9a <ai_platform_interface_api_get_version+0x66>
 8000b5e:	f8df 1450 	ldr.w	r1, [pc, #1104]	; 8000fb0 <.text_22>
 8000b62:	2201      	movs	r2, #1
 8000b64:	608a      	str	r2, [r1, #8]
 8000b66:	6888      	ldr	r0, [r1, #8]
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d1fc      	bne.n	8000b66 <ai_platform_interface_api_get_version+0x32>
 8000b6c:	f8df 2444 	ldr.w	r2, [pc, #1092]	; 8000fb4 <.text_23>
 8000b70:	f8df 3634 	ldr.w	r3, [pc, #1588]	; 80011a8 <.text_30>
 8000b74:	600a      	str	r2, [r1, #0]
 8000b76:	6809      	ldr	r1, [r1, #0]
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d026      	beq.n	8000bca <ai_platform_interface_api_get_version+0x96>
 8000b7c:	e7fe      	b.n	8000b7c <ai_platform_interface_api_get_version+0x48>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f240 4c51 	movw	ip, #1105	; 0x451
 8000b84:	4561      	cmp	r1, ip
 8000b86:	bf08      	it	eq
 8000b88:	2201      	moveq	r2, #1
 8000b8a:	d0e4      	beq.n	8000b56 <ai_platform_interface_api_get_version+0x22>
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f240 4352 	movw	r3, #1106	; 0x452
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d1df      	bne.n	8000b56 <ai_platform_interface_api_get_version+0x22>
 8000b96:	2101      	movs	r1, #1
 8000b98:	e7de      	b.n	8000b58 <ai_platform_interface_api_get_version+0x24>
 8000b9a:	f8df 041c 	ldr.w	r0, [pc, #1052]	; 8000fb8 <.text_24>
 8000b9e:	6801      	ldr	r1, [r0, #0]
 8000ba0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000ba4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000ba8:	d10f      	bne.n	8000bca <ai_platform_interface_api_get_version+0x96>
 8000baa:	f8df 1410 	ldr.w	r1, [pc, #1040]	; 8000fbc <.text_25>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	608a      	str	r2, [r1, #8]
 8000bb2:	6888      	ldr	r0, [r1, #8]
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d1fc      	bne.n	8000bb2 <ai_platform_interface_api_get_version+0x7e>
 8000bb8:	f8df 23f8 	ldr.w	r2, [pc, #1016]	; 8000fb4 <.text_23>
 8000bbc:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 80011a8 <.text_30>
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	6809      	ldr	r1, [r1, #0]
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d000      	beq.n	8000bca <ai_platform_interface_api_get_version+0x96>
 8000bc8:	e7fe      	b.n	8000bc8 <ai_platform_interface_api_get_version+0x94>
 8000bca:	f20f 6008 	addw	r0, pc, #1544	; 0x608
 8000bce:	6800      	ldr	r0, [r0, #0]
 8000bd0:	4770      	bx	lr

08000bd2 <ai_platform_context_acquire>:
 8000bd2:	b430      	push	{r4, r5}
 8000bd4:	b120      	cbz	r0, 8000be0 <ai_platform_context_acquire+0xe>
 8000bd6:	6801      	ldr	r1, [r0, #0]
 8000bd8:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 80011ac <.text_31>
 8000bdc:	4291      	cmp	r1, r2
 8000bde:	d000      	beq.n	8000be2 <ai_platform_context_acquire+0x10>
 8000be0:	2000      	movs	r0, #0
 8000be2:	f8df 1324 	ldr.w	r1, [pc, #804]	; 8000f08 <.text_19>
 8000be6:	f240 4449 	movw	r4, #1097	; 0x449
 8000bea:	680b      	ldr	r3, [r1, #0]
 8000bec:	085b      	lsrs	r3, r3, #1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	600b      	str	r3, [r1, #0]
 8000bf2:	f8df 13b8 	ldr.w	r1, [pc, #952]	; 8000fac <.text_21>
 8000bf6:	680a      	ldr	r2, [r1, #0]
 8000bf8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d115      	bne.n	8000c2c <ai_platform_context_acquire+0x5a>
 8000c00:	2101      	movs	r1, #1
 8000c02:	2300      	movs	r3, #0
 8000c04:	2200      	movs	r2, #0
 8000c06:	4319      	orrs	r1, r3
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	d01d      	beq.n	8000c48 <ai_platform_context_acquire+0x76>
 8000c0c:	f8df 23a0 	ldr.w	r2, [pc, #928]	; 8000fb0 <.text_22>
 8000c10:	2301      	movs	r3, #1
 8000c12:	6093      	str	r3, [r2, #8]
 8000c14:	6891      	ldr	r1, [r2, #8]
 8000c16:	2900      	cmp	r1, #0
 8000c18:	d1fc      	bne.n	8000c14 <ai_platform_context_acquire+0x42>
 8000c1a:	f8df 3398 	ldr.w	r3, [pc, #920]	; 8000fb4 <.text_23>
 8000c1e:	f8df 4588 	ldr.w	r4, [pc, #1416]	; 80011a8 <.text_30>
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	42a2      	cmp	r2, r4
 8000c28:	d026      	beq.n	8000c78 <ai_platform_context_acquire+0xa6>
 8000c2a:	e7fe      	b.n	8000c2a <ai_platform_context_acquire+0x58>
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f240 4551 	movw	r5, #1105	; 0x451
 8000c32:	42aa      	cmp	r2, r5
 8000c34:	bf08      	it	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	d0e4      	beq.n	8000c04 <ai_platform_context_acquire+0x32>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f240 4452 	movw	r4, #1106	; 0x452
 8000c40:	42a2      	cmp	r2, r4
 8000c42:	d1df      	bne.n	8000c04 <ai_platform_context_acquire+0x32>
 8000c44:	2201      	movs	r2, #1
 8000c46:	e7de      	b.n	8000c06 <ai_platform_context_acquire+0x34>
 8000c48:	f8df 136c 	ldr.w	r1, [pc, #876]	; 8000fb8 <.text_24>
 8000c4c:	680a      	ldr	r2, [r1, #0]
 8000c4e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c52:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000c56:	d10f      	bne.n	8000c78 <ai_platform_context_acquire+0xa6>
 8000c58:	f8df 2360 	ldr.w	r2, [pc, #864]	; 8000fbc <.text_25>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	6093      	str	r3, [r2, #8]
 8000c60:	6891      	ldr	r1, [r2, #8]
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d1fc      	bne.n	8000c60 <ai_platform_context_acquire+0x8e>
 8000c66:	f8df 334c 	ldr.w	r3, [pc, #844]	; 8000fb4 <.text_23>
 8000c6a:	f8df 453c 	ldr.w	r4, [pc, #1340]	; 80011a8 <.text_30>
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	42a2      	cmp	r2, r4
 8000c74:	d000      	beq.n	8000c78 <ai_platform_context_acquire+0xa6>
 8000c76:	e7fe      	b.n	8000c76 <ai_platform_context_acquire+0xa4>
 8000c78:	bc30      	pop	{r4, r5}
 8000c7a:	4770      	bx	lr

08000c7c <ai_platform_context_release>:
 8000c7c:	f8df 152c 	ldr.w	r1, [pc, #1324]	; 80011ac <.text_31>
 8000c80:	6001      	str	r1, [r0, #0]
 8000c82:	4770      	bx	lr

08000c84 <.text_14>:
 8000c84:	00000000 	.word	0x00000000

08000c88 <ai_platform_network_get_error>:
 8000c88:	b430      	push	{r4, r5}
 8000c8a:	b120      	cbz	r0, 8000c96 <ai_platform_network_get_error+0xe>
 8000c8c:	6801      	ldr	r1, [r0, #0]
 8000c8e:	f8df 251c 	ldr.w	r2, [pc, #1308]	; 80011ac <.text_31>
 8000c92:	4291      	cmp	r1, r2
 8000c94:	d000      	beq.n	8000c98 <ai_platform_network_get_error+0x10>
 8000c96:	2000      	movs	r0, #0
 8000c98:	499b      	ldr	r1, [pc, #620]	; (8000f08 <.text_19>)
 8000c9a:	f240 4449 	movw	r4, #1097	; 0x449
 8000c9e:	680b      	ldr	r3, [r1, #0]
 8000ca0:	085b      	lsrs	r3, r3, #1
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	f8df 1304 	ldr.w	r1, [pc, #772]	; 8000fac <.text_21>
 8000caa:	680a      	ldr	r2, [r1, #0]
 8000cac:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000cb0:	42a2      	cmp	r2, r4
 8000cb2:	d113      	bne.n	8000cdc <ai_platform_network_get_error+0x54>
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4319      	orrs	r1, r3
 8000cbc:	4311      	orrs	r1, r2
 8000cbe:	d01b      	beq.n	8000cf8 <ai_platform_network_get_error+0x70>
 8000cc0:	4abb      	ldr	r2, [pc, #748]	; (8000fb0 <.text_22>)
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	6093      	str	r3, [r2, #8]
 8000cc6:	6891      	ldr	r1, [r2, #8]
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d1fc      	bne.n	8000cc6 <ai_platform_network_get_error+0x3e>
 8000ccc:	4bb9      	ldr	r3, [pc, #740]	; (8000fb4 <.text_23>)
 8000cce:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 80011a8 <.text_30>
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	42a2      	cmp	r2, r4
 8000cd8:	d023      	beq.n	8000d22 <ai_platform_network_get_error+0x9a>
 8000cda:	e7fe      	b.n	8000cda <ai_platform_network_get_error+0x52>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f240 4551 	movw	r5, #1105	; 0x451
 8000ce2:	42aa      	cmp	r2, r5
 8000ce4:	bf08      	it	eq
 8000ce6:	2301      	moveq	r3, #1
 8000ce8:	d0e6      	beq.n	8000cb8 <ai_platform_network_get_error+0x30>
 8000cea:	2300      	movs	r3, #0
 8000cec:	f240 4452 	movw	r4, #1106	; 0x452
 8000cf0:	42a2      	cmp	r2, r4
 8000cf2:	d1e1      	bne.n	8000cb8 <ai_platform_network_get_error+0x30>
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	e7e0      	b.n	8000cba <ai_platform_network_get_error+0x32>
 8000cf8:	49af      	ldr	r1, [pc, #700]	; (8000fb8 <.text_24>)
 8000cfa:	680a      	ldr	r2, [r1, #0]
 8000cfc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000d00:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000d04:	d10d      	bne.n	8000d22 <ai_platform_network_get_error+0x9a>
 8000d06:	4aad      	ldr	r2, [pc, #692]	; (8000fbc <.text_25>)
 8000d08:	2301      	movs	r3, #1
 8000d0a:	6093      	str	r3, [r2, #8]
 8000d0c:	6891      	ldr	r1, [r2, #8]
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d1fc      	bne.n	8000d0c <ai_platform_network_get_error+0x84>
 8000d12:	4ba8      	ldr	r3, [pc, #672]	; (8000fb4 <.text_23>)
 8000d14:	f8df 4490 	ldr.w	r4, [pc, #1168]	; 80011a8 <.text_30>
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	d000      	beq.n	8000d22 <ai_platform_network_get_error+0x9a>
 8000d20:	e7fe      	b.n	8000d20 <ai_platform_network_get_error+0x98>
 8000d22:	b920      	cbnz	r0, 8000d2e <ai_platform_network_get_error+0xa6>
 8000d24:	f20f 40c0 	addw	r0, pc, #1216	; 0x4c0
 8000d28:	6800      	ldr	r0, [r0, #0]
 8000d2a:	bc30      	pop	{r4, r5}
 8000d2c:	4770      	bx	lr
 8000d2e:	300c      	adds	r0, #12
 8000d30:	bc30      	pop	{r4, r5}
 8000d32:	f000 ba61 	b.w	80011f8 <core_get_error>

08000d36 <ai_platform_network_set_error>:
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf1c      	itt	ne
 8000d3a:	300c      	addne	r0, #12
 8000d3c:	f000 ba61 	bne.w	8001202 <core_set_error>
 8000d40:	4770      	bx	lr

08000d42 <ai_platform_api_get_network_report>:
 8000d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d46:	0004      	movs	r4, r0
 8000d48:	b081      	sub	sp, #4
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	d004      	beq.n	8000d58 <ai_platform_api_get_network_report+0x16>
 8000d4e:	6820      	ldr	r0, [r4, #0]
 8000d50:	f8df 1458 	ldr.w	r1, [pc, #1112]	; 80011ac <.text_31>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	d000      	beq.n	8000d5a <ai_platform_api_get_network_report+0x18>
 8000d58:	2400      	movs	r4, #0
 8000d5a:	486b      	ldr	r0, [pc, #428]	; (8000f08 <.text_19>)
 8000d5c:	f240 4349 	movw	r3, #1097	; 0x449
 8000d60:	6802      	ldr	r2, [r0, #0]
 8000d62:	0852      	lsrs	r2, r2, #1
 8000d64:	0052      	lsls	r2, r2, #1
 8000d66:	6002      	str	r2, [r0, #0]
 8000d68:	4890      	ldr	r0, [pc, #576]	; (8000fac <.text_21>)
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d113      	bne.n	8000d9c <ai_platform_api_get_network_report+0x5a>
 8000d74:	2001      	movs	r0, #1
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	4308      	orrs	r0, r1
 8000d7e:	d01b      	beq.n	8000db8 <ai_platform_api_get_network_report+0x76>
 8000d80:	498b      	ldr	r1, [pc, #556]	; (8000fb0 <.text_22>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	608a      	str	r2, [r1, #8]
 8000d86:	6888      	ldr	r0, [r1, #8]
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d1fc      	bne.n	8000d86 <ai_platform_api_get_network_report+0x44>
 8000d8c:	4a89      	ldr	r2, [pc, #548]	; (8000fb4 <.text_23>)
 8000d8e:	f8df 3340 	ldr.w	r3, [pc, #832]	; 80010d0 <.text_28>
 8000d92:	600a      	str	r2, [r1, #0]
 8000d94:	6809      	ldr	r1, [r1, #0]
 8000d96:	4299      	cmp	r1, r3
 8000d98:	d022      	beq.n	8000de0 <ai_platform_api_get_network_report+0x9e>
 8000d9a:	e7fe      	b.n	8000d9a <ai_platform_api_get_network_report+0x58>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f240 4651 	movw	r6, #1105	; 0x451
 8000da2:	42b1      	cmp	r1, r6
 8000da4:	bf08      	it	eq
 8000da6:	2201      	moveq	r2, #1
 8000da8:	d0e6      	beq.n	8000d78 <ai_platform_api_get_network_report+0x36>
 8000daa:	2200      	movs	r2, #0
 8000dac:	f240 4352 	movw	r3, #1106	; 0x452
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d1e1      	bne.n	8000d78 <ai_platform_api_get_network_report+0x36>
 8000db4:	2101      	movs	r1, #1
 8000db6:	e7e0      	b.n	8000d7a <ai_platform_api_get_network_report+0x38>
 8000db8:	487f      	ldr	r0, [pc, #508]	; (8000fb8 <.text_24>)
 8000dba:	6801      	ldr	r1, [r0, #0]
 8000dbc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000dc0:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000dc4:	d10c      	bne.n	8000de0 <ai_platform_api_get_network_report+0x9e>
 8000dc6:	497d      	ldr	r1, [pc, #500]	; (8000fbc <.text_25>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	608a      	str	r2, [r1, #8]
 8000dcc:	6888      	ldr	r0, [r1, #8]
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d1fc      	bne.n	8000dcc <ai_platform_api_get_network_report+0x8a>
 8000dd2:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <.text_23>)
 8000dd4:	4bbe      	ldr	r3, [pc, #760]	; (80010d0 <.text_28>)
 8000dd6:	600a      	str	r2, [r1, #0]
 8000dd8:	6809      	ldr	r1, [r1, #0]
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	d000      	beq.n	8000de0 <ai_platform_api_get_network_report+0x9e>
 8000dde:	e7fe      	b.n	8000dde <ai_platform_api_get_network_report+0x9c>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	bf18      	it	ne
 8000de4:	2d00      	cmpne	r5, #0
 8000de6:	d056      	beq.n	8000e96 <ai_platform_api_get_network_report+0x154>
 8000de8:	2000      	movs	r0, #0
 8000dea:	6668      	str	r0, [r5, #100]	; 0x64
 8000dec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d04b      	beq.n	8000e8a <ai_platform_api_get_network_report+0x148>
 8000df2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8000df4:	1c49      	adds	r1, r1, #1
 8000df6:	6669      	str	r1, [r5, #100]	; 0x64
 8000df8:	6890      	ldr	r0, [r2, #8]
 8000dfa:	4282      	cmp	r2, r0
 8000dfc:	bf1c      	itt	ne
 8000dfe:	2800      	cmpne	r0, #0
 8000e00:	4602      	movne	r2, r0
 8000e02:	d1f6      	bne.n	8000df2 <ai_platform_api_get_network_report+0xb0>
 8000e04:	e03f      	b.n	8000e86 <ai_platform_api_get_network_report+0x144>
 8000e06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e08:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000e0c:	f7ff fbe0 	bl	80005d0 <_ai_platform_get_io_buffers>
 8000e10:	8628      	strh	r0, [r5, #48]	; 0x30
 8000e12:	b910      	cbnz	r0, 8000e1a <ai_platform_api_get_network_report+0xd8>
 8000e14:	2218      	movs	r2, #24
 8000e16:	2112      	movs	r1, #18
 8000e18:	e039      	b.n	8000e8e <ai_platform_api_get_network_report+0x14c>
 8000e1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e1c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000e20:	300c      	adds	r0, #12
 8000e22:	f7ff fbd5 	bl	80005d0 <_ai_platform_get_io_buffers>
 8000e26:	8668      	strh	r0, [r5, #50]	; 0x32
 8000e28:	b910      	cbnz	r0, 8000e30 <ai_platform_api_get_network_report+0xee>
 8000e2a:	2218      	movs	r2, #24
 8000e2c:	2113      	movs	r1, #19
 8000e2e:	e02e      	b.n	8000e8e <ai_platform_api_get_network_report+0x14c>
 8000e30:	6860      	ldr	r0, [r4, #4]
 8000e32:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000e36:	66a8      	str	r0, [r5, #104]	; 0x68
 8000e38:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8000e3c:	e892 50c8 	ldmia.w	r2, {r3, r6, r7, ip, lr}
 8000e40:	e881 50c8 	stmia.w	r1, {r3, r6, r7, ip, lr}
 8000e44:	3414      	adds	r4, #20
 8000e46:	f105 0850 	add.w	r8, r5, #80	; 0x50
 8000e4a:	e894 0e03 	ldmia.w	r4, {r0, r1, r9, sl, fp}
 8000e4e:	e888 0e03 	stmia.w	r8, {r0, r1, r9, sl, fp}
 8000e52:	f7ff fb71 	bl	8000538 <CRC_Lock>
 8000e56:	a09d      	add	r0, pc, #628	; (adr r0, 80010cc <.text_27>)
 8000e58:	6128      	str	r0, [r5, #16]
 8000e5a:	f7ff fb6d 	bl	8000538 <CRC_Lock>
 8000e5e:	f20f 316c 	addw	r1, pc, #876	; 0x36c
 8000e62:	680a      	ldr	r2, [r1, #0]
 8000e64:	616a      	str	r2, [r5, #20]
 8000e66:	f7ff fb67 	bl	8000538 <CRC_Lock>
 8000e6a:	f20f 3064 	addw	r0, pc, #868	; 0x364
 8000e6e:	6801      	ldr	r1, [r0, #0]
 8000e70:	6269      	str	r1, [r5, #36]	; 0x24
 8000e72:	f7ff fb61 	bl	8000538 <CRC_Lock>
 8000e76:	f20f 325c 	addw	r2, pc, #860	; 0x35c
 8000e7a:	6810      	ldr	r0, [r2, #0]
 8000e7c:	62a8      	str	r0, [r5, #40]	; 0x28
 8000e7e:	2001      	movs	r0, #1
 8000e80:	b001      	add	sp, #4
 8000e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d1bd      	bne.n	8000e06 <ai_platform_api_get_network_report+0xc4>
 8000e8a:	2218      	movs	r2, #24
 8000e8c:	2111      	movs	r1, #17
 8000e8e:	f104 000c 	add.w	r0, r4, #12
 8000e92:	f000 f9b6 	bl	8001202 <core_set_error>
 8000e96:	2000      	movs	r0, #0
 8000e98:	b001      	add	sp, #4
 8000e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e9e <ai_platform_network_create>:
 8000e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea0:	b081      	sub	sp, #4
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	9d06      	ldr	r5, [sp, #24]
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	9807      	ldr	r0, [sp, #28]
 8000eaa:	4616      	mov	r6, r2
 8000eac:	042d      	lsls	r5, r5, #16
 8000eae:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000eb2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000eb6:	f20f 3034 	addw	r0, pc, #820	; 0x334
 8000eba:	6807      	ldr	r7, [r0, #0]
 8000ebc:	f7ff fb3c 	bl	8000538 <CRC_Lock>
 8000ec0:	b924      	cbnz	r4, 8000ecc <ai_platform_network_create+0x2e>
 8000ec2:	f20f 302c 	addw	r0, pc, #812	; 0x32c
 8000ec6:	b001      	add	sp, #4
 8000ec8:	6800      	ldr	r0, [r0, #0]
 8000eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ecc:	f8df 12dc 	ldr.w	r1, [pc, #732]	; 80011ac <.text_31>
 8000ed0:	6031      	str	r1, [r6, #0]
 8000ed2:	6026      	str	r6, [r4, #0]
 8000ed4:	f000 f98e 	bl	80011f4 <core_init>
 8000ed8:	b910      	cbnz	r0, 8000ee0 <ai_platform_network_create+0x42>
 8000eda:	f20f 20fc 	addw	r0, pc, #764	; 0x2fc
 8000ede:	e00d      	b.n	8000efc <ai_platform_network_create+0x5e>
 8000ee0:	49b3      	ldr	r1, [pc, #716]	; (80011b0 <.text_32>)
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	d303      	bcc.n	8000eee <ai_platform_network_create+0x50>
 8000ee6:	f20f 22f4 	addw	r2, pc, #756	; 0x2f4
 8000eea:	6817      	ldr	r7, [r2, #0]
 8000eec:	e007      	b.n	8000efe <ai_platform_network_create+0x60>
 8000eee:	f20f 20f0 	addw	r0, pc, #752	; 0x2f0
 8000ef2:	f000 ff97 	bl	8001e24 <ai_check_custom_types>
 8000ef6:	b920      	cbnz	r0, 8000f02 <ai_platform_network_create+0x64>
 8000ef8:	f20f 20e8 	addw	r0, pc, #744	; 0x2e8
 8000efc:	6807      	ldr	r7, [r0, #0]
 8000efe:	2100      	movs	r1, #0
 8000f00:	6021      	str	r1, [r4, #0]
 8000f02:	4638      	mov	r0, r7
 8000f04:	b001      	add	sp, #4
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f08 <.text_19>:
 8000f08:	e0002000 	.word	0xe0002000

08000f0c <ai_platform_network_destroy>:
 8000f0c:	b470      	push	{r4, r5, r6}
 8000f0e:	b128      	cbz	r0, 8000f1c <ai_platform_network_destroy+0x10>
 8000f10:	6801      	ldr	r1, [r0, #0]
 8000f12:	4aa6      	ldr	r2, [pc, #664]	; (80011ac <.text_31>)
 8000f14:	4291      	cmp	r1, r2
 8000f16:	bf08      	it	eq
 8000f18:	4602      	moveq	r2, r0
 8000f1a:	d000      	beq.n	8000f1e <ai_platform_network_destroy+0x12>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	49a5      	ldr	r1, [pc, #660]	; (80011b4 <.text_33>)
 8000f20:	f240 4449 	movw	r4, #1097	; 0x449
 8000f24:	680b      	ldr	r3, [r1, #0]
 8000f26:	085b      	lsrs	r3, r3, #1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	491f      	ldr	r1, [pc, #124]	; (8000fac <.text_21>)
 8000f2e:	680b      	ldr	r3, [r1, #0]
 8000f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d112      	bne.n	8000f5e <ai_platform_network_destroy+0x52>
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4321      	orrs	r1, r4
 8000f40:	4319      	orrs	r1, r3
 8000f42:	d01a      	beq.n	8000f7a <ai_platform_network_destroy+0x6e>
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <.text_22>)
 8000f46:	2401      	movs	r4, #1
 8000f48:	609c      	str	r4, [r3, #8]
 8000f4a:	6899      	ldr	r1, [r3, #8]
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d1fc      	bne.n	8000f4a <ai_platform_network_destroy+0x3e>
 8000f50:	4c18      	ldr	r4, [pc, #96]	; (8000fb4 <.text_23>)
 8000f52:	4d95      	ldr	r5, [pc, #596]	; (80011a8 <.text_30>)
 8000f54:	601c      	str	r4, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	42ab      	cmp	r3, r5
 8000f5a:	d022      	beq.n	8000fa2 <ai_platform_network_destroy+0x96>
 8000f5c:	e7fe      	b.n	8000f5c <ai_platform_network_destroy+0x50>
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f240 4651 	movw	r6, #1105	; 0x451
 8000f64:	42b3      	cmp	r3, r6
 8000f66:	bf08      	it	eq
 8000f68:	2401      	moveq	r4, #1
 8000f6a:	d0e7      	beq.n	8000f3c <ai_platform_network_destroy+0x30>
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	f240 4552 	movw	r5, #1106	; 0x452
 8000f72:	42ab      	cmp	r3, r5
 8000f74:	d1e2      	bne.n	8000f3c <ai_platform_network_destroy+0x30>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e7e1      	b.n	8000f3e <ai_platform_network_destroy+0x32>
 8000f7a:	490f      	ldr	r1, [pc, #60]	; (8000fb8 <.text_24>)
 8000f7c:	680b      	ldr	r3, [r1, #0]
 8000f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f82:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000f86:	d10c      	bne.n	8000fa2 <ai_platform_network_destroy+0x96>
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <.text_25>)
 8000f8a:	2401      	movs	r4, #1
 8000f8c:	609c      	str	r4, [r3, #8]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	2900      	cmp	r1, #0
 8000f92:	d1fc      	bne.n	8000f8e <ai_platform_network_destroy+0x82>
 8000f94:	4c07      	ldr	r4, [pc, #28]	; (8000fb4 <.text_23>)
 8000f96:	4d84      	ldr	r5, [pc, #528]	; (80011a8 <.text_30>)
 8000f98:	601c      	str	r4, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	42ab      	cmp	r3, r5
 8000f9e:	d000      	beq.n	8000fa2 <ai_platform_network_destroy+0x96>
 8000fa0:	e7fe      	b.n	8000fa0 <ai_platform_network_destroy+0x94>
 8000fa2:	b102      	cbz	r2, 8000fa6 <ai_platform_network_destroy+0x9a>
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	bc70      	pop	{r4, r5, r6}
 8000fa8:	4770      	bx	lr
	...

08000fac <.text_21>:
 8000fac:	e0042000 	.word	0xe0042000

08000fb0 <.text_22>:
 8000fb0:	40023000 	.word	0x40023000

08000fb4 <.text_23>:
 8000fb4:	f407a5c2 	.word	0xf407a5c2

08000fb8 <.text_24>:
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <.text_25>:
 8000fbc:	58024c00 	.word	0x58024c00

08000fc0 <ai_platform_network_init>:
 8000fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc4:	b081      	sub	sp, #4
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	b118      	cbz	r0, 8000fd2 <ai_platform_network_init+0x12>
 8000fca:	6801      	ldr	r1, [r0, #0]
 8000fcc:	4b77      	ldr	r3, [pc, #476]	; (80011ac <.text_31>)
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	d000      	beq.n	8000fd4 <ai_platform_network_init+0x14>
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	4977      	ldr	r1, [pc, #476]	; (80011b4 <.text_33>)
 8000fd6:	f240 4549 	movw	r5, #1097	; 0x449
 8000fda:	680c      	ldr	r4, [r1, #0]
 8000fdc:	0864      	lsrs	r4, r4, #1
 8000fde:	0064      	lsls	r4, r4, #1
 8000fe0:	600c      	str	r4, [r1, #0]
 8000fe2:	4975      	ldr	r1, [pc, #468]	; (80011b8 <.text_34>)
 8000fe4:	680b      	ldr	r3, [r1, #0]
 8000fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fea:	42ab      	cmp	r3, r5
 8000fec:	d112      	bne.n	8001014 <ai_platform_network_init+0x54>
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4321      	orrs	r1, r4
 8000ff6:	4319      	orrs	r1, r3
 8000ff8:	d01a      	beq.n	8001030 <ai_platform_network_init+0x70>
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <.text_35>)
 8000ffc:	2401      	movs	r4, #1
 8000ffe:	609c      	str	r4, [r3, #8]
 8001000:	6899      	ldr	r1, [r3, #8]
 8001002:	2900      	cmp	r1, #0
 8001004:	d1fc      	bne.n	8001000 <ai_platform_network_init+0x40>
 8001006:	4c6e      	ldr	r4, [pc, #440]	; (80011c0 <.text_36>)
 8001008:	4d67      	ldr	r5, [pc, #412]	; (80011a8 <.text_30>)
 800100a:	601c      	str	r4, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	42ab      	cmp	r3, r5
 8001010:	d022      	beq.n	8001058 <ai_platform_network_init+0x98>
 8001012:	e7fe      	b.n	8001012 <ai_platform_network_init+0x52>
 8001014:	2100      	movs	r1, #0
 8001016:	f240 4651 	movw	r6, #1105	; 0x451
 800101a:	42b3      	cmp	r3, r6
 800101c:	bf08      	it	eq
 800101e:	2401      	moveq	r4, #1
 8001020:	d0e7      	beq.n	8000ff2 <ai_platform_network_init+0x32>
 8001022:	2400      	movs	r4, #0
 8001024:	f240 4552 	movw	r5, #1106	; 0x452
 8001028:	42ab      	cmp	r3, r5
 800102a:	d1e2      	bne.n	8000ff2 <ai_platform_network_init+0x32>
 800102c:	2301      	movs	r3, #1
 800102e:	e7e1      	b.n	8000ff4 <ai_platform_network_init+0x34>
 8001030:	4964      	ldr	r1, [pc, #400]	; (80011c4 <.text_37>)
 8001032:	680b      	ldr	r3, [r1, #0]
 8001034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001038:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800103c:	d10c      	bne.n	8001058 <ai_platform_network_init+0x98>
 800103e:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <.text_38>)
 8001040:	2401      	movs	r4, #1
 8001042:	609c      	str	r4, [r3, #8]
 8001044:	6899      	ldr	r1, [r3, #8]
 8001046:	2900      	cmp	r1, #0
 8001048:	d1fc      	bne.n	8001044 <ai_platform_network_init+0x84>
 800104a:	4c5d      	ldr	r4, [pc, #372]	; (80011c0 <.text_36>)
 800104c:	4d56      	ldr	r5, [pc, #344]	; (80011a8 <.text_30>)
 800104e:	601c      	str	r4, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	42ab      	cmp	r3, r5
 8001054:	d000      	beq.n	8001058 <ai_platform_network_init+0x98>
 8001056:	e7fe      	b.n	8001056 <ai_platform_network_init+0x96>
 8001058:	2800      	cmp	r0, #0
 800105a:	d034      	beq.n	80010c6 <ai_platform_network_init+0x106>
 800105c:	b90a      	cbnz	r2, 8001062 <ai_platform_network_init+0xa2>
 800105e:	2211      	movs	r2, #17
 8001060:	e012      	b.n	8001088 <ai_platform_network_init+0xc8>
 8001062:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001064:	6913      	ldr	r3, [r2, #16]
 8001066:	b939      	cbnz	r1, 8001078 <ai_platform_network_init+0xb8>
 8001068:	8b94      	ldrh	r4, [r2, #28]
 800106a:	8b55      	ldrh	r5, [r2, #26]
 800106c:	6a11      	ldr	r1, [r2, #32]
 800106e:	436c      	muls	r4, r5
 8001070:	434c      	muls	r4, r1
 8001072:	bf18      	it	ne
 8001074:	2213      	movne	r2, #19
 8001076:	d107      	bne.n	8001088 <ai_platform_network_init+0xc8>
 8001078:	b973      	cbnz	r3, 8001098 <ai_platform_network_init+0xd8>
 800107a:	8911      	ldrh	r1, [r2, #8]
 800107c:	88d4      	ldrh	r4, [r2, #6]
 800107e:	68d3      	ldr	r3, [r2, #12]
 8001080:	4361      	muls	r1, r4
 8001082:	4359      	muls	r1, r3
 8001084:	d008      	beq.n	8001098 <ai_platform_network_init+0xd8>
 8001086:	2212      	movs	r2, #18
 8001088:	2110      	movs	r1, #16
 800108a:	300c      	adds	r0, #12
 800108c:	f000 f8b9 	bl	8001202 <core_set_error>
 8001090:	2000      	movs	r0, #0
 8001092:	b001      	add	sp, #4
 8001094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001098:	f100 0114 	add.w	r1, r0, #20
 800109c:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 80010a0:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 80010a2:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 80010a6:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 80010aa:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 80010ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80010b0:	2103      	movs	r1, #3
 80010b2:	6081      	str	r1, [r0, #8]
 80010b4:	b13a      	cbz	r2, 80010c6 <ai_platform_network_init+0x106>
 80010b6:	6891      	ldr	r1, [r2, #8]
 80010b8:	6050      	str	r0, [r2, #4]
 80010ba:	428a      	cmp	r2, r1
 80010bc:	bf18      	it	ne
 80010be:	2900      	cmpne	r1, #0
 80010c0:	bf18      	it	ne
 80010c2:	460a      	movne	r2, r1
 80010c4:	d1f7      	bne.n	80010b6 <ai_platform_network_init+0xf6>
 80010c6:	b001      	add	sp, #4
 80010c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010cc <.text_27>:
 80010cc:	00000000 	.word	0x00000000

080010d0 <.text_28>:
 80010d0:	b5e8b5cd 	.word	0xb5e8b5cd

080010d4 <ai_platform_network_process>:
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	0004      	movs	r4, r0
 80010d8:	b081      	sub	sp, #4
 80010da:	d003      	beq.n	80010e4 <ai_platform_network_process+0x10>
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <.text_31>)
 80010e0:	4298      	cmp	r0, r3
 80010e2:	d000      	beq.n	80010e6 <ai_platform_network_process+0x12>
 80010e4:	2400      	movs	r4, #0
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <.text_33>)
 80010e8:	f240 4649 	movw	r6, #1097	; 0x449
 80010ec:	6805      	ldr	r5, [r0, #0]
 80010ee:	086d      	lsrs	r5, r5, #1
 80010f0:	006d      	lsls	r5, r5, #1
 80010f2:	6005      	str	r5, [r0, #0]
 80010f4:	4830      	ldr	r0, [pc, #192]	; (80011b8 <.text_34>)
 80010f6:	6803      	ldr	r3, [r0, #0]
 80010f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fc:	42b3      	cmp	r3, r6
 80010fe:	d112      	bne.n	8001126 <ai_platform_network_process+0x52>
 8001100:	2001      	movs	r0, #1
 8001102:	2500      	movs	r5, #0
 8001104:	2300      	movs	r3, #0
 8001106:	4328      	orrs	r0, r5
 8001108:	4318      	orrs	r0, r3
 800110a:	d01a      	beq.n	8001142 <ai_platform_network_process+0x6e>
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <.text_35>)
 800110e:	2501      	movs	r5, #1
 8001110:	609d      	str	r5, [r3, #8]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	2800      	cmp	r0, #0
 8001116:	d1fc      	bne.n	8001112 <ai_platform_network_process+0x3e>
 8001118:	4d29      	ldr	r5, [pc, #164]	; (80011c0 <.text_36>)
 800111a:	4e23      	ldr	r6, [pc, #140]	; (80011a8 <.text_30>)
 800111c:	601d      	str	r5, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	42b3      	cmp	r3, r6
 8001122:	d022      	beq.n	800116a <ai_platform_network_process+0x96>
 8001124:	e7fe      	b.n	8001124 <ai_platform_network_process+0x50>
 8001126:	2000      	movs	r0, #0
 8001128:	f240 4751 	movw	r7, #1105	; 0x451
 800112c:	42bb      	cmp	r3, r7
 800112e:	bf08      	it	eq
 8001130:	2501      	moveq	r5, #1
 8001132:	d0e7      	beq.n	8001104 <ai_platform_network_process+0x30>
 8001134:	2500      	movs	r5, #0
 8001136:	f240 4652 	movw	r6, #1106	; 0x452
 800113a:	42b3      	cmp	r3, r6
 800113c:	d1e2      	bne.n	8001104 <ai_platform_network_process+0x30>
 800113e:	2301      	movs	r3, #1
 8001140:	e7e1      	b.n	8001106 <ai_platform_network_process+0x32>
 8001142:	4820      	ldr	r0, [pc, #128]	; (80011c4 <.text_37>)
 8001144:	6803      	ldr	r3, [r0, #0]
 8001146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800114e:	d10c      	bne.n	800116a <ai_platform_network_process+0x96>
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <.text_38>)
 8001152:	2501      	movs	r5, #1
 8001154:	609d      	str	r5, [r3, #8]
 8001156:	6898      	ldr	r0, [r3, #8]
 8001158:	2800      	cmp	r0, #0
 800115a:	d1fc      	bne.n	8001156 <ai_platform_network_process+0x82>
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <.text_36>)
 800115e:	4e12      	ldr	r6, [pc, #72]	; (80011a8 <.text_30>)
 8001160:	601d      	str	r5, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	42b3      	cmp	r3, r6
 8001166:	d000      	beq.n	800116a <ai_platform_network_process+0x96>
 8001168:	e7fe      	b.n	8001168 <ai_platform_network_process+0x94>
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff faf9 	bl	8000762 <_platform_network_io_bind>
 8001170:	b1b8      	cbz	r0, 80011a2 <ai_platform_network_process+0xce>
 8001172:	8a60      	ldrh	r0, [r4, #18]
 8001174:	8a21      	ldrh	r1, [r4, #16]
 8001176:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001178:	4288      	cmp	r0, r1
 800117a:	f105 060c 	add.w	r6, r5, #12
 800117e:	d20f      	bcs.n	80011a0 <ai_platform_network_process+0xcc>
 8001180:	4628      	mov	r0, r5
 8001182:	f7ff fa79 	bl	8000678 <_platform_network_state_update_input>
 8001186:	4620      	mov	r0, r4
 8001188:	f000 fef6 	bl	8001f78 <ai_layers_forward_all>
 800118c:	4630      	mov	r0, r6
 800118e:	f7ff faa8 	bl	80006e2 <_platform_network_state_update_output>
 8001192:	8a60      	ldrh	r0, [r4, #18]
 8001194:	8a21      	ldrh	r1, [r4, #16]
 8001196:	1c40      	adds	r0, r0, #1
 8001198:	8260      	strh	r0, [r4, #18]
 800119a:	b280      	uxth	r0, r0
 800119c:	4288      	cmp	r0, r1
 800119e:	d3ef      	bcc.n	8001180 <ai_platform_network_process+0xac>
 80011a0:	8a60      	ldrh	r0, [r4, #18]
 80011a2:	b001      	add	sp, #4
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080011a8 <.text_30>:
 80011a8:	b5e8b5cd 	.word	0xb5e8b5cd

080011ac <.text_31>:
 80011ac:	a1c00100 	.word	0xa1c00100

080011b0 <.text_32>:
 80011b0:	01030001 	.word	0x01030001

080011b4 <.text_33>:
 80011b4:	e0002000 	.word	0xe0002000

080011b8 <.text_34>:
 80011b8:	e0042000 	.word	0xe0042000

080011bc <.text_35>:
 80011bc:	40023000 	.word	0x40023000

080011c0 <.text_36>:
 80011c0:	f407a5c2 	.word	0xf407a5c2

080011c4 <.text_37>:
 80011c4:	5c001000 	.word	0x5c001000

080011c8 <.text_38>:
 80011c8:	58024c00 	.word	0x58024c00

080011cc <.text_39>:
 80011cc:	00000004 	.word	0x00000004

080011d0 <.text_40>:
 80011d0:	00000101 	.word	0x00000101

080011d4 <.text_41>:
 80011d4:	00000301 	.word	0x00000301

080011d8 <.text_42>:
 80011d8:	00001030 	.word	0x00001030

080011dc <.text_43>:
 80011dc:	00001001 	.word	0x00001001

080011e0 <_platform_network_sanity_check{5}::signatures>:
 80011e0:	84048403                                ....

080011e4 <.text_45>:
 80011e4:	00001002 	.word	0x00001002

080011e8 <.text_46>:
 80011e8:	00001010 	.word	0x00001010

080011ec <.text_47>:
 80011ec:	00000000 	.word	0x00000000

080011f0 <.text_48>:
 80011f0:	00001010 	.word	0x00001010

080011f4 <core_init>:
 80011f4:	2001      	movs	r0, #1
 80011f6:	4770      	bx	lr

080011f8 <core_get_error>:
 80011f8:	4601      	mov	r1, r0
 80011fa:	2200      	movs	r2, #0
 80011fc:	6808      	ldr	r0, [r1, #0]
 80011fe:	600a      	str	r2, [r1, #0]
 8001200:	4770      	bx	lr

08001202 <core_set_error>:
 8001202:	7803      	ldrb	r3, [r0, #0]
 8001204:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8001208:	d104      	bne.n	8001214 <core_set_error+0x12>
 800120a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800120e:	6001      	str	r1, [r0, #0]
 8001210:	2001      	movs	r0, #1
 8001212:	4770      	bx	lr
 8001214:	2000      	movs	r0, #0
 8001216:	4770      	bx	lr

08001218 <core_mem_alloc>:
 8001218:	2800      	cmp	r0, #0
 800121a:	d100      	bne.n	800121e <core_mem_alloc+0x6>
 800121c:	4770      	bx	lr
 800121e:	b500      	push	{lr}
 8001220:	b081      	sub	sp, #4
 8001222:	1d00      	adds	r0, r0, #4
 8001224:	f00e f9c2 	bl	800f5ac <malloc>
 8001228:	b108      	cbz	r0, 800122e <core_mem_alloc+0x16>
 800122a:	6000      	str	r0, [r0, #0]
 800122c:	1d00      	adds	r0, r0, #4
 800122e:	b001      	add	sp, #4
 8001230:	bd00      	pop	{pc}

08001232 <core_mem_free>:
 8001232:	2800      	cmp	r0, #0
 8001234:	d100      	bne.n	8001238 <core_mem_free+0x6>
 8001236:	4770      	bx	lr
 8001238:	b500      	push	{lr}
 800123a:	b081      	sub	sp, #4
 800123c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001240:	1f01      	subs	r1, r0, #4
 8001242:	428a      	cmp	r2, r1
 8001244:	d106      	bne.n	8001254 <core_mem_free+0x22>
 8001246:	b129      	cbz	r1, 8001254 <core_mem_free+0x22>
 8001248:	2000      	movs	r0, #0
 800124a:	6008      	str	r0, [r1, #0]
 800124c:	4608      	mov	r0, r1
 800124e:	f00e f9b5 	bl	800f5bc <free>
 8001252:	2000      	movs	r0, #0
 8001254:	b001      	add	sp, #4
 8001256:	bd00      	pop	{pc}

08001258 <core_mem_realloc>:
 8001258:	b500      	push	{lr}
 800125a:	b081      	sub	sp, #4
 800125c:	b920      	cbnz	r0, 8001268 <core_mem_realloc+0x10>
 800125e:	b1c1      	cbz	r1, 8001292 <core_mem_realloc+0x3a>
 8001260:	1d08      	adds	r0, r1, #4
 8001262:	f00e f9a3 	bl	800f5ac <malloc>
 8001266:	e00e      	b.n	8001286 <core_mem_realloc+0x2e>
 8001268:	b919      	cbnz	r1, 8001272 <core_mem_realloc+0x1a>
 800126a:	b001      	add	sp, #4
 800126c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001270:	e7df      	b.n	8001232 <core_mem_free>
 8001272:	1f02      	subs	r2, r0, #4
 8001274:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8001278:	4290      	cmp	r0, r2
 800127a:	d109      	bne.n	8001290 <core_mem_realloc+0x38>
 800127c:	b142      	cbz	r2, 8001290 <core_mem_realloc+0x38>
 800127e:	1d09      	adds	r1, r1, #4
 8001280:	4610      	mov	r0, r2
 8001282:	f00e ff25 	bl	80100d0 <realloc>
 8001286:	b120      	cbz	r0, 8001292 <core_mem_realloc+0x3a>
 8001288:	6000      	str	r0, [r0, #0]
 800128a:	1d00      	adds	r0, r0, #4
 800128c:	b001      	add	sp, #4
 800128e:	bd00      	pop	{pc}
 8001290:	2000      	movs	r0, #0
 8001292:	b001      	add	sp, #4
 8001294:	bd00      	pop	{pc}
	...

08001298 <core_inspect_tensor_list_>:
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	0004      	movs	r4, r0
 800129c:	460d      	mov	r5, r1
 800129e:	b081      	sub	sp, #4
 80012a0:	bf14      	ite	ne
 80012a2:	2d00      	cmpne	r5, #0
 80012a4:	2000      	moveq	r0, #0
 80012a6:	d021      	beq.n	80012ec <core_inspect_tensor_list_+0x54>
 80012a8:	2000      	movs	r0, #0
 80012aa:	2600      	movs	r6, #0
 80012ac:	6028      	str	r0, [r5, #0]
 80012ae:	2704      	movs	r7, #4
 80012b0:	60a8      	str	r0, [r5, #8]
 80012b2:	60e8      	str	r0, [r5, #12]
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	8920      	ldrh	r0, [r4, #8]
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	b1b0      	cbz	r0, 80012ea <core_inspect_tensor_list_+0x52>
 80012bc:	6808      	ldr	r0, [r1, #0]
 80012be:	b150      	cbz	r0, 80012d6 <core_inspect_tensor_list_+0x3e>
 80012c0:	6802      	ldr	r2, [r0, #0]
 80012c2:	0053      	lsls	r3, r2, #1
 80012c4:	bf4f      	iteee	mi
 80012c6:	2000      	movmi	r0, #0
 80012c8:	6841      	ldrpl	r1, [r0, #4]
 80012ca:	4610      	movpl	r0, r2
 80012cc:	f004 fb4c 	blpl	8005968 <ai_array_get_byte_size>
 80012d0:	68aa      	ldr	r2, [r5, #8]
 80012d2:	1880      	adds	r0, r0, r2
 80012d4:	60a8      	str	r0, [r5, #8]
 80012d6:	6828      	ldr	r0, [r5, #0]
 80012d8:	1c76      	adds	r6, r6, #1
 80012da:	1c40      	adds	r0, r0, #1
 80012dc:	6028      	str	r0, [r5, #0]
 80012de:	6821      	ldr	r1, [r4, #0]
 80012e0:	8920      	ldrh	r0, [r4, #8]
 80012e2:	59c9      	ldr	r1, [r1, r7]
 80012e4:	1d3f      	adds	r7, r7, #4
 80012e6:	4286      	cmp	r6, r0
 80012e8:	d3e8      	bcc.n	80012bc <core_inspect_tensor_list_+0x24>
 80012ea:	6828      	ldr	r0, [r5, #0]
 80012ec:	b001      	add	sp, #4
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f0 <core_inspect_net_activations_>:
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	b083      	sub	sp, #12
 80012f6:	f20f 31dd 	addw	r1, pc, #989	; 0x3dd
 80012fa:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80012fc:	f041 0101 	orr.w	r1, r1, #1
 8001300:	9100      	str	r1, [sp, #0]
 8001302:	2600      	movs	r6, #0
 8001304:	9900      	ldr	r1, [sp, #0]
 8001306:	46b2      	mov	sl, r6
 8001308:	636e      	str	r6, [r5, #52]	; 0x34
 800130a:	46b0      	mov	r8, r6
 800130c:	63ae      	str	r6, [r5, #56]	; 0x38
 800130e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001310:	46b1      	mov	r9, r6
 8001312:	2800      	cmp	r0, #0
 8001314:	d04f      	beq.n	80013b6 <core_inspect_net_activations_+0xc6>
 8001316:	9101      	str	r1, [sp, #4]
 8001318:	e03f      	b.n	800139a <core_inspect_net_activations_+0xaa>
 800131a:	6938      	ldr	r0, [r7, #16]
 800131c:	6020      	str	r0, [r4, #0]
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	f041 0101 	orr.w	r1, r1, #1
 8001324:	6061      	str	r1, [r4, #4]
 8001326:	9800      	ldr	r0, [sp, #0]
 8001328:	f104 010c 	add.w	r1, r4, #12
 800132c:	f040 0001 	orr.w	r0, r0, #1
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	6810      	ldr	r0, [r2, #0]
 8001336:	f7ff ffaf 	bl	8001298 <core_inspect_tensor_list_>
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4683      	mov	fp, r0
 800133e:	f104 011c 	add.w	r1, r4, #28
 8001342:	6810      	ldr	r0, [r2, #0]
 8001344:	300c      	adds	r0, #12
 8001346:	f7ff ffa7 	bl	8001298 <core_inspect_tensor_list_>
 800134a:	4583      	cmp	fp, r0
 800134c:	bf38      	it	cc
 800134e:	4683      	movcc	fp, r0
 8001350:	68e0      	ldr	r0, [r4, #12]
 8001352:	f8c4 8010 	str.w	r8, [r4, #16]
 8001356:	69e1      	ldr	r1, [r4, #28]
 8001358:	f8c4 9020 	str.w	r9, [r4, #32]
 800135c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800135e:	45d3      	cmp	fp, sl
 8001360:	4480      	add	r8, r0
 8001362:	61a2      	str	r2, [r4, #24]
 8001364:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001366:	4489      	add	r9, r1
 8001368:	62a0      	str	r0, [r4, #40]	; 0x28
 800136a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800136c:	6962      	ldr	r2, [r4, #20]
 800136e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001370:	bf28      	it	cs
 8001372:	46da      	movcs	sl, fp
 8001374:	1851      	adds	r1, r2, r1
 8001376:	6369      	str	r1, [r5, #52]	; 0x34
 8001378:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800137a:	1808      	adds	r0, r1, r0
 800137c:	63a8      	str	r0, [r5, #56]	; 0x38
 800137e:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001382:	f000 fd63 	bl	8001e4c <ai_layer_type_name>
 8001386:	4601      	mov	r1, r0
 8001388:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800138c:	f004 fcc4 	bl	8005d18 <core_timer_init>
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	4287      	cmp	r7, r0
 8001394:	bf18      	it	ne
 8001396:	2800      	cmpne	r0, #0
 8001398:	d00d      	beq.n	80013b6 <core_inspect_net_activations_+0xc6>
 800139a:	4607      	mov	r7, r0
 800139c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800139e:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 80013a2:	1c76      	adds	r6, r6, #1
 80013a4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80013a8:	9a01      	ldr	r2, [sp, #4]
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	60a2      	str	r2, [r4, #8]
 80013ae:	d1b4      	bne.n	800131a <core_inspect_net_activations_+0x2a>
 80013b0:	f04f 0b00 	mov.w	fp, #0
 80013b4:	e7cc      	b.n	8001350 <core_inspect_net_activations_+0x60>
 80013b6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80013b8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80013ba:	1cc0      	adds	r0, r0, #3
 80013bc:	0880      	lsrs	r0, r0, #2
 80013be:	0080      	lsls	r0, r0, #2
 80013c0:	f8c5 a03c 	str.w	sl, [r5, #60]	; 0x3c
 80013c4:	1cc9      	adds	r1, r1, #3
 80013c6:	0889      	lsrs	r1, r1, #2
 80013c8:	0089      	lsls	r1, r1, #2
 80013ca:	6368      	str	r0, [r5, #52]	; 0x34
 80013cc:	63a9      	str	r1, [r5, #56]	; 0x38
 80013ce:	b003      	add	sp, #12
 80013d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080013d4 <core_inspect_snapshot_init_report_node_>:
 80013d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d8:	ebc2 08c2 	rsb	r8, r2, r2, lsl #3
 80013dc:	b085      	sub	sp, #20
 80013de:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80013e2:	4603      	mov	r3, r0
 80013e4:	6a18      	ldr	r0, [r3, #32]
 80013e6:	9001      	str	r0, [sp, #4]
 80013e8:	694c      	ldr	r4, [r1, #20]
 80013ea:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80013ee:	f8d4 e000 	ldr.w	lr, [r4]
 80013f2:	f10e 000c 	add.w	r0, lr, #12
 80013f6:	9002      	str	r0, [sp, #8]
 80013f8:	689c      	ldr	r4, [r3, #8]
 80013fa:	9801      	ldr	r0, [sp, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	6945      	ldr	r5, [r0, #20]
 8001400:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
 8001404:	09e4      	lsrs	r4, r4, #7
 8001406:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	880d      	ldrh	r5, [r1, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	f004 0401 	and.w	r4, r4, #1
 8001414:	8005      	strh	r5, [r0, #0]
 8001416:	8849      	ldrh	r1, [r1, #2]
 8001418:	6082      	str	r2, [r0, #8]
 800141a:	8041      	strh	r1, [r0, #2]
 800141c:	9b00      	ldr	r3, [sp, #0]
 800141e:	68d9      	ldr	r1, [r3, #12]
 8001420:	8181      	strh	r1, [r0, #12]
 8001422:	9a00      	ldr	r2, [sp, #0]
 8001424:	69d3      	ldr	r3, [r2, #28]
 8001426:	81c3      	strh	r3, [r0, #14]
 8001428:	b92c      	cbnz	r4, 8001436 <core_inspect_snapshot_init_report_node_+0x62>
 800142a:	2100      	movs	r1, #0
 800142c:	6141      	str	r1, [r0, #20]
 800142e:	6101      	str	r1, [r0, #16]
 8001430:	b005      	add	sp, #20
 8001432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001436:	9901      	ldr	r1, [sp, #4]
 8001438:	9b00      	ldr	r3, [sp, #0]
 800143a:	2600      	movs	r6, #0
 800143c:	f04f 0a04 	mov.w	sl, #4
 8001440:	46b1      	mov	r9, r6
 8001442:	6a0a      	ldr	r2, [r1, #32]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800144a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800144e:	6104      	str	r4, [r0, #16]
 8001450:	9a01      	ldr	r2, [sp, #4]
 8001452:	9b00      	ldr	r3, [sp, #0]
 8001454:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800145c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8001460:	6144      	str	r4, [r0, #20]
 8001462:	9901      	ldr	r1, [sp, #4]
 8001464:	9b00      	ldr	r3, [sp, #0]
 8001466:	f8de 5000 	ldr.w	r5, [lr]
 800146a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800146c:	6999      	ldr	r1, [r3, #24]
 800146e:	682d      	ldr	r5, [r5, #0]
 8001470:	fb01 f10b 	mul.w	r1, r1, fp
 8001474:	1854      	adds	r4, r2, r1
 8001476:	f8be 1008 	ldrh.w	r1, [lr, #8]
 800147a:	b349      	cbz	r1, 80014d0 <core_inspect_snapshot_init_report_node_+0xfc>
 800147c:	f8cd e00c 	str.w	lr, [sp, #12]
 8001480:	4680      	mov	r8, r0
 8001482:	682a      	ldr	r2, [r5, #0]
 8001484:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8001488:	1c76      	adds	r6, r6, #1
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	eb01 0709 	add.w	r7, r1, r9
 8001490:	f109 0914 	add.w	r9, r9, #20
 8001494:	f004 f990 	bl	80057b8 <ai_array_to_buffer_fmt>
 8001498:	6038      	str	r0, [r7, #0]
 800149a:	f8a7 b004 	strh.w	fp, [r7, #4]
 800149e:	6929      	ldr	r1, [r5, #16]
 80014a0:	80f9      	strh	r1, [r7, #6]
 80014a2:	68e8      	ldr	r0, [r5, #12]
 80014a4:	8138      	strh	r0, [r7, #8]
 80014a6:	68a9      	ldr	r1, [r5, #8]
 80014a8:	60f9      	str	r1, [r7, #12]
 80014aa:	613c      	str	r4, [r7, #16]
 80014ac:	6828      	ldr	r0, [r5, #0]
 80014ae:	6841      	ldr	r1, [r0, #4]
 80014b0:	6800      	ldr	r0, [r0, #0]
 80014b2:	f004 fa59 	bl	8005968 <ai_array_get_byte_size>
 80014b6:	fb00 f00b 	mul.w	r0, r0, fp
 80014ba:	4404      	add	r4, r0
 80014bc:	9803      	ldr	r0, [sp, #12]
 80014be:	6801      	ldr	r1, [r0, #0]
 80014c0:	f851 500a 	ldr.w	r5, [r1, sl]
 80014c4:	8901      	ldrh	r1, [r0, #8]
 80014c6:	f10a 0a04 	add.w	sl, sl, #4
 80014ca:	428e      	cmp	r6, r1
 80014cc:	d3d9      	bcc.n	8001482 <core_inspect_snapshot_init_report_node_+0xae>
 80014ce:	4640      	mov	r0, r8
 80014d0:	9a01      	ldr	r2, [sp, #4]
 80014d2:	9900      	ldr	r1, [sp, #0]
 80014d4:	f04f 0a04 	mov.w	sl, #4
 80014d8:	f04f 0900 	mov.w	r9, #0
 80014dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80014e0:	fb02 f20b 	mul.w	r2, r2, fp
 80014e4:	189d      	adds	r5, r3, r2
 80014e6:	9b02      	ldr	r3, [sp, #8]
 80014e8:	681c      	ldr	r4, [r3, #0]
 80014ea:	891a      	ldrh	r2, [r3, #8]
 80014ec:	6826      	ldr	r6, [r4, #0]
 80014ee:	b34a      	cbz	r2, 8001544 <core_inspect_snapshot_init_report_node_+0x170>
 80014f0:	46d8      	mov	r8, fp
 80014f2:	461c      	mov	r4, r3
 80014f4:	9000      	str	r0, [sp, #0]
 80014f6:	46cb      	mov	fp, r9
 80014f8:	9800      	ldr	r0, [sp, #0]
 80014fa:	6832      	ldr	r2, [r6, #0]
 80014fc:	f10b 0b01 	add.w	fp, fp, #1
 8001500:	6941      	ldr	r1, [r0, #20]
 8001502:	6810      	ldr	r0, [r2, #0]
 8001504:	eb01 0709 	add.w	r7, r1, r9
 8001508:	f109 0914 	add.w	r9, r9, #20
 800150c:	f004 f954 	bl	80057b8 <ai_array_to_buffer_fmt>
 8001510:	6038      	str	r0, [r7, #0]
 8001512:	f8a7 8004 	strh.w	r8, [r7, #4]
 8001516:	6930      	ldr	r0, [r6, #16]
 8001518:	80f8      	strh	r0, [r7, #6]
 800151a:	68f1      	ldr	r1, [r6, #12]
 800151c:	8139      	strh	r1, [r7, #8]
 800151e:	68b0      	ldr	r0, [r6, #8]
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	613d      	str	r5, [r7, #16]
 8001524:	6830      	ldr	r0, [r6, #0]
 8001526:	6841      	ldr	r1, [r0, #4]
 8001528:	6800      	ldr	r0, [r0, #0]
 800152a:	f004 fa1d 	bl	8005968 <ai_array_get_byte_size>
 800152e:	fb00 f008 	mul.w	r0, r0, r8
 8001532:	8921      	ldrh	r1, [r4, #8]
 8001534:	4405      	add	r5, r0
 8001536:	6820      	ldr	r0, [r4, #0]
 8001538:	458b      	cmp	fp, r1
 800153a:	f850 600a 	ldr.w	r6, [r0, sl]
 800153e:	f10a 0a04 	add.w	sl, sl, #4
 8001542:	d3d9      	bcc.n	80014f8 <core_inspect_snapshot_init_report_node_+0x124>
 8001544:	b005      	add	sp, #20
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800154c <core_inspect_snapshot_push_>:
 800154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001550:	b083      	sub	sp, #12
 8001552:	4606      	mov	r6, r0
 8001554:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8001558:	69b0      	ldr	r0, [r6, #24]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2500      	movs	r5, #0
 8001560:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8001562:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 8001566:	f00a 0a01 	and.w	sl, sl, #1
 800156a:	b378      	cbz	r0, 80015cc <core_inspect_snapshot_push_+0x80>
 800156c:	fa1f fc85 	uxth.w	ip, r5
 8001570:	1c6d      	adds	r5, r5, #1
 8001572:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 8001576:	b2af      	uxth	r7, r5
 8001578:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 800157c:	4287      	cmp	r7, r0
 800157e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8001582:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8001586:	4443      	add	r3, r8
 8001588:	444a      	add	r2, r9
 800158a:	d21f      	bcs.n	80015cc <core_inspect_snapshot_push_+0x80>
 800158c:	fa1f fc85 	uxth.w	ip, r5
 8001590:	1c6d      	adds	r5, r5, #1
 8001592:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 8001596:	b2af      	uxth	r7, r5
 8001598:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 800159c:	4287      	cmp	r7, r0
 800159e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80015a2:	f8dc 901c 	ldr.w	r9, [ip, #28]
 80015a6:	4443      	add	r3, r8
 80015a8:	444a      	add	r2, r9
 80015aa:	d20f      	bcs.n	80015cc <core_inspect_snapshot_push_+0x80>
 80015ac:	fa1f fc85 	uxth.w	ip, r5
 80015b0:	1c6d      	adds	r5, r5, #1
 80015b2:	ebcc 0ecc 	rsb	lr, ip, ip, lsl #3
 80015b6:	b2af      	uxth	r7, r5
 80015b8:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 80015bc:	4287      	cmp	r7, r0
 80015be:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80015c2:	f8dc 901c 	ldr.w	r9, [ip, #28]
 80015c6:	4443      	add	r3, r8
 80015c8:	444a      	add	r2, r9
 80015ca:	d3cf      	bcc.n	800156c <core_inspect_snapshot_push_+0x20>
 80015cc:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80015d0:	460d      	mov	r5, r1
 80015d2:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 80015d6:	00a3      	lsls	r3, r4, #2
 80015d8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80015e6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80015e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80015ec:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80015f0:	9801      	ldr	r0, [sp, #4]
 80015f2:	eb08 0981 	add.w	r9, r8, r1, lsl #2
 80015f6:	fb07 0705 	mla	r7, r7, r5, r0
 80015fa:	1cff      	adds	r7, r7, #3
 80015fc:	08bf      	lsrs	r7, r7, #2
 80015fe:	00bf      	lsls	r7, r7, #2
 8001600:	f109 0937 	add.w	r9, r9, #55	; 0x37
 8001604:	ea5f 010a 	movs.w	r1, sl
 8001608:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800160c:	d00a      	beq.n	8001624 <core_inspect_snapshot_push_+0xd8>
 800160e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001610:	9800      	ldr	r0, [sp, #0]
 8001612:	eb07 0b89 	add.w	fp, r7, r9, lsl #2
 8001616:	fb02 0205 	mla	r2, r2, r5, r0
 800161a:	1cd2      	adds	r2, r2, #3
 800161c:	0892      	lsrs	r2, r2, #2
 800161e:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8001622:	e001      	b.n	8001628 <core_inspect_snapshot_push_+0xdc>
 8001624:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001628:	6a34      	ldr	r4, [r6, #32]
 800162a:	b154      	cbz	r4, 8001642 <core_inspect_snapshot_push_+0xf6>
 800162c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800162e:	b112      	cbz	r2, 8001636 <core_inspect_snapshot_push_+0xea>
 8001630:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001632:	4621      	mov	r1, r4
 8001634:	4790      	blx	r2
 8001636:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001638:	4559      	cmp	r1, fp
 800163a:	d20b      	bcs.n	8001654 <core_inspect_snapshot_push_+0x108>
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fdf8 	bl	8001232 <core_mem_free>
 8001642:	4658      	mov	r0, fp
 8001644:	f7ff fde8 	bl	8001218 <core_mem_alloc>
 8001648:	0004      	movs	r4, r0
 800164a:	bf08      	it	eq
 800164c:	2000      	moveq	r0, #0
 800164e:	d03d      	beq.n	80016cc <core_inspect_snapshot_push_+0x180>
 8001650:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 8001654:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001658:	f1ba 0f00 	cmp.w	sl, #0
 800165c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001660:	4441      	add	r1, r8
 8001662:	61a0      	str	r0, [r4, #24]
 8001664:	61e1      	str	r1, [r4, #28]
 8001666:	d007      	beq.n	8001678 <core_inspect_snapshot_push_+0x12c>
 8001668:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 800166c:	9a01      	ldr	r2, [sp, #4]
 800166e:	9b00      	ldr	r3, [sp, #0]
 8001670:	19c1      	adds	r1, r0, r7
 8001672:	4402      	add	r2, r0
 8001674:	440b      	add	r3, r1
 8001676:	e003      	b.n	8001680 <core_inspect_snapshot_push_+0x134>
 8001678:	2100      	movs	r1, #0
 800167a:	2000      	movs	r0, #0
 800167c:	2300      	movs	r3, #0
 800167e:	2200      	movs	r2, #0
 8001680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001682:	62a2      	str	r2, [r4, #40]	; 0x28
 8001684:	6261      	str	r1, [r4, #36]	; 0x24
 8001686:	f8df 1500 	ldr.w	r1, [pc, #1280]	; 8001b88 <.text_12>
 800168a:	6220      	str	r0, [r4, #32]
 800168c:	6930      	ldr	r0, [r6, #16]
 800168e:	6234      	str	r4, [r6, #32]
 8001690:	61f5      	str	r5, [r6, #28]
 8001692:	680a      	ldr	r2, [r1, #0]
 8001694:	6022      	str	r2, [r4, #0]
 8001696:	2500      	movs	r5, #0
 8001698:	1c52      	adds	r2, r2, #1
 800169a:	600a      	str	r2, [r1, #0]
 800169c:	69a3      	ldr	r3, [r4, #24]
 800169e:	6065      	str	r5, [r4, #4]
 80016a0:	68f2      	ldr	r2, [r6, #12]
 80016a2:	60a2      	str	r2, [r4, #8]
 80016a4:	69b1      	ldr	r1, [r6, #24]
 80016a6:	60e1      	str	r1, [r4, #12]
 80016a8:	6125      	str	r5, [r4, #16]
 80016aa:	6163      	str	r3, [r4, #20]
 80016ac:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80016ae:	b164      	cbz	r4, 80016ca <core_inspect_snapshot_push_+0x17e>
 80016b0:	462a      	mov	r2, r5
 80016b2:	4621      	mov	r1, r4
 80016b4:	4630      	mov	r0, r6
 80016b6:	1c6d      	adds	r5, r5, #1
 80016b8:	f7ff fe8c 	bl	80013d4 <core_inspect_snapshot_init_report_node_>
 80016bc:	68a0      	ldr	r0, [r4, #8]
 80016be:	4284      	cmp	r4, r0
 80016c0:	bf18      	it	ne
 80016c2:	2800      	cmpne	r0, #0
 80016c4:	bf18      	it	ne
 80016c6:	4604      	movne	r4, r0
 80016c8:	d1f2      	bne.n	80016b0 <core_inspect_snapshot_push_+0x164>
 80016ca:	2001      	movs	r0, #1
 80016cc:	b003      	add	sp, #12
 80016ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016d4 <core_inspect_forward_validate_>:
 80016d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d8:	b08c      	sub	sp, #48	; 0x30
 80016da:	6841      	ldr	r1, [r0, #4]
 80016dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016de:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80016e0:	68a0      	ldr	r0, [r4, #8]
 80016e2:	09c0      	lsrs	r0, r0, #7
 80016e4:	f000 0001 	and.w	r0, r0, #1
 80016e8:	f88d 0000 	strb.w	r0, [sp]
 80016ec:	6953      	ldr	r3, [r2, #20]
 80016ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	f105 060c 	add.w	r6, r5, #12
 80016f6:	9603      	str	r6, [sp, #12]
 80016f8:	8a4a      	ldrh	r2, [r1, #18]
 80016fa:	9204      	str	r2, [sp, #16]
 80016fc:	8a0e      	ldrh	r6, [r1, #16]
 80016fe:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001700:	4288      	cmp	r0, r1
 8001702:	bf01      	itttt	eq
 8001704:	2200      	moveq	r2, #0
 8001706:	6162      	streq	r2, [r4, #20]
 8001708:	69e0      	ldreq	r0, [r4, #28]
 800170a:	2800      	cmpeq	r0, #0
 800170c:	d103      	bne.n	8001716 <core_inspect_forward_validate_+0x42>
 800170e:	4631      	mov	r1, r6
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff ff1b 	bl	800154c <core_inspect_snapshot_push_>
 8001716:	6a20      	ldr	r0, [r4, #32]
 8001718:	6961      	ldr	r1, [r4, #20]
 800171a:	6942      	ldr	r2, [r0, #20]
 800171c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	69c7      	ldr	r7, [r0, #28]
 8001728:	9705      	str	r7, [sp, #20]
 800172a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800172c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001730:	9804      	ldr	r0, [sp, #16]
 8001732:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001736:	9101      	str	r1, [sp, #4]
 8001738:	9902      	ldr	r1, [sp, #8]
 800173a:	1c40      	adds	r0, r0, #1
 800173c:	8088      	strh	r0, [r1, #4]
 800173e:	9802      	ldr	r0, [sp, #8]
 8001740:	80c6      	strh	r6, [r0, #6]
 8001742:	69e1      	ldr	r1, [r4, #28]
 8001744:	42b1      	cmp	r1, r6
 8001746:	d103      	bne.n	8001750 <core_inspect_forward_validate_+0x7c>
 8001748:	9801      	ldr	r0, [sp, #4]
 800174a:	302c      	adds	r0, #44	; 0x2c
 800174c:	f004 faf9 	bl	8005d42 <core_timer_reset>
 8001750:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001752:	6861      	ldr	r1, [r4, #4]
 8001754:	6842      	ldr	r2, [r0, #4]
 8001756:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001758:	9901      	ldr	r1, [sp, #4]
 800175a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800175c:	6848      	ldr	r0, [r1, #4]
 800175e:	f040 0001 	orr.w	r0, r0, #1
 8001762:	60d0      	str	r0, [r2, #12]
 8001764:	f89d 0000 	ldrb.w	r0, [sp]
 8001768:	b370      	cbz	r0, 80017c8 <core_inspect_forward_validate_+0xf4>
 800176a:	6829      	ldr	r1, [r5, #0]
 800176c:	8928      	ldrh	r0, [r5, #8]
 800176e:	f04f 0900 	mov.w	r9, #0
 8001772:	f04f 0a04 	mov.w	sl, #4
 8001776:	46cb      	mov	fp, r9
 8001778:	f8d1 8000 	ldr.w	r8, [r1]
 800177c:	b320      	cbz	r0, 80017c8 <core_inspect_forward_validate_+0xf4>
 800177e:	9e04      	ldr	r6, [sp, #16]
 8001780:	f8dd 7008 	ldr.w	r7, [sp, #8]
 8001784:	f8d8 0000 	ldr.w	r0, [r8]
 8001788:	f109 0901 	add.w	r9, r9, #1
 800178c:	6841      	ldr	r1, [r0, #4]
 800178e:	6800      	ldr	r0, [r0, #0]
 8001790:	f004 f8ea 	bl	8005968 <ai_array_get_byte_size>
 8001794:	f8d8 3000 	ldr.w	r3, [r8]
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800179e:	4370      	muls	r0, r6
 80017a0:	6899      	ldr	r1, [r3, #8]
 80017a2:	f10c 0e10 	add.w	lr, ip, #16
 80017a6:	f85e 300b 	ldr.w	r3, [lr, fp]
 80017aa:	f10b 0b14 	add.w	fp, fp, #20
 80017ae:	4418      	add	r0, r3
 80017b0:	f00d fed0 	bl	800f554 <__aeabi_memcpy>
 80017b4:	8929      	ldrh	r1, [r5, #8]
 80017b6:	6828      	ldr	r0, [r5, #0]
 80017b8:	4589      	cmp	r9, r1
 80017ba:	f850 800a 	ldr.w	r8, [r0, sl]
 80017be:	f10a 0a04 	add.w	sl, sl, #4
 80017c2:	d3df      	bcc.n	8001784 <core_inspect_forward_validate_+0xb0>
 80017c4:	9604      	str	r6, [sp, #16]
 80017c6:	9702      	str	r7, [sp, #8]
 80017c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d049      	beq.n	8001862 <core_inspect_forward_validate_+0x18e>
 80017ce:	9a02      	ldr	r2, [sp, #8]
 80017d0:	a806      	add	r0, sp, #24
 80017d2:	9905      	ldr	r1, [sp, #20]
 80017d4:	f04f 0a00 	mov.w	sl, #0
 80017d8:	46d3      	mov	fp, sl
 80017da:	e892 43c8 	ldmia.w	r2, {r3, r6, r7, r8, r9, lr}
 80017de:	e880 43c8 	stmia.w	r0, {r3, r6, r7, r8, r9, lr}
 80017e2:	910a      	str	r1, [sp, #40]	; 0x28
 80017e4:	2700      	movs	r7, #0
 80017e6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80017ea:	f04f 0804 	mov.w	r8, #4
 80017ee:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
 80017f2:	682a      	ldr	r2, [r5, #0]
 80017f4:	8928      	ldrh	r0, [r5, #8]
 80017f6:	6816      	ldr	r6, [r2, #0]
 80017f8:	b318      	cbz	r0, 8001842 <core_inspect_forward_validate_+0x16e>
 80017fa:	6830      	ldr	r0, [r6, #0]
 80017fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017fe:	1c7f      	adds	r7, r7, #1
 8001800:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8001804:	6800      	ldr	r0, [r0, #0]
 8001806:	eb01 0a0b 	add.w	sl, r1, fp
 800180a:	f10b 0b14 	add.w	fp, fp, #20
 800180e:	f003 ffd3 	bl	80057b8 <ai_array_to_buffer_fmt>
 8001812:	f8ca 0000 	str.w	r0, [sl]
 8001816:	2001      	movs	r0, #1
 8001818:	f8aa 0004 	strh.w	r0, [sl, #4]
 800181c:	6931      	ldr	r1, [r6, #16]
 800181e:	f8aa 1006 	strh.w	r1, [sl, #6]
 8001822:	68f0      	ldr	r0, [r6, #12]
 8001824:	f8aa 0008 	strh.w	r0, [sl, #8]
 8001828:	68b1      	ldr	r1, [r6, #8]
 800182a:	f8ca 100c 	str.w	r1, [sl, #12]
 800182e:	f8ca 9010 	str.w	r9, [sl, #16]
 8001832:	8929      	ldrh	r1, [r5, #8]
 8001834:	6828      	ldr	r0, [r5, #0]
 8001836:	428f      	cmp	r7, r1
 8001838:	f850 6008 	ldr.w	r6, [r0, r8]
 800183c:	f108 0804 	add.w	r8, r8, #4
 8001840:	d3db      	bcc.n	80017fa <core_inspect_forward_validate_+0x126>
 8001842:	9801      	ldr	r0, [sp, #4]
 8001844:	eddf 0acf 	vldr	s1, [pc, #828]	; 8001b84 <.text_11>
 8001848:	2200      	movs	r2, #0
 800184a:	a906      	add	r1, sp, #24
 800184c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001850:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001854:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001858:	edcd 0a08 	vstr	s1, [sp, #32]
 800185c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800185e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001860:	4798      	blx	r3
 8001862:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001864:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001868:	f000 fb78 	bl	8001f5c <ai_layer_type_is_valid>
 800186c:	b148      	cbz	r0, 8001882 <core_inspect_forward_validate_+0x1ae>
 800186e:	9801      	ldr	r0, [sp, #4]
 8001870:	302c      	adds	r0, #44	; 0x2c
 8001872:	f004 fa6c 	bl	8005d4e <core_timer_start>
 8001876:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001878:	68c2      	ldr	r2, [r0, #12]
 800187a:	4790      	blx	r2
 800187c:	9801      	ldr	r0, [sp, #4]
 800187e:	302c      	adds	r0, #44	; 0x2c
 8001880:	e007      	b.n	8001892 <core_inspect_forward_validate_+0x1be>
 8001882:	9901      	ldr	r1, [sp, #4]
 8001884:	f101 002c 	add.w	r0, r1, #44	; 0x2c
 8001888:	f004 fa61 	bl	8005d4e <core_timer_start>
 800188c:	9a01      	ldr	r2, [sp, #4]
 800188e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8001892:	f004 fa66 	bl	8005d62 <core_timer_stop>
 8001896:	f89d 0000 	ldrb.w	r0, [sp]
 800189a:	b388      	cbz	r0, 8001900 <core_inspect_forward_validate_+0x22c>
 800189c:	9903      	ldr	r1, [sp, #12]
 800189e:	f04f 0800 	mov.w	r8, #0
 80018a2:	680a      	ldr	r2, [r1, #0]
 80018a4:	f04f 0904 	mov.w	r9, #4
 80018a8:	46c3      	mov	fp, r8
 80018aa:	8908      	ldrh	r0, [r1, #8]
 80018ac:	f8d2 a000 	ldr.w	sl, [r2]
 80018b0:	b330      	cbz	r0, 8001900 <core_inspect_forward_validate_+0x22c>
 80018b2:	460e      	mov	r6, r1
 80018b4:	9f04      	ldr	r7, [sp, #16]
 80018b6:	9d02      	ldr	r5, [sp, #8]
 80018b8:	f8da 0000 	ldr.w	r0, [sl]
 80018bc:	f108 0801 	add.w	r8, r8, #1
 80018c0:	6841      	ldr	r1, [r0, #4]
 80018c2:	6800      	ldr	r0, [r0, #0]
 80018c4:	f004 f850 	bl	8005968 <ai_array_get_byte_size>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f8da 0000 	ldr.w	r0, [sl]
 80018ce:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80018d2:	4613      	mov	r3, r2
 80018d4:	6881      	ldr	r1, [r0, #8]
 80018d6:	437a      	muls	r2, r7
 80018d8:	f10c 0e10 	add.w	lr, ip, #16
 80018dc:	f85e 000b 	ldr.w	r0, [lr, fp]
 80018e0:	f10b 0b14 	add.w	fp, fp, #20
 80018e4:	4410      	add	r0, r2
 80018e6:	461a      	mov	r2, r3
 80018e8:	f00d fe34 	bl	800f554 <__aeabi_memcpy>
 80018ec:	8932      	ldrh	r2, [r6, #8]
 80018ee:	6831      	ldr	r1, [r6, #0]
 80018f0:	4590      	cmp	r8, r2
 80018f2:	f851 a009 	ldr.w	sl, [r1, r9]
 80018f6:	f109 0904 	add.w	r9, r9, #4
 80018fa:	d3dd      	bcc.n	80018b8 <core_inspect_forward_validate_+0x1e4>
 80018fc:	9603      	str	r6, [sp, #12]
 80018fe:	9502      	str	r5, [sp, #8]
 8001900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001902:	2900      	cmp	r1, #0
 8001904:	d04f      	beq.n	80019a6 <core_inspect_forward_validate_+0x2d2>
 8001906:	9a02      	ldr	r2, [sp, #8]
 8001908:	a806      	add	r0, sp, #24
 800190a:	2100      	movs	r1, #0
 800190c:	f04f 0a00 	mov.w	sl, #0
 8001910:	f04f 0b04 	mov.w	fp, #4
 8001914:	e892 41e8 	ldmia.w	r2, {r3, r5, r6, r7, r8, lr}
 8001918:	e880 41e8 	stmia.w	r0, {r3, r5, r6, r7, r8, lr}
 800191c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8001920:	2500      	movs	r5, #0
 8001922:	910a      	str	r1, [sp, #40]	; 0x28
 8001924:	9905      	ldr	r1, [sp, #20]
 8001926:	9803      	ldr	r0, [sp, #12]
 8001928:	910b      	str	r1, [sp, #44]	; 0x2c
 800192a:	6802      	ldr	r2, [r0, #0]
 800192c:	8900      	ldrh	r0, [r0, #8]
 800192e:	f8d2 9000 	ldr.w	r9, [r2]
 8001932:	b340      	cbz	r0, 8001986 <core_inspect_forward_validate_+0x2b2>
 8001934:	f8dd 600c 	ldr.w	r6, [sp, #12]
 8001938:	f8d9 0000 	ldr.w	r0, [r9]
 800193c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800193e:	f10a 0a01 	add.w	sl, sl, #1
 8001942:	6887      	ldr	r7, [r0, #8]
 8001944:	6800      	ldr	r0, [r0, #0]
 8001946:	eb01 0805 	add.w	r8, r1, r5
 800194a:	3514      	adds	r5, #20
 800194c:	f003 ff34 	bl	80057b8 <ai_array_to_buffer_fmt>
 8001950:	f8c8 0000 	str.w	r0, [r8]
 8001954:	2001      	movs	r0, #1
 8001956:	f8a8 0004 	strh.w	r0, [r8, #4]
 800195a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800195e:	f8a8 1006 	strh.w	r1, [r8, #6]
 8001962:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8001966:	f8a8 0008 	strh.w	r0, [r8, #8]
 800196a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800196e:	f8c8 100c 	str.w	r1, [r8, #12]
 8001972:	f8c8 7010 	str.w	r7, [r8, #16]
 8001976:	8931      	ldrh	r1, [r6, #8]
 8001978:	6830      	ldr	r0, [r6, #0]
 800197a:	458a      	cmp	sl, r1
 800197c:	f850 900b 	ldr.w	r9, [r0, fp]
 8001980:	f10b 0b04 	add.w	fp, fp, #4
 8001984:	d3d8      	bcc.n	8001938 <core_inspect_forward_validate_+0x264>
 8001986:	9801      	ldr	r0, [sp, #4]
 8001988:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8001b84 <.text_11>
 800198c:	2201      	movs	r2, #1
 800198e:	a906      	add	r1, sp, #24
 8001990:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8001994:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001998:	ee60 0a20 	vmul.f32	s1, s0, s1
 800199c:	edcd 0a08 	vstr	s1, [sp, #32]
 80019a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019a4:	4798      	blx	r3
 80019a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019a8:	6841      	ldr	r1, [r0, #4]
 80019aa:	64cc      	str	r4, [r1, #76]	; 0x4c
 80019ac:	9a01      	ldr	r2, [sp, #4]
 80019ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019b0:	6890      	ldr	r0, [r2, #8]
 80019b2:	f040 0001 	orr.w	r0, r0, #1
 80019b6:	60c8      	str	r0, [r1, #12]
 80019b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80019bc:	6880      	ldr	r0, [r0, #8]
 80019be:	4281      	cmp	r1, r0
 80019c0:	bf18      	it	ne
 80019c2:	2800      	cmpne	r0, #0
 80019c4:	d13b      	bne.n	8001a3e <core_inspect_forward_validate_+0x36a>
 80019c6:	68e3      	ldr	r3, [r4, #12]
 80019c8:	69e0      	ldr	r0, [r4, #28]
 80019ca:	1c5b      	adds	r3, r3, #1
 80019cc:	60e3      	str	r3, [r4, #12]
 80019ce:	1e40      	subs	r0, r0, #1
 80019d0:	61e0      	str	r0, [r4, #28]
 80019d2:	d134      	bne.n	8001a3e <core_inspect_forward_validate_+0x36a>
 80019d4:	6a22      	ldr	r2, [r4, #32]
 80019d6:	68a0      	ldr	r0, [r4, #8]
 80019d8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001b84 <.text_11>
 80019dc:	6891      	ldr	r1, [r2, #8]
 80019de:	09c0      	lsrs	r0, r0, #7
 80019e0:	f000 0001 	and.w	r0, r0, #1
 80019e4:	1a5b      	subs	r3, r3, r1
 80019e6:	6093      	str	r3, [r2, #8]
 80019e8:	2300      	movs	r3, #0
 80019ea:	6113      	str	r3, [r2, #16]
 80019ec:	69a1      	ldr	r1, [r4, #24]
 80019ee:	b331      	cbz	r1, 8001a3e <core_inspect_forward_validate_+0x36a>
 80019f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80019f2:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80019f6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80019fa:	3534      	adds	r5, #52	; 0x34
 80019fc:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8001a00:	6955      	ldr	r5, [r2, #20]
 8001a02:	edd6 0a00 	vldr	s1, [r6]
 8001a06:	00fe      	lsls	r6, r7, #3
 8001a08:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8001a0c:	f105 0c08 	add.w	ip, r5, #8
 8001a10:	44b4      	add	ip, r6
 8001a12:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001a16:	edcc 0a00 	vstr	s1, [ip]
 8001a1a:	ed92 1a04 	vldr	s2, [r2, #16]
 8001a1e:	ee71 0a20 	vadd.f32	s1, s2, s1
 8001a22:	edc2 0a04 	vstr	s1, [r2, #16]
 8001a26:	b930      	cbnz	r0, 8001a36 <core_inspect_forward_validate_+0x362>
 8001a28:	2700      	movs	r7, #0
 8001a2a:	f105 0c14 	add.w	ip, r5, #20
 8001a2e:	f84c 7006 	str.w	r7, [ip, r6]
 8001a32:	3510      	adds	r5, #16
 8001a34:	51af      	str	r7, [r5, r6]
 8001a36:	1c5b      	adds	r3, r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d3d8      	bcc.n	80019f0 <core_inspect_forward_validate_+0x31c>
 8001a3e:	6960      	ldr	r0, [r4, #20]
 8001a40:	1c40      	adds	r0, r0, #1
 8001a42:	6160      	str	r0, [r4, #20]
 8001a44:	b00d      	add	sp, #52	; 0x34
 8001a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a4a <ai_network_inspect_init>:
 8001a4a:	b570      	push	{r4, r5, r6, lr}
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	2600      	movs	r6, #0
 8001a50:	f7ff f8bf 	bl	8000bd2 <ai_platform_context_acquire>
 8001a54:	4605      	mov	r5, r0
 8001a56:	2d00      	cmp	r5, #0
 8001a58:	bf1c      	itt	ne
 8001a5a:	6c69      	ldrne	r1, [r5, #68]	; 0x44
 8001a5c:	2900      	cmpne	r1, #0
 8001a5e:	d03c      	beq.n	8001ada <ai_network_inspect_init+0x90>
 8001a60:	6888      	ldr	r0, [r1, #8]
 8001a62:	1c76      	adds	r6, r6, #1
 8001a64:	4281      	cmp	r1, r0
 8001a66:	bf1c      	itt	ne
 8001a68:	2800      	cmpne	r0, #0
 8001a6a:	4601      	movne	r1, r0
 8001a6c:	d1f8      	bne.n	8001a60 <ai_network_inspect_init+0x16>
 8001a6e:	e02b      	b.n	8001ac8 <ai_network_inspect_init+0x7e>
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	4946      	ldr	r1, [pc, #280]	; (8001b8c <.text_13>)
 8001a74:	6001      	str	r1, [r0, #0]
 8001a76:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8001a7a:	bf14      	ite	ne
 8001a7c:	6861      	ldrne	r1, [r4, #4]
 8001a7e:	2100      	moveq	r1, #0
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	6281      	str	r1, [r0, #40]	; 0x28
 8001a84:	bf14      	ite	ne
 8001a86:	68a1      	ldrne	r1, [r4, #8]
 8001a88:	2100      	moveq	r1, #0
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001a8e:	bf14      	ite	ne
 8001a90:	68e1      	ldrne	r1, [r4, #12]
 8001a92:	2100      	moveq	r1, #0
 8001a94:	2c00      	cmp	r4, #0
 8001a96:	6301      	str	r1, [r0, #48]	; 0x30
 8001a98:	bf14      	ite	ne
 8001a9a:	7821      	ldrbne	r1, [r4, #0]
 8001a9c:	2101      	moveq	r1, #1
 8001a9e:	6081      	str	r1, [r0, #8]
 8001aa0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	6041      	str	r1, [r0, #4]
 8001aa6:	60c2      	str	r2, [r0, #12]
 8001aa8:	6105      	str	r5, [r0, #16]
 8001aaa:	6186      	str	r6, [r0, #24]
 8001aac:	6142      	str	r2, [r0, #20]
 8001aae:	61c2      	str	r2, [r0, #28]
 8001ab0:	6243      	str	r3, [r0, #36]	; 0x24
 8001ab2:	6202      	str	r2, [r0, #32]
 8001ab4:	64e8      	str	r0, [r5, #76]	; 0x4c
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f7ff fc1a 	bl	80012f0 <core_inspect_net_activations_>
 8001abc:	1d29      	adds	r1, r5, #4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ac4:	f000 b902 	b.w	8001ccc <core_utils_generate_network_signature>
 8001ac8:	b13e      	cbz	r6, 8001ada <ai_network_inspect_init+0x90>
 8001aca:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 8001ace:	00c0      	lsls	r0, r0, #3
 8001ad0:	3040      	adds	r0, #64	; 0x40
 8001ad2:	f7ff fba1 	bl	8001218 <core_mem_alloc>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d1ca      	bne.n	8001a70 <ai_network_inspect_init+0x26>
 8001ada:	2000      	movs	r0, #0
 8001adc:	bd70      	pop	{r4, r5, r6, pc}

08001ade <ai_network_inspect_get_report>:
 8001ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae0:	b081      	sub	sp, #4
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	f7ff f875 	bl	8000bd2 <ai_platform_context_acquire>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	bf18      	it	ne
 8001aec:	2c00      	cmpne	r4, #0
 8001aee:	d002      	beq.n	8001af6 <ai_network_inspect_get_report+0x18>
 8001af0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001af2:	6a09      	ldr	r1, [r1, #32]
 8001af4:	b911      	cbnz	r1, 8001afc <ai_network_inspect_get_report+0x1e>
 8001af6:	2000      	movs	r0, #0
 8001af8:	b001      	add	sp, #4
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afc:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 8001b00:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 8001b04:	6840      	ldr	r0, [r0, #4]
 8001b06:	6060      	str	r0, [r4, #4]
 8001b08:	2001      	movs	r0, #1
 8001b0a:	b001      	add	sp, #4
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b0e <ai_network_inspect_destroy>:
 8001b0e:	b570      	push	{r4, r5, r6, lr}
 8001b10:	f7ff f85f 	bl	8000bd2 <ai_platform_context_acquire>
 8001b14:	4601      	mov	r1, r0
 8001b16:	2300      	movs	r3, #0
 8001b18:	2900      	cmp	r1, #0
 8001b1a:	bf1c      	itt	ne
 8001b1c:	6ccc      	ldrne	r4, [r1, #76]	; 0x4c
 8001b1e:	2c00      	cmpne	r4, #0
 8001b20:	d003      	beq.n	8001b2a <ai_network_inspect_destroy+0x1c>
 8001b22:	6820      	ldr	r0, [r4, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <.text_13>)
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d001      	beq.n	8001b2e <ai_network_inspect_destroy+0x20>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001b30:	b1ea      	cbz	r2, 8001b6e <ai_network_inspect_destroy+0x60>
 8001b32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b34:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8001b38:	1c5b      	adds	r3, r3, #1
 8001b3a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001b3e:	b128      	cbz	r0, 8001b4c <ai_network_inspect_destroy+0x3e>
 8001b40:	6806      	ldr	r6, [r0, #0]
 8001b42:	6116      	str	r6, [r2, #16]
 8001b44:	6840      	ldr	r0, [r0, #4]
 8001b46:	f040 0001 	orr.w	r0, r0, #1
 8001b4a:	60d0      	str	r0, [r2, #12]
 8001b4c:	6890      	ldr	r0, [r2, #8]
 8001b4e:	4282      	cmp	r2, r0
 8001b50:	bf1c      	itt	ne
 8001b52:	2800      	cmpne	r0, #0
 8001b54:	4602      	movne	r2, r0
 8001b56:	d1ec      	bne.n	8001b32 <ai_network_inspect_destroy+0x24>
 8001b58:	e009      	b.n	8001b6e <ai_network_inspect_destroy+0x60>
 8001b5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b5c:	b10a      	cbz	r2, 8001b62 <ai_network_inspect_destroy+0x54>
 8001b5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b60:	4790      	blx	r2
 8001b62:	6a20      	ldr	r0, [r4, #32]
 8001b64:	f7ff fb65 	bl	8001232 <core_mem_free>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	6220      	str	r0, [r4, #32]
 8001b6c:	e004      	b.n	8001b78 <ai_network_inspect_destroy+0x6a>
 8001b6e:	6860      	ldr	r0, [r4, #4]
 8001b70:	64c8      	str	r0, [r1, #76]	; 0x4c
 8001b72:	6a21      	ldr	r1, [r4, #32]
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d1f0      	bne.n	8001b5a <ai_network_inspect_destroy+0x4c>
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff fb5a 	bl	8001232 <core_mem_free>
 8001b7e:	2001      	movs	r0, #1
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b84 <.text_11>:
 8001b84:	3a83126f 	.word	0x3a83126f

08001b88 <.text_12>:
 8001b88:	20000000 	.word	0x20000000

08001b8c <.text_13>:
 8001b8c:	a1c00101 	.word	0xa1c00101

08001b90 <_compute_fletcher32>:
 8001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b94:	0849      	lsrs	r1, r1, #1
 8001b96:	2400      	movs	r4, #0
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	d329      	bcc.n	8001bf6 <_compute_fletcher32+0x66>
 8001ba2:	202d      	movs	r0, #45	; 0x2d
 8001ba4:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001ba8:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001bac:	1964      	adds	r4, r4, r5
 8001bae:	18e3      	adds	r3, r4, r3
 8001bb0:	f832 7b02 	ldrh.w	r7, [r2], #2
 8001bb4:	19a4      	adds	r4, r4, r6
 8001bb6:	18e3      	adds	r3, r4, r3
 8001bb8:	f832 cb02 	ldrh.w	ip, [r2], #2
 8001bbc:	19e4      	adds	r4, r4, r7
 8001bbe:	18e3      	adds	r3, r4, r3
 8001bc0:	f832 eb02 	ldrh.w	lr, [r2], #2
 8001bc4:	4464      	add	r4, ip
 8001bc6:	18e3      	adds	r3, r4, r3
 8001bc8:	f832 8b02 	ldrh.w	r8, [r2], #2
 8001bcc:	4474      	add	r4, lr
 8001bce:	18e3      	adds	r3, r4, r3
 8001bd0:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001bd4:	4444      	add	r4, r8
 8001bd6:	18e3      	adds	r3, r4, r3
 8001bd8:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001bdc:	1964      	adds	r4, r4, r5
 8001bde:	18e3      	adds	r3, r4, r3
 8001be0:	19a4      	adds	r4, r4, r6
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	1e40      	subs	r0, r0, #1
 8001be6:	d1dd      	bne.n	8001ba4 <_compute_fletcher32+0x14>
 8001be8:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8001bec:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001bf0:	b2a4      	uxth	r4, r4
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	d2d5      	bcs.n	8001ba2 <_compute_fletcher32+0x12>
 8001bf6:	b1e9      	cbz	r1, 8001c34 <_compute_fletcher32+0xa4>
 8001bf8:	f011 0003 	ands.w	r0, r1, #3
 8001bfc:	f000 8006 	beq.w	8001c0c <_compute_fletcher32+0x7c>
 8001c00:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001c04:	1964      	adds	r4, r4, r5
 8001c06:	18e3      	adds	r3, r4, r3
 8001c08:	1e40      	subs	r0, r0, #1
 8001c0a:	d1f9      	bne.n	8001c00 <_compute_fletcher32+0x70>
 8001c0c:	0889      	lsrs	r1, r1, #2
 8001c0e:	d011      	beq.n	8001c34 <_compute_fletcher32+0xa4>
 8001c10:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001c14:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001c18:	1820      	adds	r0, r4, r0
 8001c1a:	18c3      	adds	r3, r0, r3
 8001c1c:	f832 4b02 	ldrh.w	r4, [r2], #2
 8001c20:	1940      	adds	r0, r0, r5
 8001c22:	18c3      	adds	r3, r0, r3
 8001c24:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001c28:	1900      	adds	r0, r0, r4
 8001c2a:	18c3      	adds	r3, r0, r3
 8001c2c:	1944      	adds	r4, r0, r5
 8001c2e:	18e3      	adds	r3, r4, r3
 8001c30:	1e49      	subs	r1, r1, #1
 8001c32:	d1ed      	bne.n	8001c10 <_compute_fletcher32+0x80>
 8001c34:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c3c <serialize_signature_buffer_>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	460c      	mov	r4, r1
 8001c40:	b081      	sub	sp, #4
 8001c42:	2100      	movs	r1, #0
 8001c44:	9100      	str	r1, [sp, #0]
 8001c46:	b10c      	cbz	r4, 8001c4c <serialize_signature_buffer_+0x10>
 8001c48:	6801      	ldr	r1, [r0, #0]
 8001c4a:	6021      	str	r1, [r4, #0]
 8001c4c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001c4e:	1d21      	adds	r1, r4, #4
 8001c50:	b3a6      	cbz	r6, 8001cbc <serialize_signature_buffer_+0x80>
 8001c52:	e017      	b.n	8001c84 <serialize_signature_buffer_+0x48>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	1d0f      	adds	r7, r1, #4
 8001c58:	2210      	movs	r2, #16
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	6008      	str	r0, [r1, #0]
 8001c5e:	1d29      	adds	r1, r5, #4
 8001c60:	4638      	mov	r0, r7
 8001c62:	3710      	adds	r7, #16
 8001c64:	f00d fc76 	bl	800f554 <__aeabi_memcpy>
 8001c68:	2210      	movs	r2, #16
 8001c6a:	f105 0114 	add.w	r1, r5, #20
 8001c6e:	4638      	mov	r0, r7
 8001c70:	f00d fc70 	bl	800f554 <__aeabi_memcpy>
 8001c74:	f107 0110 	add.w	r1, r7, #16
 8001c78:	68b0      	ldr	r0, [r6, #8]
 8001c7a:	4286      	cmp	r6, r0
 8001c7c:	bf18      	it	ne
 8001c7e:	2800      	cmpne	r0, #0
 8001c80:	d01c      	beq.n	8001cbc <serialize_signature_buffer_+0x80>
 8001c82:	4606      	mov	r6, r0
 8001c84:	6970      	ldr	r0, [r6, #20]
 8001c86:	6802      	ldr	r2, [r0, #0]
 8001c88:	9800      	ldr	r0, [sp, #0]
 8001c8a:	68d3      	ldr	r3, [r2, #12]
 8001c8c:	681d      	ldr	r5, [r3, #0]
 8001c8e:	1c40      	adds	r0, r0, #1
 8001c90:	9000      	str	r0, [sp, #0]
 8001c92:	b90c      	cbnz	r4, 8001c98 <serialize_signature_buffer_+0x5c>
 8001c94:	1c88      	adds	r0, r1, #2
 8001c96:	e009      	b.n	8001cac <serialize_signature_buffer_+0x70>
 8001c98:	7830      	ldrb	r0, [r6, #0]
 8001c9a:	7008      	strb	r0, [r1, #0]
 8001c9c:	7870      	ldrb	r0, [r6, #1]
 8001c9e:	7048      	strb	r0, [r1, #1]
 8001ca0:	1c88      	adds	r0, r1, #2
 8001ca2:	1cb1      	adds	r1, r6, #2
 8001ca4:	780a      	ldrb	r2, [r1, #0]
 8001ca6:	7002      	strb	r2, [r0, #0]
 8001ca8:	784a      	ldrb	r2, [r1, #1]
 8001caa:	7042      	strb	r2, [r0, #1]
 8001cac:	1c81      	adds	r1, r0, #2
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d0e2      	beq.n	8001c78 <serialize_signature_buffer_+0x3c>
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d1ce      	bne.n	8001c54 <serialize_signature_buffer_+0x18>
 8001cb6:	f101 0714 	add.w	r7, r1, #20
 8001cba:	e7db      	b.n	8001c74 <serialize_signature_buffer_+0x38>
 8001cbc:	b10c      	cbz	r4, 8001cc2 <serialize_signature_buffer_+0x86>
 8001cbe:	9a00      	ldr	r2, [sp, #0]
 8001cc0:	600a      	str	r2, [r1, #0]
 8001cc2:	1d09      	adds	r1, r1, #4
 8001cc4:	1b08      	subs	r0, r1, r4
 8001cc6:	b001      	add	sp, #4
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cca <core_utils_compute_crc32>:
 8001cca:	e761      	b.n	8001b90 <_compute_fletcher32>

08001ccc <core_utils_generate_network_signature>:
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	0006      	movs	r6, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	b081      	sub	sp, #4
 8001cd4:	bf18      	it	ne
 8001cd6:	2d00      	cmpne	r5, #0
 8001cd8:	d00a      	beq.n	8001cf0 <core_utils_generate_network_signature+0x24>
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f7ff ffae 	bl	8001c3c <serialize_signature_buffer_>
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	6028      	str	r0, [r5, #0]
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	f7ff fa96 	bl	8001218 <core_mem_alloc>
 8001cec:	0004      	movs	r4, r0
 8001cee:	d102      	bne.n	8001cf6 <core_utils_generate_network_signature+0x2a>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	b001      	add	sp, #4
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f7ff ff9f 	bl	8001c3c <serialize_signature_buffer_>
 8001cfe:	4639      	mov	r1, r7
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff ff45 	bl	8001b90 <_compute_fletcher32>
 8001d06:	6028      	str	r0, [r5, #0]
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f7ff fa92 	bl	8001232 <core_mem_free>
 8001d0e:	2001      	movs	r0, #1
 8001d10:	b001      	add	sp, #4
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d14 <get_broadcasted_shape>:
 8001d14:	b40e      	push	{r1, r2, r3}
 8001d16:	b430      	push	{r4, r5}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d1c:	4291      	cmp	r1, r2
 8001d1e:	bf38      	it	cc
 8001d20:	4611      	movcc	r1, r2
 8001d22:	9100      	str	r1, [sp, #0]
 8001d24:	9907      	ldr	r1, [sp, #28]
 8001d26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d28:	428a      	cmp	r2, r1
 8001d2a:	bf28      	it	cs
 8001d2c:	4611      	movcs	r1, r2
 8001d2e:	9101      	str	r1, [sp, #4]
 8001d30:	9908      	ldr	r1, [sp, #32]
 8001d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d34:	428a      	cmp	r2, r1
 8001d36:	bf28      	it	cs
 8001d38:	4611      	movcs	r1, r2
 8001d3a:	9102      	str	r1, [sp, #8]
 8001d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d40:	428a      	cmp	r2, r1
 8001d42:	bf28      	it	cs
 8001d44:	4611      	movcs	r1, r2
 8001d46:	9103      	str	r1, [sp, #12]
 8001d48:	4669      	mov	r1, sp
 8001d4a:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 8001d4e:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
 8001d52:	b004      	add	sp, #16
 8001d54:	bc30      	pop	{r4, r5}
 8001d56:	b003      	add	sp, #12
 8001d58:	4770      	bx	lr

08001d5a <compute_offsets>:
 8001d5a:	b40e      	push	{r1, r2, r3}
 8001d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d60:	b088      	sub	sp, #32
 8001d62:	f20f 0e9c 	addw	lr, pc, #156	; 0x9c
 8001d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d68:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8001d6a:	e89e 0f00 	ldmia.w	lr, {r8, r9, sl, fp}
 8001d6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8001d70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8001d74:	4291      	cmp	r1, r2
 8001d76:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	428f      	cmp	r7, r1
 8001d82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001d84:	fb07 f70e 	mul.w	r7, r7, lr
 8001d88:	bf14      	ite	ne
 8001d8a:	2501      	movne	r5, #1
 8001d8c:	2500      	moveq	r5, #0
 8001d8e:	4291      	cmp	r1, r2
 8001d90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001d92:	bf14      	ite	ne
 8001d94:	2601      	movne	r6, #1
 8001d96:	2600      	moveq	r6, #0
 8001d98:	42a2      	cmp	r2, r4
 8001d9a:	466a      	mov	r2, sp
 8001d9c:	e882 0f00 	stmia.w	r2, {r8, r9, sl, fp}
 8001da0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001da2:	9702      	str	r7, [sp, #8]
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	f085 0201 	eor.w	r2, r5, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2401      	movne	r4, #1
 8001dae:	2400      	moveq	r4, #0
 8001db0:	401a      	ands	r2, r3
 8001db2:	434f      	muls	r7, r1
 8001db4:	9901      	ldr	r1, [sp, #4]
 8001db6:	9703      	str	r7, [sp, #12]
 8001db8:	f083 0701 	eor.w	r7, r3, #1
 8001dbc:	f084 0e01 	eor.w	lr, r4, #1
 8001dc0:	9704      	str	r7, [sp, #16]
 8001dc2:	f086 0701 	eor.w	r7, r6, #1
 8001dc6:	4369      	muls	r1, r5
 8001dc8:	402f      	ands	r7, r5
 8001dca:	401f      	ands	r7, r3
 8001dcc:	1a52      	subs	r2, r2, r1
 8001dce:	9205      	str	r2, [sp, #20]
 8001dd0:	9a02      	ldr	r2, [sp, #8]
 8001dd2:	4372      	muls	r2, r6
 8001dd4:	ea06 060e 	and.w	r6, r6, lr
 8001dd8:	4035      	ands	r5, r6
 8001dda:	402b      	ands	r3, r5
 8001ddc:	1abf      	subs	r7, r7, r2
 8001dde:	19c9      	adds	r1, r1, r7
 8001de0:	9106      	str	r1, [sp, #24]
 8001de2:	9903      	ldr	r1, [sp, #12]
 8001de4:	fb01 3314 	mls	r3, r1, r4, r3
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	aa04      	add	r2, sp, #16
 8001dec:	9307      	str	r3, [sp, #28]
 8001dee:	e892 0078 	ldmia.w	r2, {r3, r4, r5, r6}
 8001df2:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
 8001df6:	b008      	add	sp, #32
 8001df8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dfc:	f85d fb10 	ldr.w	pc, [sp], #16

08001e00 <.text_8>:
 8001e00:	00000001 	.word	0x00000001
	...

08001e10 <ai_layers_forward_layer>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4604      	mov	r4, r0
 8001e14:	68e1      	ldr	r1, [r4, #12]
 8001e16:	4788      	blx	r1
 8001e18:	68a0      	ldr	r0, [r4, #8]
 8001e1a:	42a0      	cmp	r0, r4
 8001e1c:	bf08      	it	eq
 8001e1e:	2000      	moveq	r0, #0
 8001e20:	bd10      	pop	{r4, pc}
	...

08001e24 <ai_check_custom_types>:
 8001e24:	b500      	push	{lr}
 8001e26:	b081      	sub	sp, #4
 8001e28:	b160      	cbz	r0, 8001e44 <ai_check_custom_types+0x20>
 8001e2a:	7801      	ldrb	r1, [r0, #0]
 8001e2c:	2903      	cmp	r1, #3
 8001e2e:	d109      	bne.n	8001e44 <ai_check_custom_types+0x20>
 8001e30:	f05f 0204 	movs.w	r2, #4
 8001e34:	a18c      	add	r1, pc, #560	; (adr r1, 8002068 <ai_check_custom_types::ref_signatures>)
 8001e36:	f00d fbc9 	bl	800f5cc <memcmp>
 8001e3a:	1e40      	subs	r0, r0, #1
 8001e3c:	4180      	sbcs	r0, r0
 8001e3e:	0fc0      	lsrs	r0, r0, #31
 8001e40:	b001      	add	sp, #4
 8001e42:	bd00      	pop	{pc}
 8001e44:	2000      	movs	r0, #0
 8001e46:	b001      	add	sp, #4
 8001e48:	bd00      	pop	{pc}
	...

08001e4c <ai_layer_type_name>:
 8001e4c:	f242 7211 	movw	r2, #10001	; 0x2711
 8001e50:	1a81      	subs	r1, r0, r2
 8001e52:	2901      	cmp	r1, #1
 8001e54:	bf81      	itttt	hi
 8001e56:	1ec9      	subhi	r1, r1, #3
 8001e58:	290d      	cmphi	r1, #13
 8001e5a:	390f      	subhi	r1, #15
 8001e5c:	2909      	cmphi	r1, #9
 8001e5e:	f200 806b 	bhi.w	8001f38 <ai_layer_type_name+0xec>
 8001e62:	1a80      	subs	r0, r0, r2
 8001e64:	d033      	beq.n	8001ece <ai_layer_type_name+0x82>
 8001e66:	1e40      	subs	r0, r0, #1
 8001e68:	d033      	beq.n	8001ed2 <ai_layer_type_name+0x86>
 8001e6a:	1e80      	subs	r0, r0, #2
 8001e6c:	d033      	beq.n	8001ed6 <ai_layer_type_name+0x8a>
 8001e6e:	1e40      	subs	r0, r0, #1
 8001e70:	d034      	beq.n	8001edc <ai_layer_type_name+0x90>
 8001e72:	1e40      	subs	r0, r0, #1
 8001e74:	d034      	beq.n	8001ee0 <ai_layer_type_name+0x94>
 8001e76:	1e40      	subs	r0, r0, #1
 8001e78:	d034      	beq.n	8001ee4 <ai_layer_type_name+0x98>
 8001e7a:	1e40      	subs	r0, r0, #1
 8001e7c:	d034      	beq.n	8001ee8 <ai_layer_type_name+0x9c>
 8001e7e:	1e40      	subs	r0, r0, #1
 8001e80:	d034      	beq.n	8001eec <ai_layer_type_name+0xa0>
 8001e82:	1e40      	subs	r0, r0, #1
 8001e84:	d034      	beq.n	8001ef0 <ai_layer_type_name+0xa4>
 8001e86:	1e40      	subs	r0, r0, #1
 8001e88:	d034      	beq.n	8001ef4 <ai_layer_type_name+0xa8>
 8001e8a:	1e40      	subs	r0, r0, #1
 8001e8c:	d034      	beq.n	8001ef8 <ai_layer_type_name+0xac>
 8001e8e:	1e40      	subs	r0, r0, #1
 8001e90:	d034      	beq.n	8001efc <ai_layer_type_name+0xb0>
 8001e92:	1e40      	subs	r0, r0, #1
 8001e94:	d034      	beq.n	8001f00 <ai_layer_type_name+0xb4>
 8001e96:	1e40      	subs	r0, r0, #1
 8001e98:	d034      	beq.n	8001f04 <ai_layer_type_name+0xb8>
 8001e9a:	1e40      	subs	r0, r0, #1
 8001e9c:	d034      	beq.n	8001f08 <ai_layer_type_name+0xbc>
 8001e9e:	1e40      	subs	r0, r0, #1
 8001ea0:	d034      	beq.n	8001f0c <ai_layer_type_name+0xc0>
 8001ea2:	1e80      	subs	r0, r0, #2
 8001ea4:	d034      	beq.n	8001f10 <ai_layer_type_name+0xc4>
 8001ea6:	1e40      	subs	r0, r0, #1
 8001ea8:	d034      	beq.n	8001f14 <ai_layer_type_name+0xc8>
 8001eaa:	1e40      	subs	r0, r0, #1
 8001eac:	d034      	beq.n	8001f18 <ai_layer_type_name+0xcc>
 8001eae:	1e40      	subs	r0, r0, #1
 8001eb0:	d034      	beq.n	8001f1c <ai_layer_type_name+0xd0>
 8001eb2:	1e40      	subs	r0, r0, #1
 8001eb4:	d034      	beq.n	8001f20 <ai_layer_type_name+0xd4>
 8001eb6:	1e40      	subs	r0, r0, #1
 8001eb8:	d034      	beq.n	8001f24 <ai_layer_type_name+0xd8>
 8001eba:	1e40      	subs	r0, r0, #1
 8001ebc:	d034      	beq.n	8001f28 <ai_layer_type_name+0xdc>
 8001ebe:	1e40      	subs	r0, r0, #1
 8001ec0:	d034      	beq.n	8001f2c <ai_layer_type_name+0xe0>
 8001ec2:	1e40      	subs	r0, r0, #1
 8001ec4:	d034      	beq.n	8001f30 <ai_layer_type_name+0xe4>
 8001ec6:	1e40      	subs	r0, r0, #1
 8001ec8:	d034      	beq.n	8001f34 <ai_layer_type_name+0xe8>
 8001eca:	a01c      	add	r0, pc, #112	; (adr r0, 8001f3c <.text_5>)
 8001ecc:	4770      	bx	lr
 8001ece:	a01c      	add	r0, pc, #112	; (adr r0, 8001f40 <.text_6>)
 8001ed0:	4770      	bx	lr
 8001ed2:	a01c      	add	r0, pc, #112	; (adr r0, 8001f44 <.text_7>)
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	a031      	add	r0, pc, #196	; (adr r0, 8001fa0 <.text_15>)
 8001eda:	4770      	bx	lr
 8001edc:	a032      	add	r0, pc, #200	; (adr r0, 8001fa8 <.text_16>)
 8001ede:	4770      	bx	lr
 8001ee0:	a019      	add	r0, pc, #100	; (adr r0, 8001f48 <.text_8>)
 8001ee2:	4770      	bx	lr
 8001ee4:	a019      	add	r0, pc, #100	; (adr r0, 8001f4c <.text_9>)
 8001ee6:	4770      	bx	lr
 8001ee8:	a031      	add	r0, pc, #196	; (adr r0, 8001fb0 <.text_17>)
 8001eea:	4770      	bx	lr
 8001eec:	a018      	add	r0, pc, #96	; (adr r0, 8001f50 <.text_10>)
 8001eee:	4770      	bx	lr
 8001ef0:	a031      	add	r0, pc, #196	; (adr r0, 8001fb8 <.text_18>)
 8001ef2:	4770      	bx	lr
 8001ef4:	a032      	add	r0, pc, #200	; (adr r0, 8001fc0 <.text_19>)
 8001ef6:	4770      	bx	lr
 8001ef8:	a036      	add	r0, pc, #216	; (adr r0, 8001fd4 <.text_20>)
 8001efa:	4770      	bx	lr
 8001efc:	a037      	add	r0, pc, #220	; (adr r0, 8001fdc <.text_21>)
 8001efe:	4770      	bx	lr
 8001f00:	a014      	add	r0, pc, #80	; (adr r0, 8001f54 <.text_11>)
 8001f02:	4770      	bx	lr
 8001f04:	a037      	add	r0, pc, #220	; (adr r0, 8001fe4 <.text_22>)
 8001f06:	4770      	bx	lr
 8001f08:	a038      	add	r0, pc, #224	; (adr r0, 8001fec <.text_23>)
 8001f0a:	4770      	bx	lr
 8001f0c:	a03a      	add	r0, pc, #232	; (adr r0, 8001ff8 <.text_24>)
 8001f0e:	4770      	bx	lr
 8001f10:	a03e      	add	r0, pc, #248	; (adr r0, 800200c <.text_25>)
 8001f12:	4770      	bx	lr
 8001f14:	a03f      	add	r0, pc, #252	; (adr r0, 8002014 <.text_26>)
 8001f16:	4770      	bx	lr
 8001f18:	a040      	add	r0, pc, #256	; (adr r0, 800201c <.text_27>)
 8001f1a:	4770      	bx	lr
 8001f1c:	a042      	add	r0, pc, #264	; (adr r0, 8002028 <.text_28>)
 8001f1e:	4770      	bx	lr
 8001f20:	a043      	add	r0, pc, #268	; (adr r0, 8002030 <.text_29>)
 8001f22:	4770      	bx	lr
 8001f24:	a044      	add	r0, pc, #272	; (adr r0, 8002038 <.text_30>)
 8001f26:	4770      	bx	lr
 8001f28:	a00b      	add	r0, pc, #44	; (adr r0, 8001f58 <.text_12>)
 8001f2a:	4770      	bx	lr
 8001f2c:	a048      	add	r0, pc, #288	; (adr r0, 8002050 <.text_31>)
 8001f2e:	4770      	bx	lr
 8001f30:	a049      	add	r0, pc, #292	; (adr r0, 8002058 <.text_32>)
 8001f32:	4770      	bx	lr
 8001f34:	a04a      	add	r0, pc, #296	; (adr r0, 8002060 <.text_33>)
 8001f36:	4770      	bx	lr
 8001f38:	a000      	add	r0, pc, #0	; (adr r0, 8001f3c <.text_5>)
 8001f3a:	4770      	bx	lr

08001f3c <.text_5>:
 8001f3c:	00000000 	.word	0x00000000

08001f40 <.text_6>:
 8001f40:	00444441 	.word	0x00444441

08001f44 <.text_7>:
 8001f44:	00004e42 	.word	0x00004e42

08001f48 <.text_8>:
 8001f48:	00555247 	.word	0x00555247

08001f4c <.text_9>:
 8001f4c:	004e524c 	.word	0x004e524c

08001f50 <.text_10>:
 8001f50:	00004c4e 	.word	0x00004c4e

08001f54 <.text_11>:
 8001f54:	00004d53 	.word	0x00004d53

08001f58 <.text_12>:
 8001f58:	00444150 	.word	0x00444150

08001f5c <ai_layer_type_is_valid>:
 8001f5c:	f242 7111 	movw	r1, #10001	; 0x2711
 8001f60:	1a40      	subs	r0, r0, r1
 8001f62:	2801      	cmp	r0, #1
 8001f64:	bf81      	itttt	hi
 8001f66:	1ec0      	subhi	r0, r0, #3
 8001f68:	280d      	cmphi	r0, #13
 8001f6a:	380f      	subhi	r0, #15
 8001f6c:	2809      	cmphi	r0, #9
 8001f6e:	d801      	bhi.n	8001f74 <ai_layer_type_is_valid+0x18>
 8001f70:	2001      	movs	r0, #1
 8001f72:	4770      	bx	lr
 8001f74:	2000      	movs	r0, #0
 8001f76:	4770      	bx	lr

08001f78 <ai_layers_forward_all>:
 8001f78:	b530      	push	{r4, r5, lr}
 8001f7a:	b081      	sub	sp, #4
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001f80:	b158      	cbz	r0, 8001f9a <ai_layers_forward_all+0x22>
 8001f82:	64a0      	str	r0, [r4, #72]	; 0x48
 8001f84:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001f86:	68e9      	ldr	r1, [r5, #12]
 8001f88:	4628      	mov	r0, r5
 8001f8a:	4788      	blx	r1
 8001f8c:	68a8      	ldr	r0, [r5, #8]
 8001f8e:	42a8      	cmp	r0, r5
 8001f90:	bf08      	it	eq
 8001f92:	2000      	moveq	r0, #0
 8001f94:	2800      	cmp	r0, #0
 8001f96:	64a0      	str	r0, [r4, #72]	; 0x48
 8001f98:	d1f4      	bne.n	8001f84 <ai_layers_forward_all+0xc>
 8001f9a:	b001      	add	sp, #4
 8001f9c:	bd30      	pop	{r4, r5, pc}
	...

08001fa0 <.text_15>:
 8001fa0:	564e4f43 	.word	0x564e4f43
 8001fa4:	4432      	.short	0x4432
	...

08001fa8 <.text_16>:
 8001fa8:	534e4544 	.word	0x534e4544
 8001fac:	0045      	.short	0x0045
	...

08001fb0 <.text_17>:
 8001fb0:	4d54534c 	.word	0x4d54534c
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <.text_18>:
 8001fb8:	4d524f4e 	.word	0x4d524f4e
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <.text_19>:
 8001fc0:	4954504f 	.word	0x4954504f
 8001fc4:	455a494d 	.word	0x455a494d
 8001fc8:	4f435f44 	.word	0x4f435f44
 8001fcc:	4432564e 	.word	0x4432564e
 8001fd0:	00000000 	.word	0x00000000

08001fd4 <.text_20>:
 8001fd4:	4d524550 	.word	0x4d524550
 8001fd8:	00455455 	.word	0x00455455

08001fdc <.text_21>:
 8001fdc:	4c4f4f50 	.word	0x4c4f4f50
 8001fe0:	00000000 	.word	0x00000000

08001fe4 <.text_22>:
 8001fe4:	494c5053 	.word	0x494c5053
 8001fe8:	0054      	.short	0x0054
	...

08001fec <.text_23>:
 8001fec:	454d4954 	.word	0x454d4954
 8001ff0:	4c45445f 	.word	0x4c45445f
 8001ff4:	5941      	.short	0x5941
	...

08001ff8 <.text_24>:
 8001ff8:	454d4954 	.word	0x454d4954
 8001ffc:	5349445f 	.word	0x5349445f
 8002000:	42495254 	.word	0x42495254
 8002004:	44455455 	.word	0x44455455
 8002008:	00000000 	.word	0x00000000

0800200c <.text_25>:
 800200c:	434e4f43 	.word	0x434e4f43
 8002010:	5441      	.short	0x5441
	...

08002014 <.text_26>:
 8002014:	4d4d4547 	.word	0x4d4d4547
 8002018:	00000000 	.word	0x00000000

0800201c <.text_27>:
 800201c:	41535055 	.word	0x41535055
 8002020:	454c504d 	.word	0x454c504d
 8002024:	00000000 	.word	0x00000000

08002028 <.text_28>:
 8002028:	57544c45 	.word	0x57544c45
 800202c:	00455349 	.word	0x00455349

08002030 <.text_29>:
 8002030:	454e4547 	.word	0x454e4547
 8002034:	00434952 	.word	0x00434952

08002038 <.text_30>:
 8002038:	54534e49 	.word	0x54534e49
 800203c:	45434e41 	.word	0x45434e41
 8002040:	4d524f4e 	.word	0x4d524f4e
 8002044:	5a494c41 	.word	0x5a494c41
 8002048:	4f495441 	.word	0x4f495441
 800204c:	004e      	.short	0x004e
	...

08002050 <.text_31>:
 8002050:	43494c53 	.word	0x43494c53
 8002054:	0045      	.short	0x0045
	...

08002058 <.text_32>:
 8002058:	454c4954 	.word	0x454c4954
 800205c:	00000000 	.word	0x00000000

08002060 <.text_33>:
 8002060:	55444552 	.word	0x55444552
 8002064:	4543      	.short	0x4543
	...

08002068 <ai_check_custom_types::ref_signatures>:
 8002068:	8403 8404                                   ....

0800206c <ai_conv2d_kernel_simple_f32>:
 800206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002070:	468b      	mov	fp, r1
 8002072:	b081      	sub	sp, #4
 8002074:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002076:	4619      	mov	r1, r3
 8002078:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800207c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800207e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002084:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002086:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800208a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800208e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002092:	1ae4      	subs	r4, r4, r3
 8002094:	eba5 0709 	sub.w	r7, r5, r9
 8002098:	fb07 f708 	mul.w	r7, r7, r8
 800209c:	ebac 0009 	sub.w	r0, ip, r9
 80020a0:	9700      	str	r7, [sp, #0]
 80020a2:	fb05 f708 	mul.w	r7, r5, r8
 80020a6:	fb05 650e 	mla	r5, r5, lr, r6
 80020aa:	fb0c fc0e 	mul.w	ip, ip, lr
 80020ae:	437c      	muls	r4, r7
 80020b0:	fb08 f505 	mul.w	r5, r8, r5
 80020b4:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 80020b8:	45da      	cmp	sl, fp
 80020ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80020bc:	fb00 f008 	mul.w	r0, r0, r8
 80020c0:	fb09 f908 	mul.w	r9, r9, r8
 80020c4:	bf0c      	ite	eq
 80020c6:	ed9f 0aa8 	vldreq	s0, [pc, #672]	; 8002368 <.text_4>
 80020ca:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80020ce:	2900      	cmp	r1, #0
 80020d0:	fb08 f80c 	mul.w	r8, r8, ip
 80020d4:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80020d8:	d070      	beq.n	80021bc <ai_conv2d_kernel_simple_f32+0x150>
 80020da:	f029 0203 	bic.w	r2, r9, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	edda 0a00 	vldr	s1, [sl]
 80020e4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80020e8:	46c4      	mov	ip, r8
 80020ea:	dd5d      	ble.n	80021a8 <ai_conv2d_kernel_simple_f32+0x13c>
 80020ec:	469e      	mov	lr, r3
 80020ee:	9d00      	ldr	r5, [sp, #0]
 80020f0:	2700      	movs	r7, #0
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	f340 801e 	ble.w	8002134 <ai_conv2d_kernel_simple_f32+0xc8>
 80020f8:	ed96 4a00 	vldr	s8, [r6]
 80020fc:	1d3f      	adds	r7, r7, #4
 80020fe:	eddc 4a00 	vldr	s9, [ip]
 8002102:	ed96 3a01 	vldr	s6, [r6, #4]
 8002106:	eddc 3a01 	vldr	s7, [ip, #4]
 800210a:	ee44 0a24 	vmla.f32	s1, s8, s9
 800210e:	ed96 2a02 	vldr	s4, [r6, #8]
 8002112:	eddc 2a02 	vldr	s5, [ip, #8]
 8002116:	ee43 0a23 	vmla.f32	s1, s6, s7
 800211a:	ed96 1a03 	vldr	s2, [r6, #12]
 800211e:	3610      	adds	r6, #16
 8002120:	4297      	cmp	r7, r2
 8002122:	eddc 1a03 	vldr	s3, [ip, #12]
 8002126:	ee42 0a22 	vmla.f32	s1, s4, s5
 800212a:	f10c 0c10 	add.w	ip, ip, #16
 800212e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002132:	dbe1      	blt.n	80020f8 <ai_conv2d_kernel_simple_f32+0x8c>
 8002134:	454f      	cmp	r7, r9
 8002136:	da2f      	bge.n	8002198 <ai_conv2d_kernel_simple_f32+0x12c>
 8002138:	1c7f      	adds	r7, r7, #1
 800213a:	ed96 1a00 	vldr	s2, [r6]
 800213e:	1d36      	adds	r6, r6, #4
 8002140:	eddc 1a00 	vldr	s3, [ip]
 8002144:	454f      	cmp	r7, r9
 8002146:	ee41 0a21 	vmla.f32	s1, s2, s3
 800214a:	f10c 0c04 	add.w	ip, ip, #4
 800214e:	da23      	bge.n	8002198 <ai_conv2d_kernel_simple_f32+0x12c>
 8002150:	1c7f      	adds	r7, r7, #1
 8002152:	ed96 1a00 	vldr	s2, [r6]
 8002156:	1d36      	adds	r6, r6, #4
 8002158:	eddc 1a00 	vldr	s3, [ip]
 800215c:	454f      	cmp	r7, r9
 800215e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002162:	f10c 0c04 	add.w	ip, ip, #4
 8002166:	da17      	bge.n	8002198 <ai_conv2d_kernel_simple_f32+0x12c>
 8002168:	1c7f      	adds	r7, r7, #1
 800216a:	ed96 1a00 	vldr	s2, [r6]
 800216e:	1d36      	adds	r6, r6, #4
 8002170:	eddc 1a00 	vldr	s3, [ip]
 8002174:	454f      	cmp	r7, r9
 8002176:	ee41 0a21 	vmla.f32	s1, s2, s3
 800217a:	f10c 0c04 	add.w	ip, ip, #4
 800217e:	da0b      	bge.n	8002198 <ai_conv2d_kernel_simple_f32+0x12c>
 8002180:	1c7f      	adds	r7, r7, #1
 8002182:	ed96 1a00 	vldr	s2, [r6]
 8002186:	1d36      	adds	r6, r6, #4
 8002188:	eddc 1a00 	vldr	s3, [ip]
 800218c:	454f      	cmp	r7, r9
 800218e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002192:	f10c 0c04 	add.w	ip, ip, #4
 8002196:	dbcf      	blt.n	8002138 <ai_conv2d_kernel_simple_f32+0xcc>
 8002198:	f1be 0e01 	subs.w	lr, lr, #1
 800219c:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 80021a0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80021a4:	d1a4      	bne.n	80020f0 <ai_conv2d_kernel_simple_f32+0x84>
 80021a6:	9500      	str	r5, [sp, #0]
 80021a8:	1e49      	subs	r1, r1, #1
 80021aa:	edcb 0a00 	vstr	s1, [fp]
 80021ae:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80021b2:	f10b 0b04 	add.w	fp, fp, #4
 80021b6:	f10a 0a04 	add.w	sl, sl, #4
 80021ba:	d190      	bne.n	80020de <ai_conv2d_kernel_simple_f32+0x72>
 80021bc:	b001      	add	sp, #4
 80021be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080021c4 <ai_conv2d_kernel_depthwise_f32>:
 80021c4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80021ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80021d0:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80021d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80021d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80021d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80021da:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80021de:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80021e2:	fbba f6f6 	udiv	r6, sl, r6
 80021e6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80021ea:	eba8 0a00 	sub.w	sl, r8, r0
 80021ee:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80021f0:	fb0c fa0a 	mul.w	sl, ip, sl
 80021f4:	1b09      	subs	r1, r1, r4
 80021f6:	ebae 0c00 	sub.w	ip, lr, r0
 80021fa:	fb01 f10e 	mul.w	r1, r1, lr
 80021fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002200:	fb0e 7e09 	mla	lr, lr, r9, r7
 8002204:	eb03 078e 	add.w	r7, r3, lr, lsl #2
 8002208:	9b04      	ldr	r3, [sp, #16]
 800220a:	fb08 f809 	mul.w	r8, r8, r9
 800220e:	429d      	cmp	r5, r3
 8002210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002212:	bf0c      	ite	eq
 8002214:	ed9f 0a54 	vldreq	s0, [pc, #336]	; 8002368 <.text_4>
 8002218:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 800221c:	fb08 f803 	mul.w	r8, r8, r3
 8002220:	eb02 0e88 	add.w	lr, r2, r8, lsl #2
 8002224:	f04f 0800 	mov.w	r8, #0
 8002228:	eb0e 0b83 	add.w	fp, lr, r3, lsl #2
 800222c:	f8cd b000 	str.w	fp, [sp]
 8002230:	45de      	cmp	lr, fp
 8002232:	f080 8096 	bcs.w	8002362 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8002236:	950e      	str	r5, [sp, #56]	; 0x38
 8002238:	f020 0303 	bic.w	r3, r0, #3
 800223c:	9603      	str	r6, [sp, #12]
 800223e:	9a03      	ldr	r2, [sp, #12]
 8002240:	2a00      	cmp	r2, #0
 8002242:	f000 8088 	beq.w	8002356 <ai_conv2d_kernel_depthwise_f32+0x192>
 8002246:	9a04      	ldr	r2, [sp, #16]
 8002248:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800224a:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800224e:	9a03      	ldr	r2, [sp, #12]
 8002250:	9415      	str	r4, [sp, #84]	; 0x54
 8002252:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8002256:	9102      	str	r1, [sp, #8]
 8002258:	f8cd e004 	str.w	lr, [sp, #4]
 800225c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800225e:	edd5 0a00 	vldr	s1, [r5]
 8002262:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800226a:	2900      	cmp	r1, #0
 800226c:	dd63      	ble.n	8002336 <ai_conv2d_kernel_depthwise_f32+0x172>
 800226e:	2400      	movs	r4, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	dd26      	ble.n	80022c2 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8002274:	f8dd 603c 	ldr.w	r6, [sp, #60]	; 0x3c
 8002278:	ed97 1a00 	vldr	s2, [r7]
 800227c:	1d24      	adds	r4, r4, #4
 800227e:	edde 1a00 	vldr	s3, [lr]
 8002282:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8002286:	ee41 0a21 	vmla.f32	s1, s2, s3
 800228a:	ed97 2a01 	vldr	s4, [r7, #4]
 800228e:	ed97 1a02 	vldr	s2, [r7, #8]
 8002292:	edde 2a00 	vldr	s5, [lr]
 8002296:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 800229a:	ee42 0a22 	vmla.f32	s1, s4, s5
 800229e:	ed97 2a03 	vldr	s4, [r7, #12]
 80022a2:	3710      	adds	r7, #16
 80022a4:	429c      	cmp	r4, r3
 80022a6:	edde 1a00 	vldr	s3, [lr]
 80022aa:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80022ae:	ee41 0a21 	vmla.f32	s1, s2, s3
 80022b2:	edde 2a00 	vldr	s5, [lr]
 80022b6:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80022ba:	ee42 0a22 	vmla.f32	s1, s4, s5
 80022be:	dbdb      	blt.n	8002278 <ai_conv2d_kernel_depthwise_f32+0xb4>
 80022c0:	960f      	str	r6, [sp, #60]	; 0x3c
 80022c2:	4284      	cmp	r4, r0
 80022c4:	da31      	bge.n	800232a <ai_conv2d_kernel_depthwise_f32+0x166>
 80022c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80022c8:	1c64      	adds	r4, r4, #1
 80022ca:	ed97 1a00 	vldr	s2, [r7]
 80022ce:	1d3f      	adds	r7, r7, #4
 80022d0:	edde 1a00 	vldr	s3, [lr]
 80022d4:	4284      	cmp	r4, r0
 80022d6:	ee41 0a21 	vmla.f32	s1, s2, s3
 80022da:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80022de:	da23      	bge.n	8002328 <ai_conv2d_kernel_depthwise_f32+0x164>
 80022e0:	1c64      	adds	r4, r4, #1
 80022e2:	ed97 1a00 	vldr	s2, [r7]
 80022e6:	1d3f      	adds	r7, r7, #4
 80022e8:	edde 1a00 	vldr	s3, [lr]
 80022ec:	4284      	cmp	r4, r0
 80022ee:	ee41 0a21 	vmla.f32	s1, s2, s3
 80022f2:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80022f6:	da17      	bge.n	8002328 <ai_conv2d_kernel_depthwise_f32+0x164>
 80022f8:	1c64      	adds	r4, r4, #1
 80022fa:	ed97 1a00 	vldr	s2, [r7]
 80022fe:	1d3f      	adds	r7, r7, #4
 8002300:	edde 1a00 	vldr	s3, [lr]
 8002304:	4284      	cmp	r4, r0
 8002306:	ee41 0a21 	vmla.f32	s1, s2, s3
 800230a:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 800230e:	da0b      	bge.n	8002328 <ai_conv2d_kernel_depthwise_f32+0x164>
 8002310:	1c64      	adds	r4, r4, #1
 8002312:	ed97 1a00 	vldr	s2, [r7]
 8002316:	1d3f      	adds	r7, r7, #4
 8002318:	edde 1a00 	vldr	s3, [lr]
 800231c:	4284      	cmp	r4, r0
 800231e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002322:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8002326:	dbcf      	blt.n	80022c8 <ai_conv2d_kernel_depthwise_f32+0x104>
 8002328:	960f      	str	r6, [sp, #60]	; 0x3c
 800232a:	1e49      	subs	r1, r1, #1
 800232c:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8002330:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8002334:	d19b      	bne.n	800226e <ai_conv2d_kernel_depthwise_f32+0xaa>
 8002336:	1d2d      	adds	r5, r5, #4
 8002338:	1e52      	subs	r2, r2, #1
 800233a:	9902      	ldr	r1, [sp, #8]
 800233c:	edc9 0a00 	vstr	s1, [r9]
 8002340:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8002344:	f108 0801 	add.w	r8, r8, #1
 8002348:	f109 0904 	add.w	r9, r9, #4
 800234c:	d186      	bne.n	800225c <ai_conv2d_kernel_depthwise_f32+0x98>
 800234e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002350:	9902      	ldr	r1, [sp, #8]
 8002352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002356:	9a00      	ldr	r2, [sp, #0]
 8002358:	f10e 0e04 	add.w	lr, lr, #4
 800235c:	4596      	cmp	lr, r2
 800235e:	f4ff af6e 	bcc.w	800223e <ai_conv2d_kernel_depthwise_f32+0x7a>
 8002362:	b005      	add	sp, #20
 8002364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002368 <.text_4>:
 8002368:	00000000 	.word	0x00000000

0800236c <ai_conv2d_kernel_group_f32>:
 800236c:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002370:	b085      	sub	sp, #20
 8002372:	4693      	mov	fp, r2
 8002374:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8002378:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800237a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800237c:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8002380:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8002384:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002386:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002388:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800238a:	46ca      	mov	sl, r9
 800238c:	4655      	mov	r5, sl
 800238e:	ebaa 0c04 	sub.w	ip, sl, r4
 8002392:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002394:	fb94 f6f5 	sdiv	r6, r4, r5
 8002398:	fb05 c506 	mla	r5, r5, r6, ip
 800239c:	4454      	add	r4, sl
 800239e:	1e64      	subs	r4, r4, #1
 80023a0:	fb94 f4fa 	sdiv	r4, r4, sl
 80023a4:	fb95 fcfa 	sdiv	ip, r5, sl
 80023a8:	fb0a 551c 	mls	r5, sl, ip, r5
 80023ac:	9501      	str	r5, [sp, #4]
 80023ae:	4645      	mov	r5, r8
 80023b0:	1bee      	subs	r6, r5, r7
 80023b2:	fb97 fcf5 	sdiv	ip, r7, r5
 80023b6:	fb05 6c0c 	mla	ip, r5, ip, r6
 80023ba:	fb9c f6f5 	sdiv	r6, ip, r5
 80023be:	fb05 cc16 	mls	ip, r5, r6, ip
 80023c2:	f8cd c000 	str.w	ip, [sp]
 80023c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80023ca:	fbb1 f6f2 	udiv	r6, r1, r2
 80023ce:	eba0 000c 	sub.w	r0, r0, ip
 80023d2:	4450      	add	r0, sl
 80023d4:	1e40      	subs	r0, r0, #1
 80023d6:	f8dd c000 	ldr.w	ip, [sp]
 80023da:	fb90 f0fa 	sdiv	r0, r0, sl
 80023de:	eba3 030c 	sub.w	r3, r3, ip
 80023e2:	18eb      	adds	r3, r5, r3
 80023e4:	1e5b      	subs	r3, r3, #1
 80023e6:	fb93 fcf5 	sdiv	ip, r3, r5
 80023ea:	ebae 0e0c 	sub.w	lr, lr, ip
 80023ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023f0:	9604      	str	r6, [sp, #16]
 80023f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80023f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80023f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fa:	fb01 f808 	mul.w	r8, r1, r8
 80023fe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002400:	fb06 f909 	mul.w	r9, r6, r9
 8002404:	fb00 881a 	mls	r8, r0, sl, r8
 8002408:	f8dd a018 	ldr.w	sl, [sp, #24]
 800240c:	1a09      	subs	r1, r1, r0
 800240e:	4359      	muls	r1, r3
 8002410:	eba9 0903 	sub.w	r9, r9, r3
 8002414:	fb06 f808 	mul.w	r8, r6, r8
 8002418:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800241a:	435e      	muls	r6, r3
 800241c:	fb0e fe06 	mul.w	lr, lr, r6
 8002420:	19ee      	adds	r6, r5, r7
 8002422:	1e76      	subs	r6, r6, #1
 8002424:	fb96 f5f5 	sdiv	r5, r6, r5
 8002428:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800242a:	fb06 4405 	mla	r4, r6, r5, r4
 800242e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002430:	9d05      	ldr	r5, [sp, #20]
 8002432:	435c      	muls	r4, r3
 8002434:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8002438:	f8dd a004 	ldr.w	sl, [sp, #4]
 800243c:	42ae      	cmp	r6, r5
 800243e:	9d00      	ldr	r5, [sp, #0]
 8002440:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002442:	bf0c      	ite	eq
 8002444:	ed9f 0a40 	vldreq	s0, [pc, #256]	; 8002548 <.text_6>
 8002448:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 800244c:	19ef      	adds	r7, r5, r7
 800244e:	fb06 a607 	mla	r6, r6, r7, sl
 8002452:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002454:	f04f 0a00 	mov.w	sl, #0
 8002458:	437e      	muls	r6, r7
 800245a:	eb0b 0586 	add.w	r5, fp, r6, lsl #2
 800245e:	2a00      	cmp	r2, #0
 8002460:	d06e      	beq.n	8002540 <ai_conv2d_kernel_group_f32+0x1d4>
 8002462:	9200      	str	r2, [sp, #0]
 8002464:	9a04      	ldr	r2, [sp, #16]
 8002466:	2a00      	cmp	r2, #0
 8002468:	d064      	beq.n	8002534 <ai_conv2d_kernel_group_f32+0x1c8>
 800246a:	9a05      	ldr	r2, [sp, #20]
 800246c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8002470:	f8cd c004 	str.w	ip, [sp, #4]
 8002474:	eb02 078a 	add.w	r7, r2, sl, lsl #2
 8002478:	9a04      	ldr	r2, [sp, #16]
 800247a:	f8cd e00c 	str.w	lr, [sp, #12]
 800247e:	eb0b 0b8a 	add.w	fp, fp, sl, lsl #2
 8002482:	9502      	str	r5, [sp, #8]
 8002484:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002488:	eddb 0a00 	vldr	s1, [fp]
 800248c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002490:	9d02      	ldr	r5, [sp, #8]
 8002492:	f1be 0f01 	cmp.w	lr, #1
 8002496:	db3b      	blt.n	8002510 <ai_conv2d_kernel_group_f32+0x1a4>
 8002498:	2801      	cmp	r0, #1
 800249a:	db32      	blt.n	8002502 <ai_conv2d_kernel_group_f32+0x196>
 800249c:	ea4f 0c00 	mov.w	ip, r0
 80024a0:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80024a4:	42b5      	cmp	r5, r6
 80024a6:	d227      	bcs.n	80024f8 <ai_conv2d_kernel_group_f32+0x18c>
 80024a8:	ed94 1a00 	vldr	s2, [r4]
 80024ac:	1d24      	adds	r4, r4, #4
 80024ae:	edd5 1a00 	vldr	s3, [r5]
 80024b2:	1d2d      	adds	r5, r5, #4
 80024b4:	42b5      	cmp	r5, r6
 80024b6:	ee41 0a21 	vmla.f32	s1, s2, s3
 80024ba:	d21d      	bcs.n	80024f8 <ai_conv2d_kernel_group_f32+0x18c>
 80024bc:	ed94 2a00 	vldr	s4, [r4]
 80024c0:	1d24      	adds	r4, r4, #4
 80024c2:	ed95 1a00 	vldr	s2, [r5]
 80024c6:	1d2d      	adds	r5, r5, #4
 80024c8:	42b5      	cmp	r5, r6
 80024ca:	ee42 0a01 	vmla.f32	s1, s4, s2
 80024ce:	d213      	bcs.n	80024f8 <ai_conv2d_kernel_group_f32+0x18c>
 80024d0:	edd4 1a00 	vldr	s3, [r4]
 80024d4:	1d24      	adds	r4, r4, #4
 80024d6:	ed95 2a00 	vldr	s4, [r5]
 80024da:	1d2d      	adds	r5, r5, #4
 80024dc:	42b5      	cmp	r5, r6
 80024de:	ee41 0a82 	vmla.f32	s1, s3, s4
 80024e2:	d209      	bcs.n	80024f8 <ai_conv2d_kernel_group_f32+0x18c>
 80024e4:	ed94 1a00 	vldr	s2, [r4]
 80024e8:	1d24      	adds	r4, r4, #4
 80024ea:	edd5 1a00 	vldr	s3, [r5]
 80024ee:	1d2d      	adds	r5, r5, #4
 80024f0:	42b5      	cmp	r5, r6
 80024f2:	ee41 0a21 	vmla.f32	s1, s2, s3
 80024f6:	d3d7      	bcc.n	80024a8 <ai_conv2d_kernel_group_f32+0x13c>
 80024f8:	f1bc 0c01 	subs.w	ip, ip, #1
 80024fc:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8002500:	d1ce      	bne.n	80024a0 <ai_conv2d_kernel_group_f32+0x134>
 8002502:	f1be 0e01 	subs.w	lr, lr, #1
 8002506:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800250a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800250e:	d1c3      	bne.n	8002498 <ai_conv2d_kernel_group_f32+0x12c>
 8002510:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002514:	edc7 0a00 	vstr	s1, [r7]
 8002518:	1d3f      	adds	r7, r7, #4
 800251a:	1e52      	subs	r2, r2, #1
 800251c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8002520:	f10a 0a01 	add.w	sl, sl, #1
 8002524:	f10b 0b04 	add.w	fp, fp, #4
 8002528:	d1ac      	bne.n	8002484 <ai_conv2d_kernel_group_f32+0x118>
 800252a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800252e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002532:	9d02      	ldr	r5, [sp, #8]
 8002534:	9f00      	ldr	r7, [sp, #0]
 8002536:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800253a:	1e7f      	subs	r7, r7, #1
 800253c:	9700      	str	r7, [sp, #0]
 800253e:	d191      	bne.n	8002464 <ai_conv2d_kernel_group_f32+0xf8>
 8002540:	b007      	add	sp, #28
 8002542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002548 <.text_6>:
 8002548:	00000000 	.word	0x00000000

0800254c <ai_conv2d_kernel_f32>:
 800254c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b090      	sub	sp, #64	; 0x40
 8002552:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002554:	b901      	cbnz	r1, 8002558 <ai_conv2d_kernel_f32+0xc>
 8002556:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002558:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800255a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800255c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800255e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8002560:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8002564:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 8002568:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 800256c:	1ba4      	subs	r4, r4, r6
 800256e:	1bed      	subs	r5, r5, r7
 8002570:	900f      	str	r0, [sp, #60]	; 0x3c
 8002572:	f1be 0f01 	cmp.w	lr, #1
 8002576:	920e      	str	r2, [sp, #56]	; 0x38
 8002578:	930d      	str	r3, [sp, #52]	; 0x34
 800257a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800257c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800257e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002580:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8002584:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8002588:	bf04      	itt	eq
 800258a:	fb1c fb08 	smulbbeq	fp, ip, r8
 800258e:	f1bb 0f01 	cmpeq.w	fp, #1
 8002592:	d114      	bne.n	80025be <ai_conv2d_kernel_f32+0x72>
 8002594:	9303      	str	r3, [sp, #12]
 8002596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002598:	9202      	str	r2, [sp, #8]
 800259a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800259c:	9001      	str	r0, [sp, #4]
 800259e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80025a0:	9100      	str	r1, [sp, #0]
 80025a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80025a4:	9409      	str	r4, [sp, #36]	; 0x24
 80025a6:	9608      	str	r6, [sp, #32]
 80025a8:	9507      	str	r5, [sp, #28]
 80025aa:	9706      	str	r7, [sp, #24]
 80025ac:	f8cd a014 	str.w	sl, [sp, #20]
 80025b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80025b4:	f7ff fd5a 	bl	800206c <ai_conv2d_kernel_simple_f32>
 80025b8:	b011      	add	sp, #68	; 0x44
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025be:	4586      	cmp	lr, r0
 80025c0:	bf04      	itt	eq
 80025c2:	fb1c fb08 	smulbbeq	fp, ip, r8
 80025c6:	f1bb 0f01 	cmpeq.w	fp, #1
 80025ca:	d114      	bne.n	80025f6 <ai_conv2d_kernel_f32+0xaa>
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025d0:	9202      	str	r2, [sp, #8]
 80025d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025d4:	9001      	str	r0, [sp, #4]
 80025d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80025d8:	9100      	str	r1, [sp, #0]
 80025da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80025dc:	9409      	str	r4, [sp, #36]	; 0x24
 80025de:	9608      	str	r6, [sp, #32]
 80025e0:	9507      	str	r5, [sp, #28]
 80025e2:	9706      	str	r7, [sp, #24]
 80025e4:	f8cd a014 	str.w	sl, [sp, #20]
 80025e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80025ec:	f7ff fdea 	bl	80021c4 <ai_conv2d_kernel_depthwise_f32>
 80025f0:	b011      	add	sp, #68	; 0x44
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025fa:	9202      	str	r2, [sp, #8]
 80025fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025fe:	9001      	str	r0, [sp, #4]
 8002600:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002602:	9100      	str	r1, [sp, #0]
 8002604:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002606:	940c      	str	r4, [sp, #48]	; 0x30
 8002608:	960b      	str	r6, [sp, #44]	; 0x2c
 800260a:	950a      	str	r5, [sp, #40]	; 0x28
 800260c:	9709      	str	r7, [sp, #36]	; 0x24
 800260e:	f8cd e020 	str.w	lr, [sp, #32]
 8002612:	f8cd a01c 	str.w	sl, [sp, #28]
 8002616:	f8cd 9018 	str.w	r9, [sp, #24]
 800261a:	f8cd 8014 	str.w	r8, [sp, #20]
 800261e:	f8cd c010 	str.w	ip, [sp, #16]
 8002622:	f7ff fea3 	bl	800236c <ai_conv2d_kernel_group_f32>
 8002626:	b011      	add	sp, #68	; 0x44
 8002628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800262c <ai_conv2d_stripe_f32>:
 800262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	b091      	sub	sp, #68	; 0x44
 8002632:	4604      	mov	r4, r0
 8002634:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002636:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800263a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800263e:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8002640:	2d00      	cmp	r5, #0
 8002642:	fb08 b606 	mla	r6, r8, r6, fp
 8002646:	9601      	str	r6, [sp, #4]
 8002648:	d060      	beq.n	800270c <ai_conv2d_stripe_f32+0xe0>
 800264a:	9500      	str	r5, [sp, #0]
 800264c:	4625      	mov	r5, r4
 800264e:	9102      	str	r1, [sp, #8]
 8002650:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002652:	920e      	str	r2, [sp, #56]	; 0x38
 8002654:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8002656:	930d      	str	r3, [sp, #52]	; 0x34
 8002658:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800265c:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8002660:	950f      	str	r5, [sp, #60]	; 0x3c
 8002662:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8002666:	971a      	str	r7, [sp, #104]	; 0x68
 8002668:	9821      	ldr	r0, [sp, #132]	; 0x84
 800266a:	9420      	str	r4, [sp, #128]	; 0x80
 800266c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800266e:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8002672:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8002676:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 800267a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800267c:	931f      	str	r3, [sp, #124]	; 0x7c
 800267e:	9d02      	ldr	r5, [sp, #8]
 8002680:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 8002684:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8002686:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 800268a:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800268e:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 8002692:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 8002696:	f8dd a004 	ldr.w	sl, [sp, #4]
 800269a:	9c00      	ldr	r4, [sp, #0]
 800269c:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80026a0:	f1db 0000 	rsbs	r0, fp, #0
 80026a4:	eba8 010b 	sub.w	r1, r8, fp
 80026a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80026aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026ac:	9209      	str	r2, [sp, #36]	; 0x24
 80026ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80026b0:	bfd8      	it	le
 80026b2:	2000      	movle	r0, #0
 80026b4:	4549      	cmp	r1, r9
 80026b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80026b8:	9308      	str	r3, [sp, #32]
 80026ba:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 80026be:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80026c2:	4450      	add	r0, sl
 80026c4:	bf28      	it	cs
 80026c6:	4649      	movcs	r1, r9
 80026c8:	910c      	str	r1, [sp, #48]	; 0x30
 80026ca:	9924      	ldr	r1, [sp, #144]	; 0x90
 80026cc:	910a      	str	r1, [sp, #40]	; 0x28
 80026ce:	9920      	ldr	r1, [sp, #128]	; 0x80
 80026d0:	9107      	str	r1, [sp, #28]
 80026d2:	4370      	muls	r0, r6
 80026d4:	9206      	str	r2, [sp, #24]
 80026d6:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80026da:	9305      	str	r3, [sp, #20]
 80026dc:	eb0e 0280 	add.w	r2, lr, r0, lsl #2
 80026e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80026e4:	9104      	str	r1, [sp, #16]
 80026e6:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 80026ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ee:	4629      	mov	r1, r5
 80026f0:	9702      	str	r7, [sp, #8]
 80026f2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80026f6:	9601      	str	r6, [sp, #4]
 80026f8:	f8cd c000 	str.w	ip, [sp]
 80026fc:	f7ff ff26 	bl	800254c <ai_conv2d_kernel_f32>
 8002700:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8002704:	1e64      	subs	r4, r4, #1
 8002706:	448b      	add	fp, r1
 8002708:	448a      	add	sl, r1
 800270a:	d1c9      	bne.n	80026a0 <ai_conv2d_stripe_f32+0x74>
 800270c:	b011      	add	sp, #68	; 0x44
 800270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002712 <func_dummy>:
 8002712:	4770      	bx	lr

08002714 <ai_dict8_dot_array_f32>:
 8002714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	9805      	ldr	r0, [sp, #20]
 800271a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800271e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8002a84 <.text_12>
 8002722:	3d20      	subs	r5, #32
 8002724:	2808      	cmp	r0, #8
 8002726:	d22e      	bcs.n	8002786 <ai_dict8_dot_array_f32+0x72>
 8002728:	3520      	adds	r5, #32
 800272a:	42ab      	cmp	r3, r5
 800272c:	d224      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 800272e:	7808      	ldrb	r0, [r1, #0]
 8002730:	ed93 1a00 	vldr	s2, [r3]
 8002734:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002738:	1d18      	adds	r0, r3, #4
 800273a:	42a8      	cmp	r0, r5
 800273c:	edd6 0a00 	vldr	s1, [r6]
 8002740:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002744:	d218      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 8002746:	784b      	ldrb	r3, [r1, #1]
 8002748:	ed90 1a00 	vldr	s2, [r0]
 800274c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8002750:	1d00      	adds	r0, r0, #4
 8002752:	42a8      	cmp	r0, r5
 8002754:	edd6 0a00 	vldr	s1, [r6]
 8002758:	ee00 0a81 	vmla.f32	s0, s1, s2
 800275c:	d20c      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 800275e:	788b      	ldrb	r3, [r1, #2]
 8002760:	1cc9      	adds	r1, r1, #3
 8002762:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8002766:	1d03      	adds	r3, r0, #4
 8002768:	42ab      	cmp	r3, r5
 800276a:	ed90 1a00 	vldr	s2, [r0]
 800276e:	edd6 0a00 	vldr	s1, [r6]
 8002772:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002776:	d3da      	bcc.n	800272e <ai_dict8_dot_array_f32+0x1a>
 8002778:	edd4 1a00 	vldr	s3, [r4]
 800277c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002780:	ed84 0a00 	vstr	s0, [r4]
 8002784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002786:	f001 0003 	and.w	r0, r1, #3
 800278a:	2803      	cmp	r0, #3
 800278c:	d8f4      	bhi.n	8002778 <ai_dict8_dot_array_f32+0x64>
 800278e:	e8df f000 	tbb	[pc, r0]
 8002792:	3503      	.short	0x3503
 8002794:	4b40      	.short	0x4b40
 8002796:	e7ef      	b.n	8002778 <ai_dict8_dot_array_f32+0x64>
 8002798:	429d      	cmp	r5, r3
 800279a:	f080 80d4 	bcs.w	8002946 <ai_dict8_dot_array_f32+0x232>
 800279e:	3520      	adds	r5, #32
 80027a0:	42ab      	cmp	r3, r5
 80027a2:	d2e9      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 80027a4:	780e      	ldrb	r6, [r1, #0]
 80027a6:	1d18      	adds	r0, r3, #4
 80027a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80027ac:	42a8      	cmp	r0, r5
 80027ae:	ed93 1a00 	vldr	s2, [r3]
 80027b2:	edd7 0a00 	vldr	s1, [r7]
 80027b6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80027ba:	d2dd      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 80027bc:	784b      	ldrb	r3, [r1, #1]
 80027be:	ed90 1a00 	vldr	s2, [r0]
 80027c2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80027c6:	1d00      	adds	r0, r0, #4
 80027c8:	42a8      	cmp	r0, r5
 80027ca:	edd6 0a00 	vldr	s1, [r6]
 80027ce:	ee00 0a81 	vmla.f32	s0, s1, s2
 80027d2:	d2d1      	bcs.n	8002778 <ai_dict8_dot_array_f32+0x64>
 80027d4:	788b      	ldrb	r3, [r1, #2]
 80027d6:	1cc9      	adds	r1, r1, #3
 80027d8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80027dc:	1d03      	adds	r3, r0, #4
 80027de:	42ab      	cmp	r3, r5
 80027e0:	ed90 1a00 	vldr	s2, [r0]
 80027e4:	edd6 0a00 	vldr	s1, [r6]
 80027e8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80027ec:	d3da      	bcc.n	80027a4 <ai_dict8_dot_array_f32+0x90>
 80027ee:	edd4 1a00 	vldr	s3, [r4]
 80027f2:	ee31 0a80 	vadd.f32	s0, s3, s0
 80027f6:	ed84 0a00 	vstr	s0, [r4]
 80027fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fc:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002800:	ed93 1a00 	vldr	s2, [r3]
 8002804:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002808:	1d1b      	adds	r3, r3, #4
 800280a:	edd6 0a00 	vldr	s1, [r6]
 800280e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002812:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002816:	ed93 1a00 	vldr	s2, [r3]
 800281a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800281e:	1d1b      	adds	r3, r3, #4
 8002820:	edd6 0a00 	vldr	s1, [r6]
 8002824:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002828:	f811 0b01 	ldrb.w	r0, [r1], #1
 800282c:	ed93 1a00 	vldr	s2, [r3]
 8002830:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002834:	1d1b      	adds	r3, r3, #4
 8002836:	429d      	cmp	r5, r3
 8002838:	edd6 0a00 	vldr	s1, [r6]
 800283c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002840:	d34f      	bcc.n	80028e2 <ai_dict8_dot_array_f32+0x1ce>
 8002842:	78cf      	ldrb	r7, [r1, #3]
 8002844:	f891 e000 	ldrb.w	lr, [r1]
 8002848:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800284c:	788f      	ldrb	r7, [r1, #2]
 800284e:	f103 0010 	add.w	r0, r3, #16
 8002852:	ed93 4a00 	vldr	s8, [r3]
 8002856:	ed93 3a01 	vldr	s6, [r3, #4]
 800285a:	ed93 2a02 	vldr	s4, [r3, #8]
 800285e:	eddc 0a00 	vldr	s1, [ip]
 8002862:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002866:	784f      	ldrb	r7, [r1, #1]
 8002868:	ed93 1a03 	vldr	s2, [r3, #12]
 800286c:	790b      	ldrb	r3, [r1, #4]
 800286e:	eddc 1a00 	vldr	s3, [ip]
 8002872:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002876:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 800287a:	edd7 3a00 	vldr	s7, [r7]
 800287e:	794f      	ldrb	r7, [r1, #5]
 8002880:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002884:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8002888:	eddc 2a00 	vldr	s5, [ip]
 800288c:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002890:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002894:	798b      	ldrb	r3, [r1, #6]
 8002896:	ee01 0a82 	vmla.f32	s0, s3, s4
 800289a:	79cf      	ldrb	r7, [r1, #7]
 800289c:	ee00 0a81 	vmla.f32	s0, s1, s2
 80028a0:	3108      	adds	r1, #8
 80028a2:	eddc 0a00 	vldr	s1, [ip]
 80028a6:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80028aa:	ed9e 1a00 	vldr	s2, [lr]
 80028ae:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 80028b2:	ed90 4a00 	vldr	s8, [r0]
 80028b6:	f100 0310 	add.w	r3, r0, #16
 80028ba:	edd0 3a01 	vldr	s7, [r0, #4]
 80028be:	429d      	cmp	r5, r3
 80028c0:	ee00 0a84 	vmla.f32	s0, s1, s8
 80028c4:	eddc 1a00 	vldr	s3, [ip]
 80028c8:	ed90 3a02 	vldr	s6, [r0, #8]
 80028cc:	ee01 0a23 	vmla.f32	s0, s2, s7
 80028d0:	ed9e 2a00 	vldr	s4, [lr]
 80028d4:	edd0 2a03 	vldr	s5, [r0, #12]
 80028d8:	ee01 0a83 	vmla.f32	s0, s3, s6
 80028dc:	ee02 0a22 	vmla.f32	s0, s4, s5
 80028e0:	d2af      	bcs.n	8002842 <ai_dict8_dot_array_f32+0x12e>
 80028e2:	3520      	adds	r5, #32
 80028e4:	42ab      	cmp	r3, r5
 80028e6:	f4bf af47 	bcs.w	8002778 <ai_dict8_dot_array_f32+0x64>
 80028ea:	7808      	ldrb	r0, [r1, #0]
 80028ec:	ed93 1a00 	vldr	s2, [r3]
 80028f0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80028f4:	1d18      	adds	r0, r3, #4
 80028f6:	42a8      	cmp	r0, r5
 80028f8:	edd6 0a00 	vldr	s1, [r6]
 80028fc:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002900:	f4bf af3a 	bcs.w	8002778 <ai_dict8_dot_array_f32+0x64>
 8002904:	784b      	ldrb	r3, [r1, #1]
 8002906:	ed90 1a00 	vldr	s2, [r0]
 800290a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800290e:	1d00      	adds	r0, r0, #4
 8002910:	42a8      	cmp	r0, r5
 8002912:	edd6 0a00 	vldr	s1, [r6]
 8002916:	ee00 0a81 	vmla.f32	s0, s1, s2
 800291a:	f4bf af2d 	bcs.w	8002778 <ai_dict8_dot_array_f32+0x64>
 800291e:	788b      	ldrb	r3, [r1, #2]
 8002920:	1cc9      	adds	r1, r1, #3
 8002922:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8002926:	1d03      	adds	r3, r0, #4
 8002928:	42ab      	cmp	r3, r5
 800292a:	ed90 1a00 	vldr	s2, [r0]
 800292e:	edd6 0a00 	vldr	s1, [r6]
 8002932:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002936:	d3d8      	bcc.n	80028ea <ai_dict8_dot_array_f32+0x1d6>
 8002938:	edd4 1a00 	vldr	s3, [r4]
 800293c:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002940:	ed84 0a00 	vstr	s0, [r4]
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002946:	78cf      	ldrb	r7, [r1, #3]
 8002948:	f891 e000 	ldrb.w	lr, [r1]
 800294c:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002950:	788f      	ldrb	r7, [r1, #2]
 8002952:	f103 0010 	add.w	r0, r3, #16
 8002956:	ed93 4a00 	vldr	s8, [r3]
 800295a:	ed93 3a01 	vldr	s6, [r3, #4]
 800295e:	ed93 2a02 	vldr	s4, [r3, #8]
 8002962:	eddc 0a00 	vldr	s1, [ip]
 8002966:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800296a:	784f      	ldrb	r7, [r1, #1]
 800296c:	ed93 1a03 	vldr	s2, [r3, #12]
 8002970:	790b      	ldrb	r3, [r1, #4]
 8002972:	eddc 1a00 	vldr	s3, [ip]
 8002976:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800297a:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 800297e:	edd7 3a00 	vldr	s7, [r7]
 8002982:	794f      	ldrb	r7, [r1, #5]
 8002984:	ee03 0a84 	vmla.f32	s0, s7, s8
 8002988:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800298c:	eddc 2a00 	vldr	s5, [ip]
 8002990:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002994:	ee02 0a83 	vmla.f32	s0, s5, s6
 8002998:	798b      	ldrb	r3, [r1, #6]
 800299a:	ee01 0a82 	vmla.f32	s0, s3, s4
 800299e:	79cf      	ldrb	r7, [r1, #7]
 80029a0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80029a4:	3108      	adds	r1, #8
 80029a6:	eddc 0a00 	vldr	s1, [ip]
 80029aa:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80029ae:	ed9e 1a00 	vldr	s2, [lr]
 80029b2:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 80029b6:	ed90 4a00 	vldr	s8, [r0]
 80029ba:	f100 0310 	add.w	r3, r0, #16
 80029be:	edd0 3a01 	vldr	s7, [r0, #4]
 80029c2:	429d      	cmp	r5, r3
 80029c4:	ee00 0a84 	vmla.f32	s0, s1, s8
 80029c8:	eddc 1a00 	vldr	s3, [ip]
 80029cc:	ed90 3a02 	vldr	s6, [r0, #8]
 80029d0:	ee01 0a23 	vmla.f32	s0, s2, s7
 80029d4:	ed9e 2a00 	vldr	s4, [lr]
 80029d8:	edd0 2a03 	vldr	s5, [r0, #12]
 80029dc:	ee01 0a83 	vmla.f32	s0, s3, s6
 80029e0:	ee02 0a22 	vmla.f32	s0, s4, s5
 80029e4:	d2af      	bcs.n	8002946 <ai_dict8_dot_array_f32+0x232>
 80029e6:	e6da      	b.n	800279e <ai_dict8_dot_array_f32+0x8a>

080029e8 <ai_dict4_dot_array_f32>:
 80029e8:	b4f0      	push	{r4, r5, r6, r7}
 80029ea:	9c04      	ldr	r4, [sp, #16]
 80029ec:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002a84 <.text_12>
 80029f0:	0865      	lsrs	r5, r4, #1
 80029f2:	006d      	lsls	r5, r5, #1
 80029f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80029f8:	42ab      	cmp	r3, r5
 80029fa:	d22f      	bcs.n	8002a5c <ai_dict4_dot_array_f32+0x74>
 80029fc:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002a00:	ed93 2a00 	vldr	s4, [r3]
 8002a04:	ed93 1a01 	vldr	s2, [r3, #4]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	f006 070f 	and.w	r7, r6, #15
 8002a0e:	0936      	lsrs	r6, r6, #4
 8002a10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002a14:	42ab      	cmp	r3, r5
 8002a16:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002a1a:	edd6 1a00 	vldr	s3, [r6]
 8002a1e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002a22:	eddc 0a00 	vldr	s1, [ip]
 8002a26:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002a2a:	d217      	bcs.n	8002a5c <ai_dict4_dot_array_f32+0x74>
 8002a2c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002a30:	ed93 2a00 	vldr	s4, [r3]
 8002a34:	ed93 1a01 	vldr	s2, [r3, #4]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	f006 070f 	and.w	r7, r6, #15
 8002a3e:	0936      	lsrs	r6, r6, #4
 8002a40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002a44:	42ab      	cmp	r3, r5
 8002a46:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8002a4a:	edd6 1a00 	vldr	s3, [r6]
 8002a4e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002a52:	eddc 0a00 	vldr	s1, [ip]
 8002a56:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002a5a:	d3cf      	bcc.n	80029fc <ai_dict4_dot_array_f32+0x14>
 8002a5c:	07e4      	lsls	r4, r4, #31
 8002a5e:	d509      	bpl.n	8002a74 <ai_dict4_dot_array_f32+0x8c>
 8002a60:	7809      	ldrb	r1, [r1, #0]
 8002a62:	ed93 1a00 	vldr	s2, [r3]
 8002a66:	0909      	lsrs	r1, r1, #4
 8002a68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002a6c:	edd2 0a00 	vldr	s1, [r2]
 8002a70:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002a74:	edd0 1a00 	vldr	s3, [r0]
 8002a78:	ee31 0a80 	vadd.f32	s0, s3, s0
 8002a7c:	ed80 0a00 	vstr	s0, [r0]
 8002a80:	bcf0      	pop	{r4, r5, r6, r7}
 8002a82:	4770      	bx	lr

08002a84 <.text_12>:
 8002a84:	00000000 	.word	0x00000000

08002a88 <ai_dict_decompress_f32>:
 8002a88:	b4f0      	push	{r4, r5, r6, r7}
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	9805      	ldr	r0, [sp, #20]
 8002a90:	9e04      	ldr	r6, [sp, #16]
 8002a92:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002a96:	d003      	beq.n	8002aa0 <ai_dict_decompress_f32+0x18>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d03f      	beq.n	8002b1c <ai_dict_decompress_f32+0x94>
 8002a9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	42ac      	cmp	r4, r5
 8002aa2:	d25a      	bcs.n	8002b5a <ai_dict_decompress_f32+0xd2>
 8002aa4:	0870      	lsrs	r0, r6, #1
 8002aa6:	d02f      	beq.n	8002b08 <ai_dict_decompress_f32+0x80>
 8002aa8:	07c3      	lsls	r3, r0, #31
 8002aaa:	d50d      	bpl.n	8002ac8 <ai_dict_decompress_f32+0x40>
 8002aac:	780f      	ldrb	r7, [r1, #0]
 8002aae:	093f      	lsrs	r7, r7, #4
 8002ab0:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8002ab4:	f8c4 c000 	str.w	ip, [r4]
 8002ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002ac4:	6067      	str	r7, [r4, #4]
 8002ac6:	3408      	adds	r4, #8
 8002ac8:	0840      	lsrs	r0, r0, #1
 8002aca:	d01d      	beq.n	8002b08 <ai_dict_decompress_f32+0x80>
 8002acc:	780b      	ldrb	r3, [r1, #0]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002ad4:	6027      	str	r7, [r4, #0]
 8002ad6:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002ada:	f00c 0c0f 	and.w	ip, ip, #15
 8002ade:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8002ae2:	6063      	str	r3, [r4, #4]
 8002ae4:	f104 0308 	add.w	r3, r4, #8
 8002ae8:	780c      	ldrb	r4, [r1, #0]
 8002aea:	0924      	lsrs	r4, r4, #4
 8002aec:	1e40      	subs	r0, r0, #1
 8002aee:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8002af2:	601f      	str	r7, [r3, #0]
 8002af4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002af8:	f00c 0c0f 	and.w	ip, ip, #15
 8002afc:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8002b00:	605c      	str	r4, [r3, #4]
 8002b02:	f103 0408 	add.w	r4, r3, #8
 8002b06:	d1e1      	bne.n	8002acc <ai_dict_decompress_f32+0x44>
 8002b08:	07f0      	lsls	r0, r6, #31
 8002b0a:	d5c9      	bpl.n	8002aa0 <ai_dict_decompress_f32+0x18>
 8002b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002b16:	f844 7b04 	str.w	r7, [r4], #4
 8002b1a:	e7c1      	b.n	8002aa0 <ai_dict_decompress_f32+0x18>
 8002b1c:	42ac      	cmp	r4, r5
 8002b1e:	d21c      	bcs.n	8002b5a <ai_dict_decompress_f32+0xd2>
 8002b20:	7808      	ldrb	r0, [r1, #0]
 8002b22:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002b26:	1d20      	adds	r0, r4, #4
 8002b28:	42a8      	cmp	r0, r5
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	bf3f      	itttt	cc
 8002b2e:	784c      	ldrbcc	r4, [r1, #1]
 8002b30:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8002b34:	f840 3b04 	strcc.w	r3, [r0], #4
 8002b38:	42a8      	cmpcc	r0, r5
 8002b3a:	d20e      	bcs.n	8002b5a <ai_dict_decompress_f32+0xd2>
 8002b3c:	788c      	ldrb	r4, [r1, #2]
 8002b3e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002b42:	f840 3b04 	str.w	r3, [r0], #4
 8002b46:	42a8      	cmp	r0, r5
 8002b48:	d207      	bcs.n	8002b5a <ai_dict_decompress_f32+0xd2>
 8002b4a:	78cc      	ldrb	r4, [r1, #3]
 8002b4c:	1d09      	adds	r1, r1, #4
 8002b4e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002b52:	1d04      	adds	r4, r0, #4
 8002b54:	42ac      	cmp	r4, r5
 8002b56:	6003      	str	r3, [r0, #0]
 8002b58:	d3e2      	bcc.n	8002b20 <ai_dict_decompress_f32+0x98>
 8002b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b5c:	4770      	bx	lr

08002b5e <forward_conv2d>:
 8002b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b62:	b0a7      	sub	sp, #156	; 0x9c
 8002b64:	4605      	mov	r5, r0
 8002b66:	6968      	ldr	r0, [r5, #20]
 8002b68:	6800      	ldr	r0, [r0, #0]
 8002b6a:	68c2      	ldr	r2, [r0, #12]
 8002b6c:	6801      	ldr	r1, [r0, #0]
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	6982      	ldr	r2, [r0, #24]
 8002b72:	8c00      	ldrh	r0, [r0, #32]
 8002b74:	680c      	ldr	r4, [r1, #0]
 8002b76:	f8d2 b000 	ldr.w	fp, [r2]
 8002b7a:	2801      	cmp	r0, #1
 8002b7c:	6890      	ldr	r0, [r2, #8]
 8002b7e:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8002b82:	bfcc      	ite	gt
 8002b84:	6851      	ldrgt	r1, [r2, #4]
 8002b86:	2100      	movle	r1, #0
 8002b88:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8002b8c:	689e      	ldr	r6, [r3, #8]
 8002b8e:	9603      	str	r6, [sp, #12]
 8002b90:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8002b94:	68df      	ldr	r7, [r3, #12]
 8002b96:	9715      	str	r7, [sp, #84]	; 0x54
 8002b98:	6926      	ldr	r6, [r4, #16]
 8002b9a:	961a      	str	r6, [sp, #104]	; 0x68
 8002b9c:	68e7      	ldr	r7, [r4, #12]
 8002b9e:	9721      	str	r7, [sp, #132]	; 0x84
 8002ba0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002ba2:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8002ba6:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8002ba8:	9720      	str	r7, [sp, #128]	; 0x80
 8002baa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002bac:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8002bae:	6817      	ldr	r7, [r2, #0]
 8002bb0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8002bb4:	9619      	str	r6, [sp, #100]	; 0x64
 8002bb6:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
 8002bba:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8002bbe:	f8db 600c 	ldr.w	r6, [fp, #12]
 8002bc2:	9614      	str	r6, [sp, #80]	; 0x50
 8002bc4:	f8db e008 	ldr.w	lr, [fp, #8]
 8002bc8:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8002bcc:	69ae      	ldr	r6, [r5, #24]
 8002bce:	961f      	str	r6, [sp, #124]	; 0x7c
 8002bd0:	6824      	ldr	r4, [r4, #0]
 8002bd2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8002bd6:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8002bda:	f8db 6000 	ldr.w	r6, [fp]
 8002bde:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8002be2:	b119      	cbz	r1, 8002bec <forward_conv2d+0x8e>
 8002be4:	680a      	ldr	r2, [r1, #0]
 8002be6:	6894      	ldr	r4, [r2, #8]
 8002be8:	9417      	str	r4, [sp, #92]	; 0x5c
 8002bea:	e001      	b.n	8002bf0 <forward_conv2d+0x92>
 8002bec:	2600      	movs	r6, #0
 8002bee:	9617      	str	r6, [sp, #92]	; 0x5c
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	6893      	ldr	r3, [r2, #8]
 8002bf4:	9302      	str	r3, [sp, #8]
 8002bf6:	69e9      	ldr	r1, [r5, #28]
 8002bf8:	b158      	cbz	r0, 8002c12 <forward_conv2d+0xb4>
 8002bfa:	6803      	ldr	r3, [r0, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	9212      	str	r2, [sp, #72]	; 0x48
 8002c00:	921c      	str	r2, [sp, #112]	; 0x70
 8002c02:	69c6      	ldr	r6, [r0, #28]
 8002c04:	9624      	str	r6, [sp, #144]	; 0x90
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	f002 fead 	bl	8005968 <ai_array_get_byte_size>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	e00a      	b.n	8002c28 <forward_conv2d+0xca>
 8002c12:	b119      	cbz	r1, 8002c1c <forward_conv2d+0xbe>
 8002c14:	6889      	ldr	r1, [r1, #8]
 8002c16:	9112      	str	r1, [sp, #72]	; 0x48
 8002c18:	911c      	str	r1, [sp, #112]	; 0x70
 8002c1a:	e002      	b.n	8002c22 <forward_conv2d+0xc4>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9312      	str	r3, [sp, #72]	; 0x48
 8002c20:	931c      	str	r3, [sp, #112]	; 0x70
 8002c22:	2200      	movs	r2, #0
 8002c24:	2401      	movs	r4, #1
 8002c26:	9224      	str	r2, [sp, #144]	; 0x90
 8002c28:	6a28      	ldr	r0, [r5, #32]
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	bf12      	itee	ne
 8002c2e:	9023      	strne	r0, [sp, #140]	; 0x8c
 8002c30:	f8df 1c14 	ldreq.w	r1, [pc, #3092]	; 8003848 <.text_22>
 8002c34:	9123      	streq	r1, [sp, #140]	; 0x8c
 8002c36:	a818      	add	r0, sp, #96	; 0x60
 8002c38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002c3a:	8803      	ldrh	r3, [r0, #0]
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	1e51      	subs	r1, r2, #1
 8002c40:	1e5b      	subs	r3, r3, #1
 8002c42:	fb03 2201 	mla	r2, r3, r1, r2
 8002c46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002c48:	9216      	str	r2, [sp, #88]	; 0x58
 8002c4a:	aa19      	add	r2, sp, #100	; 0x64
 8002c4c:	8813      	ldrh	r3, [r2, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	1e48      	subs	r0, r1, #1
 8002c52:	1e5b      	subs	r3, r3, #1
 8002c54:	fb03 1100 	mla	r1, r3, r0, r1
 8002c58:	911d      	str	r1, [sp, #116]	; 0x74
 8002c5a:	f8db 1000 	ldr.w	r1, [fp]
 8002c5e:	6808      	ldr	r0, [r1, #0]
 8002c60:	11c3      	asrs	r3, r0, #7
 8002c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c66:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8002c6a:	1440      	asrs	r0, r0, #17
 8002c6c:	f000 000f 	and.w	r0, r0, #15
 8002c70:	f00c 0c03 	and.w	ip, ip, #3
 8002c74:	2804      	cmp	r0, #4
 8002c76:	fa23 f30c 	lsr.w	r3, r3, ip
 8002c7a:	bf14      	ite	ne
 8002c7c:	2808      	cmpne	r0, #8
 8002c7e:	68ca      	ldreq	r2, [r1, #12]
 8002c80:	b1ba      	cbz	r2, 8002cb2 <forward_conv2d+0x154>
 8002c82:	6968      	ldr	r0, [r5, #20]
 8002c84:	f8d0 c000 	ldr.w	ip, [r0]
 8002c88:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
 8002c8c:	f8de 0000 	ldr.w	r0, [lr]
 8002c90:	b108      	cbz	r0, 8002c96 <forward_conv2d+0x138>
 8002c92:	6806      	ldr	r6, [r0, #0]
 8002c94:	68b6      	ldr	r6, [r6, #8]
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8002c9c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002ca0:	f8cd e000 	str.w	lr, [sp]
 8002ca4:	f8cd c004 	str.w	ip, [sp, #4]
 8002ca8:	6889      	ldr	r1, [r1, #8]
 8002caa:	4630      	mov	r0, r6
 8002cac:	f7ff feec 	bl	8002a88 <ai_dict_decompress_f32>
 8002cb0:	b906      	cbnz	r6, 8002cb4 <forward_conv2d+0x156>
 8002cb2:	464e      	mov	r6, r9
 8002cb4:	b2bf      	uxth	r7, r7
 8002cb6:	427f      	negs	r7, r7
 8002cb8:	f1ba 0f00 	cmp.w	sl, #0
 8002cbc:	d062      	beq.n	8002d84 <forward_conv2d+0x226>
 8002cbe:	f1c8 0800 	rsb	r8, r8, #0
 8002cc2:	4652      	mov	r2, sl
 8002cc4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8002cc8:	9d02      	ldr	r5, [sp, #8]
 8002cca:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002cce:	9626      	str	r6, [sp, #152]	; 0x98
 8002cd0:	9711      	str	r7, [sp, #68]	; 0x44
 8002cd2:	9222      	str	r2, [sp, #136]	; 0x88
 8002cd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002cd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002cda:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8002cdc:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002cde:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8002ce0:	4249      	negs	r1, r1
 8002ce2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ce4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8002ce6:	970d      	str	r7, [sp, #52]	; 0x34
 8002ce8:	9008      	str	r0, [sp, #32]
 8002cea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002cec:	bfd8      	it	le
 8002cee:	2100      	movle	r1, #0
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	9109      	str	r1, [sp, #36]	; 0x24
 8002cf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002cf6:	42b2      	cmp	r2, r6
 8002cf8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8002cfc:	9005      	str	r0, [sp, #20]
 8002cfe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002d00:	f8cd a008 	str.w	sl, [sp, #8]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	9107      	str	r1, [sp, #28]
 8002d08:	bf28      	it	cs
 8002d0a:	4632      	movcs	r2, r6
 8002d0c:	920a      	str	r2, [sp, #40]	; 0x28
 8002d0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d12:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8002d14:	9206      	str	r2, [sp, #24]
 8002d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d18:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002d1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8002d1e:	b236      	sxth	r6, r6
 8002d20:	9104      	str	r1, [sp, #16]
 8002d22:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002d24:	9203      	str	r2, [sp, #12]
 8002d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002d2a:	9001      	str	r0, [sp, #4]
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	960e      	str	r6, [sp, #56]	; 0x38
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7ff fc7a 	bl	800262c <ai_conv2d_stripe_f32>
 8002d38:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002d3a:	b1d8      	cbz	r0, 8002d74 <forward_conv2d+0x216>
 8002d3c:	4683      	mov	fp, r0
 8002d3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002d40:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8002d42:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8002d46:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002d4a:	4633      	mov	r3, r6
 8002d4c:	4652      	mov	r2, sl
 8002d4e:	4629      	mov	r1, r5
 8002d50:	4628      	mov	r0, r5
 8002d52:	47c8      	blx	r9
 8002d54:	4446      	add	r6, r8
 8002d56:	1bf0      	subs	r0, r6, r7
 8002d58:	42a0      	cmp	r0, r4
 8002d5a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8002d5e:	bfa8      	it	ge
 8002d60:	463e      	movge	r6, r7
 8002d62:	f1bb 0b01 	subs.w	fp, fp, #1
 8002d66:	d1f0      	bne.n	8002d4a <forward_conv2d+0x1ec>
 8002d68:	9612      	str	r6, [sp, #72]	; 0x48
 8002d6a:	971c      	str	r7, [sp, #112]	; 0x70
 8002d6c:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8002d70:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d76:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002d78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002d7a:	18cb      	adds	r3, r1, r3
 8002d7c:	9311      	str	r3, [sp, #68]	; 0x44
 8002d7e:	1e52      	subs	r2, r2, #1
 8002d80:	9222      	str	r2, [sp, #136]	; 0x88
 8002d82:	d1a7      	bne.n	8002cd4 <forward_conv2d+0x176>
 8002d84:	b027      	add	sp, #156	; 0x9c
 8002d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002d8c <forward_conv2d_nl_pool>:
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	b0b9      	sub	sp, #228	; 0xe4
 8002d92:	4607      	mov	r7, r0
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	6800      	ldr	r0, [r0, #0]
 8002d98:	68c2      	ldr	r2, [r0, #12]
 8002d9a:	6801      	ldr	r1, [r0, #0]
 8002d9c:	6816      	ldr	r6, [r2, #0]
 8002d9e:	6982      	ldr	r2, [r0, #24]
 8002da0:	8c00      	ldrh	r0, [r0, #32]
 8002da2:	680b      	ldr	r3, [r1, #0]
 8002da4:	f8d2 b000 	ldr.w	fp, [r2]
 8002da8:	2801      	cmp	r0, #1
 8002daa:	6890      	ldr	r0, [r2, #8]
 8002dac:	689c      	ldr	r4, [r3, #8]
 8002dae:	bfcc      	ite	gt
 8002db0:	6851      	ldrgt	r1, [r2, #4]
 8002db2:	2100      	movle	r1, #0
 8002db4:	9424      	str	r4, [sp, #144]	; 0x90
 8002db6:	68b5      	ldr	r5, [r6, #8]
 8002db8:	9502      	str	r5, [sp, #8]
 8002dba:	6934      	ldr	r4, [r6, #16]
 8002dbc:	9423      	str	r4, [sp, #140]	; 0x8c
 8002dbe:	68f5      	ldr	r5, [r6, #12]
 8002dc0:	9522      	str	r5, [sp, #136]	; 0x88
 8002dc2:	691c      	ldr	r4, [r3, #16]
 8002dc4:	941c      	str	r4, [sp, #112]	; 0x70
 8002dc6:	68dd      	ldr	r5, [r3, #12]
 8002dc8:	952e      	str	r5, [sp, #184]	; 0xb8
 8002dca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002dcc:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 8002dd0:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8002dd2:	9521      	str	r5, [sp, #132]	; 0x84
 8002dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd6:	69bd      	ldr	r5, [r7, #24]
 8002dd8:	f8b2 8000 	ldrh.w	r8, [r2]
 8002ddc:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8002de0:	6894      	ldr	r4, [r2, #8]
 8002de2:	952d      	str	r5, [sp, #180]	; 0xb4
 8002de4:	f8d7 e02c 	ldr.w	lr, [r7, #44]	; 0x2c
 8002de8:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
 8002dec:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8002dee:	951f      	str	r5, [sp, #124]	; 0x7c
 8002df0:	f8db e008 	ldr.w	lr, [fp, #8]
 8002df4:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8002df8:	f8db 500c 	ldr.w	r5, [fp, #12]
 8002dfc:	951a      	str	r5, [sp, #104]	; 0x68
 8002dfe:	f8d7 e03c 	ldr.w	lr, [r7, #60]	; 0x3c
 8002e02:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8002e06:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8002e08:	952b      	str	r5, [sp, #172]	; 0xac
 8002e0a:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
 8002e0e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8002e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e14:	6815      	ldr	r5, [r2, #0]
 8002e16:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8002e1a:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8002e1e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8002e22:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002e2c:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 8002e30:	f8db a000 	ldr.w	sl, [fp]
 8002e34:	f8da a008 	ldr.w	sl, [sl, #8]
 8002e38:	b119      	cbz	r1, 8002e42 <forward_conv2d_nl_pool+0xb6>
 8002e3a:	680a      	ldr	r2, [r1, #0]
 8002e3c:	6893      	ldr	r3, [r2, #8]
 8002e3e:	931d      	str	r3, [sp, #116]	; 0x74
 8002e40:	e003      	b.n	8002e4a <forward_conv2d_nl_pool+0xbe>
 8002e42:	f04f 0e00 	mov.w	lr, #0
 8002e46:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8002e4a:	69f9      	ldr	r1, [r7, #28]
 8002e4c:	b158      	cbz	r0, 8002e66 <forward_conv2d_nl_pool+0xda>
 8002e4e:	6803      	ldr	r3, [r0, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	9218      	str	r2, [sp, #96]	; 0x60
 8002e54:	9210      	str	r2, [sp, #64]	; 0x40
 8002e56:	69c0      	ldr	r0, [r0, #28]
 8002e58:	9015      	str	r0, [sp, #84]	; 0x54
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	f002 fd83 	bl	8005968 <ai_array_get_byte_size>
 8002e62:	9014      	str	r0, [sp, #80]	; 0x50
 8002e64:	e00b      	b.n	8002e7e <forward_conv2d_nl_pool+0xf2>
 8002e66:	b119      	cbz	r1, 8002e70 <forward_conv2d_nl_pool+0xe4>
 8002e68:	6889      	ldr	r1, [r1, #8]
 8002e6a:	9118      	str	r1, [sp, #96]	; 0x60
 8002e6c:	9110      	str	r1, [sp, #64]	; 0x40
 8002e6e:	e002      	b.n	8002e76 <forward_conv2d_nl_pool+0xea>
 8002e70:	2300      	movs	r3, #0
 8002e72:	9318      	str	r3, [sp, #96]	; 0x60
 8002e74:	9310      	str	r3, [sp, #64]	; 0x40
 8002e76:	2200      	movs	r2, #0
 8002e78:	2301      	movs	r3, #1
 8002e7a:	9215      	str	r2, [sp, #84]	; 0x54
 8002e7c:	9314      	str	r3, [sp, #80]	; 0x50
 8002e7e:	6a38      	ldr	r0, [r7, #32]
 8002e80:	2800      	cmp	r0, #0
 8002e82:	bf12      	itee	ne
 8002e84:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002e86:	f8df 19c0 	ldreq.w	r1, [pc, #2496]	; 8003848 <.text_22>
 8002e8a:	9130      	streq	r1, [sp, #192]	; 0xc0
 8002e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e8e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002e90:	9228      	str	r2, [sp, #160]	; 0xa0
 8002e92:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e94:	8813      	ldrh	r3, [r2, #0]
 8002e96:	1e41      	subs	r1, r0, #1
 8002e98:	1e5b      	subs	r3, r3, #1
 8002e9a:	fb03 0001 	mla	r0, r3, r1, r0
 8002e9e:	ab20      	add	r3, sp, #128	; 0x80
 8002ea0:	f8b3 e000 	ldrh.w	lr, [r3]
 8002ea4:	9019      	str	r0, [sp, #100]	; 0x64
 8002ea6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002ea8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002eaa:	1e4a      	subs	r2, r1, #1
 8002eac:	f1ae 0e01 	sub.w	lr, lr, #1
 8002eb0:	fb0e 1102 	mla	r1, lr, r2, r1
 8002eb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002eb6:	9127      	str	r1, [sp, #156]	; 0x9c
 8002eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eba:	9112      	str	r1, [sp, #72]	; 0x48
 8002ebc:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002ebe:	1a12      	subs	r2, r2, r0
 8002ec0:	4442      	add	r2, r8
 8002ec2:	fa12 f084 	uxtah	r0, r2, r4
 8002ec6:	2400      	movs	r4, #0
 8002ec8:	fbb0 f1f1 	udiv	r1, r0, r1
 8002ecc:	1c49      	adds	r1, r1, #1
 8002ece:	2200      	movs	r2, #0
 8002ed0:	9111      	str	r1, [sp, #68]	; 0x44
 8002ed2:	f8db 1000 	ldr.w	r1, [fp]
 8002ed6:	6808      	ldr	r0, [r1, #0]
 8002ed8:	11c3      	asrs	r3, r0, #7
 8002eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ede:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8002ee2:	1440      	asrs	r0, r0, #17
 8002ee4:	f000 000f 	and.w	r0, r0, #15
 8002ee8:	f00c 0c03 	and.w	ip, ip, #3
 8002eec:	2804      	cmp	r0, #4
 8002eee:	fa23 f30c 	lsr.w	r3, r3, ip
 8002ef2:	bf14      	ite	ne
 8002ef4:	2808      	cmpne	r0, #8
 8002ef6:	68ca      	ldreq	r2, [r1, #12]
 8002ef8:	b1ca      	cbz	r2, 8002f2e <forward_conv2d_nl_pool+0x1a2>
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f8d0 c000 	ldr.w	ip, [r0]
 8002f00:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
 8002f04:	f8de 0004 	ldr.w	r0, [lr, #4]
 8002f08:	b108      	cbz	r0, 8002f0e <forward_conv2d_nl_pool+0x182>
 8002f0a:	6804      	ldr	r4, [r0, #0]
 8002f0c:	68a4      	ldr	r4, [r4, #8]
 8002f0e:	6800      	ldr	r0, [r0, #0]
 8002f10:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8002f14:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002f18:	f8cd e000 	str.w	lr, [sp]
 8002f1c:	f8cd c004 	str.w	ip, [sp, #4]
 8002f20:	6889      	ldr	r1, [r1, #8]
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff fdb0 	bl	8002a88 <ai_dict_decompress_f32>
 8002f28:	b10c      	cbz	r4, 8002f2e <forward_conv2d_nl_pool+0x1a2>
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	e000      	b.n	8002f30 <forward_conv2d_nl_pool+0x1a4>
 8002f2e:	4653      	mov	r3, sl
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	9f02      	ldr	r7, [sp, #8]
 8002f34:	f1c9 0900 	rsb	r9, r9, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8002f3e:	6830      	ldr	r0, [r6, #0]
 8002f40:	6814      	ldr	r4, [r2, #0]
 8002f42:	b22d      	sxth	r5, r5
 8002f44:	462e      	mov	r6, r5
 8002f46:	f1c8 0800 	rsb	r8, r8, #0
 8002f4a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8002f4e:	f8dc 4000 	ldr.w	r4, [ip]
 8002f52:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 8002f56:	68e2      	ldr	r2, [r4, #12]
 8002f58:	fb02 fc0c 	mul.w	ip, r2, ip
 8002f5c:	f8d4 e000 	ldr.w	lr, [r4]
 8002f60:	fb07 fc0c 	mul.w	ip, r7, ip
 8002f64:	f8de a008 	ldr.w	sl, [lr, #8]
 8002f68:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8002f6c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002f70:	f9bb e000 	ldrsh.w	lr, [fp]
 8002f74:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f78:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8002f7c:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 8002f80:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002f84:	f1b9 0f00 	cmp.w	r9, #0
 8002f88:	f8cd e0d4 	str.w	lr, [sp, #212]	; 0xd4
 8002f8c:	fb0b fc0c 	mul.w	ip, fp, ip
 8002f90:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8002f94:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 8002f98:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002f9c:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 8002fa0:	fb02 fc0c 	mul.w	ip, r2, ip
 8002fa4:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 8002fa8:	f000 8103 	beq.w	80031b2 <forward_conv2d_nl_pool+0x426>
 8002fac:	46b9      	mov	r9, r7
 8002fae:	9337      	str	r3, [sp, #220]	; 0xdc
 8002fb0:	9026      	str	r0, [sp, #152]	; 0x98
 8002fb2:	912f      	str	r1, [sp, #188]	; 0xbc
 8002fb4:	9225      	str	r2, [sp, #148]	; 0x94
 8002fb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8002fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	dd61      	ble.n	8003084 <forward_conv2d_nl_pool+0x2f8>
 8002fc0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002fc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fc6:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8002fca:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8002fcc:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 8002fd0:	4249      	negs	r1, r1
 8002fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002fd4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8002fd6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8002fda:	9008      	str	r0, [sp, #32]
 8002fdc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002fde:	bfd8      	it	le
 8002fe0:	2100      	movle	r1, #0
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	9109      	str	r1, [sp, #36]	; 0x24
 8002fe6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fe8:	4562      	cmp	r2, ip
 8002fea:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8002fee:	9005      	str	r0, [sp, #20]
 8002ff0:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002ff2:	f8cd 9008 	str.w	r9, [sp, #8]
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	9107      	str	r1, [sp, #28]
 8002ffa:	bf28      	it	cs
 8002ffc:	4662      	movcs	r2, ip
 8002ffe:	920a      	str	r2, [sp, #40]	; 0x28
 8003000:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003002:	930f      	str	r3, [sp, #60]	; 0x3c
 8003004:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 8003008:	9206      	str	r2, [sp, #24]
 800300a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800300c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800300e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003010:	930c      	str	r3, [sp, #48]	; 0x30
 8003012:	fa0f fc8c 	sxth.w	ip, ip
 8003016:	9104      	str	r1, [sp, #16]
 8003018:	991d      	ldr	r1, [sp, #116]	; 0x74
 800301a:	9203      	str	r2, [sp, #12]
 800301c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800301e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003020:	9001      	str	r0, [sp, #4]
 8003022:	9100      	str	r1, [sp, #0]
 8003024:	4651      	mov	r1, sl
 8003026:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800302a:	2000      	movs	r0, #0
 800302c:	f7ff fafe 	bl	800262c <ai_conv2d_stripe_f32>
 8003030:	9825      	ldr	r0, [sp, #148]	; 0x94
 8003032:	b328      	cbz	r0, 8003080 <forward_conv2d_nl_pool+0x2f4>
 8003034:	4683      	mov	fp, r0
 8003036:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800303a:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800303c:	4643      	mov	r3, r8
 800303e:	464a      	mov	r2, r9
 8003040:	4651      	mov	r1, sl
 8003042:	4650      	mov	r0, sl
 8003044:	47b8      	blx	r7
 8003046:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003048:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800304a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800304c:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8003050:	4480      	add	r8, r0
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	eba8 0101 	sub.w	r1, r8, r1
 8003058:	4291      	cmp	r1, r2
 800305a:	6841      	ldr	r1, [r0, #4]
 800305c:	68c0      	ldr	r0, [r0, #12]
 800305e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003062:	bfa8      	it	ge
 8003064:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8003068:	4592      	cmp	sl, r2
 800306a:	d303      	bcc.n	8003074 <forward_conv2d_nl_pool+0x2e8>
 800306c:	0089      	lsls	r1, r1, #2
 800306e:	4249      	negs	r1, r1
 8003070:	eb0a 0a01 	add.w	sl, sl, r1
 8003074:	f1bb 0b01 	subs.w	fp, fp, #1
 8003078:	d1e0      	bne.n	800303c <forward_conv2d_nl_pool+0x2b0>
 800307a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800307e:	9730      	str	r7, [sp, #192]	; 0xc0
 8003080:	1c76      	adds	r6, r6, #1
 8003082:	b236      	sxth	r6, r6
 8003084:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003086:	1e49      	subs	r1, r1, #1
 8003088:	2900      	cmp	r1, #0
 800308a:	9111      	str	r1, [sp, #68]	; 0x44
 800308c:	dc4e      	bgt.n	800312c <forward_conv2d_nl_pool+0x3a0>
 800308e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	46d0      	mov	r8, sl
 8003094:	4371      	muls	r1, r6
 8003096:	68c2      	ldr	r2, [r0, #12]
 8003098:	0089      	lsls	r1, r1, #2
 800309a:	4249      	negs	r1, r1
 800309c:	4451      	add	r1, sl
 800309e:	4291      	cmp	r1, r2
 80030a0:	bf3c      	itt	cc
 80030a2:	6843      	ldrcc	r3, [r0, #4]
 80030a4:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80030a8:	428a      	cmp	r2, r1
 80030aa:	d233      	bcs.n	8003114 <forward_conv2d_nl_pool+0x388>
 80030ac:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 80030b0:	f9bc e000 	ldrsh.w	lr, [ip]
 80030b4:	4576      	cmp	r6, lr
 80030b6:	d02d      	beq.n	8003114 <forward_conv2d_nl_pool+0x388>
 80030b8:	6847      	ldr	r7, [r0, #4]
 80030ba:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80030be:	4291      	cmp	r1, r2
 80030c0:	f080 8028 	bcs.w	8003114 <forward_conv2d_nl_pool+0x388>
 80030c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80030c8:	f84a 3b04 	str.w	r3, [sl], #4
 80030cc:	68c2      	ldr	r2, [r0, #12]
 80030ce:	6843      	ldr	r3, [r0, #4]
 80030d0:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80030d4:	4561      	cmp	r1, ip
 80030d6:	d21d      	bcs.n	8003114 <forward_conv2d_nl_pool+0x388>
 80030d8:	f851 eb04 	ldr.w	lr, [r1], #4
 80030dc:	f84a eb04 	str.w	lr, [sl], #4
 80030e0:	68c2      	ldr	r2, [r0, #12]
 80030e2:	6843      	ldr	r3, [r0, #4]
 80030e4:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80030e8:	4561      	cmp	r1, ip
 80030ea:	d213      	bcs.n	8003114 <forward_conv2d_nl_pool+0x388>
 80030ec:	f851 eb04 	ldr.w	lr, [r1], #4
 80030f0:	f84a eb04 	str.w	lr, [sl], #4
 80030f4:	68c2      	ldr	r2, [r0, #12]
 80030f6:	6843      	ldr	r3, [r0, #4]
 80030f8:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80030fc:	4561      	cmp	r1, ip
 80030fe:	d209      	bcs.n	8003114 <forward_conv2d_nl_pool+0x388>
 8003100:	f851 eb04 	ldr.w	lr, [r1], #4
 8003104:	f84a eb04 	str.w	lr, [sl], #4
 8003108:	68c2      	ldr	r2, [r0, #12]
 800310a:	6843      	ldr	r3, [r0, #4]
 800310c:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8003110:	4561      	cmp	r1, ip
 8003112:	d3d7      	bcc.n	80030c4 <forward_conv2d_nl_pool+0x338>
 8003114:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003116:	2800      	cmp	r0, #0
 8003118:	d506      	bpl.n	8003128 <forward_conv2d_nl_pool+0x39c>
 800311a:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800311c:	4650      	mov	r0, sl
 800311e:	f00c fa16 	bl	800f54e <__aeabi_memclr>
 8003122:	981e      	ldr	r0, [sp, #120]	; 0x78
 8003124:	1986      	adds	r6, r0, r6
 8003126:	b236      	sxth	r6, r6
 8003128:	9612      	str	r6, [sp, #72]	; 0x48
 800312a:	46c2      	mov	sl, r8
 800312c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800312e:	428e      	cmp	r6, r1
 8003130:	d135      	bne.n	800319e <forward_conv2d_nl_pool+0x412>
 8003132:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8003134:	2101      	movs	r1, #1
 8003136:	9107      	str	r1, [sp, #28]
 8003138:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800313a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800313c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8003140:	1c52      	adds	r2, r2, #1
 8003142:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003144:	922f      	str	r2, [sp, #188]	; 0xbc
 8003146:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003148:	b289      	uxth	r1, r1
 800314a:	b29b      	uxth	r3, r3
 800314c:	9102      	str	r1, [sp, #8]
 800314e:	1a36      	subs	r6, r6, r0
 8003150:	9826      	ldr	r0, [sp, #152]	; 0x98
 8003152:	b292      	uxth	r2, r2
 8003154:	9008      	str	r0, [sp, #32]
 8003156:	982b      	ldr	r0, [sp, #172]	; 0xac
 8003158:	9206      	str	r2, [sp, #24]
 800315a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800315c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800315e:	9305      	str	r3, [sp, #20]
 8003160:	b280      	uxth	r0, r0
 8003162:	fa1f f389 	uxth.w	r3, r9
 8003166:	9004      	str	r0, [sp, #16]
 8003168:	b2a8      	uxth	r0, r5
 800316a:	9003      	str	r0, [sp, #12]
 800316c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800316e:	b292      	uxth	r2, r2
 8003170:	b289      	uxth	r1, r1
 8003172:	9201      	str	r2, [sp, #4]
 8003174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003176:	b280      	uxth	r0, r0
 8003178:	b236      	sxth	r6, r6
 800317a:	9000      	str	r0, [sp, #0]
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	b292      	uxth	r2, r2
 8003180:	47e0      	blx	ip
 8003182:	9826      	ldr	r0, [sp, #152]	; 0x98
 8003184:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8003186:	6881      	ldr	r1, [r0, #8]
 8003188:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800318c:	6083      	str	r3, [r0, #8]
 800318e:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8003190:	1a69      	subs	r1, r5, r1
 8003192:	2900      	cmp	r1, #0
 8003194:	bfc3      	ittte	gt
 8003196:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8003198:	1a2d      	subgt	r5, r5, r0
 800319a:	b22d      	sxthgt	r5, r5
 800319c:	2500      	movle	r5, #0
 800319e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80031a0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80031a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80031a4:	1841      	adds	r1, r0, r1
 80031a6:	9117      	str	r1, [sp, #92]	; 0x5c
 80031a8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80031aa:	428a      	cmp	r2, r1
 80031ac:	f4ff af05 	bcc.w	8002fba <forward_conv2d_nl_pool+0x22e>
 80031b0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80031b2:	6821      	ldr	r1, [r4, #0]
 80031b4:	68ca      	ldr	r2, [r1, #12]
 80031b6:	608a      	str	r2, [r1, #8]
 80031b8:	68c1      	ldr	r1, [r0, #12]
 80031ba:	6081      	str	r1, [r0, #8]
 80031bc:	b039      	add	sp, #228	; 0xe4
 80031be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080031c4 <forward_dense>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	b081      	sub	sp, #4
 80031ca:	ed2d 8b02 	vpush	{d8}
 80031ce:	b088      	sub	sp, #32
 80031d0:	6940      	ldr	r0, [r0, #20]
 80031d2:	6800      	ldr	r0, [r0, #0]
 80031d4:	6801      	ldr	r1, [r0, #0]
 80031d6:	680a      	ldr	r2, [r1, #0]
 80031d8:	6981      	ldr	r1, [r0, #24]
 80031da:	68c3      	ldr	r3, [r0, #12]
 80031dc:	8c00      	ldrh	r0, [r0, #32]
 80031de:	2802      	cmp	r0, #2
 80031e0:	f8d1 e000 	ldr.w	lr, [r1]
 80031e4:	6894      	ldr	r4, [r2, #8]
 80031e6:	681f      	ldr	r7, [r3, #0]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	bfac      	ite	ge
 80031ec:	684b      	ldrge	r3, [r1, #4]
 80031ee:	2300      	movlt	r3, #0
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	f8de 9000 	ldr.w	r9, [lr]
 80031f6:	6938      	ldr	r0, [r7, #16]
 80031f8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80031fc:	683f      	ldr	r7, [r7, #0]
 80031fe:	f8d9 5000 	ldr.w	r5, [r9]
 8003202:	4341      	muls	r1, r0
 8003204:	68bf      	ldr	r7, [r7, #8]
 8003206:	2000      	movs	r0, #0
 8003208:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800320c:	156e      	asrs	r6, r5, #21
 800320e:	146d      	asrs	r5, r5, #17
 8003210:	f005 050f 	and.w	r5, r5, #15
 8003214:	2d04      	cmp	r5, #4
 8003216:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 800321a:	f006 0603 	and.w	r6, r6, #3
 800321e:	fa28 f806 	lsr.w	r8, r8, r6
 8003222:	bf14      	ite	ne
 8003224:	2d08      	cmpne	r5, #8
 8003226:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 800322a:	2900      	cmp	r1, #0
 800322c:	6895      	ldr	r5, [r2, #8]
 800322e:	f8de 9018 	ldr.w	r9, [lr, #24]
 8003232:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8003236:	f000 80ef 	beq.w	8003418 <forward_dense+0x254>
 800323a:	f8cd e01c 	str.w	lr, [sp, #28]
 800323e:	9305      	str	r3, [sp, #20]
 8003240:	f8cd c018 	str.w	ip, [sp, #24]
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9104      	str	r1, [sp, #16]
 8003248:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800324c:	9905      	ldr	r1, [sp, #20]
 800324e:	f8de 3000 	ldr.w	r3, [lr]
 8003252:	2900      	cmp	r1, #0
 8003254:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8003258:	bf1a      	itte	ne
 800325a:	680b      	ldrne	r3, [r1, #0]
 800325c:	689a      	ldrne	r2, [r3, #8]
 800325e:	2200      	moveq	r2, #0
 8003260:	2800      	cmp	r0, #0
 8003262:	9b01      	ldr	r3, [sp, #4]
 8003264:	f040 80aa 	bne.w	80033bc <forward_dense+0x1f8>
 8003268:	429f      	cmp	r7, r3
 800326a:	f080 80c8 	bcs.w	80033fe <forward_dense+0x23a>
 800326e:	9003      	str	r0, [sp, #12]
 8003270:	2a00      	cmp	r2, #0
 8003272:	4620      	mov	r0, r4
 8003274:	46ae      	mov	lr, r5
 8003276:	46dc      	mov	ip, fp
 8003278:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8003424 <.text_17>
 800327c:	bf0e      	itee	eq
 800327e:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 8003424 <.text_17>
 8003282:	ed92 0a00 	vldrne	s0, [r2]
 8003286:	1d12      	addne	r2, r2, #4
 8003288:	2c04      	cmp	r4, #4
 800328a:	d35c      	bcc.n	8003346 <forward_dense+0x182>
 800328c:	08a1      	lsrs	r1, r4, #2
 800328e:	07ce      	lsls	r6, r1, #31
 8003290:	d51c      	bpl.n	80032cc <forward_dense+0x108>
 8003292:	ed9c 4a00 	vldr	s8, [ip]
 8003296:	1f00      	subs	r0, r0, #4
 8003298:	edde 4a00 	vldr	s9, [lr]
 800329c:	ed9c 3a01 	vldr	s6, [ip, #4]
 80032a0:	edde 3a01 	vldr	s7, [lr, #4]
 80032a4:	ee44 0a24 	vmla.f32	s1, s8, s9
 80032a8:	ed9c 2a02 	vldr	s4, [ip, #8]
 80032ac:	edde 2a02 	vldr	s5, [lr, #8]
 80032b0:	ee43 0a23 	vmla.f32	s1, s6, s7
 80032b4:	ed9c 1a03 	vldr	s2, [ip, #12]
 80032b8:	f10c 0c10 	add.w	ip, ip, #16
 80032bc:	edde 1a03 	vldr	s3, [lr, #12]
 80032c0:	f10e 0e10 	add.w	lr, lr, #16
 80032c4:	ee42 0a22 	vmla.f32	s1, s4, s5
 80032c8:	ee41 0a21 	vmla.f32	s1, s2, s3
 80032cc:	0849      	lsrs	r1, r1, #1
 80032ce:	d03a      	beq.n	8003346 <forward_dense+0x182>
 80032d0:	ed9c 1a03 	vldr	s2, [ip, #12]
 80032d4:	3808      	subs	r0, #8
 80032d6:	edde 1a03 	vldr	s3, [lr, #12]
 80032da:	1e49      	subs	r1, r1, #1
 80032dc:	ed9c 2a02 	vldr	s4, [ip, #8]
 80032e0:	edde 2a02 	vldr	s5, [lr, #8]
 80032e4:	ed9c 3a01 	vldr	s6, [ip, #4]
 80032e8:	edde 3a01 	vldr	s7, [lr, #4]
 80032ec:	ed9c 4a00 	vldr	s8, [ip]
 80032f0:	f10c 0c10 	add.w	ip, ip, #16
 80032f4:	edde 4a00 	vldr	s9, [lr]
 80032f8:	f10e 0e10 	add.w	lr, lr, #16
 80032fc:	ee44 0a24 	vmla.f32	s1, s8, s9
 8003300:	ee43 0a23 	vmla.f32	s1, s6, s7
 8003304:	ee42 0a22 	vmla.f32	s1, s4, s5
 8003308:	ed9c 8a00 	vldr	s16, [ip]
 800330c:	edde 8a00 	vldr	s17, [lr]
 8003310:	ee41 0a21 	vmla.f32	s1, s2, s3
 8003314:	ed9c 7a01 	vldr	s14, [ip, #4]
 8003318:	edde 7a01 	vldr	s15, [lr, #4]
 800331c:	ee48 0a28 	vmla.f32	s1, s16, s17
 8003320:	ed9c 6a02 	vldr	s12, [ip, #8]
 8003324:	edde 6a02 	vldr	s13, [lr, #8]
 8003328:	ee47 0a27 	vmla.f32	s1, s14, s15
 800332c:	ed9c 5a03 	vldr	s10, [ip, #12]
 8003330:	f10c 0c10 	add.w	ip, ip, #16
 8003334:	edde 5a03 	vldr	s11, [lr, #12]
 8003338:	f10e 0e10 	add.w	lr, lr, #16
 800333c:	ee46 0a26 	vmla.f32	s1, s12, s13
 8003340:	ee45 0a25 	vmla.f32	s1, s10, s11
 8003344:	d1c4      	bne.n	80032d0 <forward_dense+0x10c>
 8003346:	b378      	cbz	r0, 80033a8 <forward_dense+0x1e4>
 8003348:	f010 0103 	ands.w	r1, r0, #3
 800334c:	d00b      	beq.n	8003366 <forward_dense+0x1a2>
 800334e:	1e49      	subs	r1, r1, #1
 8003350:	ed9c 1a00 	vldr	s2, [ip]
 8003354:	edde 1a00 	vldr	s3, [lr]
 8003358:	f10e 0e04 	add.w	lr, lr, #4
 800335c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8003360:	f10c 0c04 	add.w	ip, ip, #4
 8003364:	d1f3      	bne.n	800334e <forward_dense+0x18a>
 8003366:	0880      	lsrs	r0, r0, #2
 8003368:	f000 801e 	beq.w	80033a8 <forward_dense+0x1e4>
 800336c:	ed9c 2a00 	vldr	s4, [ip]
 8003370:	1e40      	subs	r0, r0, #1
 8003372:	ed9e 1a00 	vldr	s2, [lr]
 8003376:	eddc 1a01 	vldr	s3, [ip, #4]
 800337a:	edde 2a01 	vldr	s5, [lr, #4]
 800337e:	ee42 0a01 	vmla.f32	s1, s4, s2
 8003382:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8003386:	ed9c 2a02 	vldr	s4, [ip, #8]
 800338a:	ed9e 1a02 	vldr	s2, [lr, #8]
 800338e:	eddc 1a03 	vldr	s3, [ip, #12]
 8003392:	f10c 0c10 	add.w	ip, ip, #16
 8003396:	edde 2a03 	vldr	s5, [lr, #12]
 800339a:	f10e 0e10 	add.w	lr, lr, #16
 800339e:	ee42 0a01 	vmla.f32	s1, s4, s2
 80033a2:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80033a6:	d1e1      	bne.n	800336c <forward_dense+0x1a8>
 80033a8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80033ac:	44cb      	add	fp, r9
 80033ae:	ed87 0a00 	vstr	s0, [r7]
 80033b2:	1d3f      	adds	r7, r7, #4
 80033b4:	429f      	cmp	r7, r3
 80033b6:	f4ff af5b 	bcc.w	8003270 <forward_dense+0xac>
 80033ba:	e01f      	b.n	80033fc <forward_dense+0x238>
 80033bc:	429f      	cmp	r7, r3
 80033be:	d21e      	bcs.n	80033fe <forward_dense+0x23a>
 80033c0:	469a      	mov	sl, r3
 80033c2:	9003      	str	r0, [sp, #12]
 80033c4:	4616      	mov	r6, r2
 80033c6:	2e00      	cmp	r6, #0
 80033c8:	a802      	add	r0, sp, #8
 80033ca:	bf19      	ittee	ne
 80033cc:	f856 1b04 	ldrne.w	r1, [r6], #4
 80033d0:	9102      	strne	r1, [sp, #8]
 80033d2:	2300      	moveq	r3, #0
 80033d4:	9302      	streq	r3, [sp, #8]
 80033d6:	f1b8 0f04 	cmp.w	r8, #4
 80033da:	9400      	str	r4, [sp, #0]
 80033dc:	462b      	mov	r3, r5
 80033de:	9a03      	ldr	r2, [sp, #12]
 80033e0:	4659      	mov	r1, fp
 80033e2:	d103      	bne.n	80033ec <forward_dense+0x228>
 80033e4:	f7ff fb00 	bl	80029e8 <ai_dict4_dot_array_f32>
 80033e8:	e002      	b.n	80033f0 <forward_dense+0x22c>
 80033ea:	bf00      	nop
 80033ec:	f7ff f992 	bl	8002714 <ai_dict8_dot_array_f32>
 80033f0:	9802      	ldr	r0, [sp, #8]
 80033f2:	44cb      	add	fp, r9
 80033f4:	f847 0b04 	str.w	r0, [r7], #4
 80033f8:	4557      	cmp	r7, sl
 80033fa:	d3e4      	bcc.n	80033c6 <forward_dense+0x202>
 80033fc:	9803      	ldr	r0, [sp, #12]
 80033fe:	9a01      	ldr	r2, [sp, #4]
 8003400:	9b06      	ldr	r3, [sp, #24]
 8003402:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8003406:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800340a:	9a04      	ldr	r2, [sp, #16]
 800340c:	f8cd e004 	str.w	lr, [sp, #4]
 8003410:	1e52      	subs	r2, r2, #1
 8003412:	9204      	str	r2, [sp, #16]
 8003414:	f47f af18 	bne.w	8003248 <forward_dense+0x84>
 8003418:	b008      	add	sp, #32
 800341a:	ecbd 8b02 	vpop	{d8}
 800341e:	b001      	add	sp, #4
 8003420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003424 <.text_17>:
 8003424:	00000000 	.word	0x00000000

08003428 <arm_mat_gemm_f32>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	4615      	mov	r5, r2
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	469b      	mov	fp, r3
 8003432:	6842      	ldr	r2, [r0, #4]
 8003434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003436:	9203      	str	r2, [sp, #12]
 8003438:	460f      	mov	r7, r1
 800343a:	686c      	ldr	r4, [r5, #4]
 800343c:	9400      	str	r4, [sp, #0]
 800343e:	8804      	ldrh	r4, [r0, #0]
 8003440:	8839      	ldrh	r1, [r7, #0]
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8003448:	8840      	ldrh	r0, [r0, #2]
 800344a:	f8b5 e000 	ldrh.w	lr, [r5]
 800344e:	886e      	ldrh	r6, [r5, #2]
 8003450:	2500      	movs	r5, #0
 8003452:	f8b3 c000 	ldrh.w	ip, [r3]
 8003456:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800345a:	fa4f f38b 	sxtb.w	r3, fp
 800345e:	2b00      	cmp	r3, #0
 8003460:	687f      	ldr	r7, [r7, #4]
 8003462:	9706      	str	r7, [sp, #24]
 8003464:	9705      	str	r7, [sp, #20]
 8003466:	bf0c      	ite	eq
 8003468:	46a0      	moveq	r8, r4
 800346a:	4680      	movne	r8, r0
 800346c:	2e01      	cmp	r6, #1
 800346e:	bf0c      	ite	eq
 8003470:	2300      	moveq	r3, #0
 8003472:	2304      	movne	r3, #4
 8003474:	f1be 0f01 	cmp.w	lr, #1
 8003478:	d104      	bne.n	8003484 <arm_mat_gemm_f32+0x5c>
 800347a:	2e01      	cmp	r6, #1
 800347c:	d007      	beq.n	800348e <arm_mat_gemm_f32+0x66>
 800347e:	f1ca 0e00 	rsb	lr, sl, #0
 8003482:	e005      	b.n	8003490 <arm_mat_gemm_f32+0x68>
 8003484:	2e01      	cmp	r6, #1
 8003486:	bf08      	it	eq
 8003488:	f04f 0e01 	moveq.w	lr, #1
 800348c:	d000      	beq.n	8003490 <arm_mat_gemm_f32+0x68>
 800348e:	46ae      	mov	lr, r5
 8003490:	fa4f f78b 	sxtb.w	r7, fp
 8003494:	fa0f fe8e 	sxth.w	lr, lr
 8003498:	2f00      	cmp	r7, #0
 800349a:	f8cd e010 	str.w	lr, [sp, #16]
 800349e:	bf0c      	ite	eq
 80034a0:	4627      	moveq	r7, r4
 80034a2:	4607      	movne	r7, r0
 80034a4:	4567      	cmp	r7, ip
 80034a6:	d117      	bne.n	80034d8 <arm_mat_gemm_f32+0xb0>
 80034a8:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 80034ac:	f1be 0f00 	cmp.w	lr, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	9201      	streq	r2, [sp, #4]
 80034b4:	9101      	strne	r1, [sp, #4]
 80034b6:	9f01      	ldr	r7, [sp, #4]
 80034b8:	4557      	cmp	r7, sl
 80034ba:	d10d      	bne.n	80034d8 <arm_mat_gemm_f32+0xb0>
 80034bc:	fa4f f78b 	sxtb.w	r7, fp
 80034c0:	2f00      	cmp	r7, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	4607      	moveq	r7, r0
 80034c6:	4627      	movne	r7, r4
 80034c8:	f1be 0f00 	cmp.w	lr, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	460e      	moveq	r6, r1
 80034d0:	4616      	movne	r6, r2
 80034d2:	42b7      	cmp	r7, r6
 80034d4:	f000 809c 	beq.w	8003610 <arm_mat_gemm_f32+0x1e8>
 80034d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80034dc:	f06f 0002 	mvn.w	r0, #2
 80034e0:	f1bc 0f00 	cmp.w	ip, #0
 80034e4:	f340 8091 	ble.w	800360a <arm_mat_gemm_f32+0x1e2>
 80034e8:	1c6d      	adds	r5, r5, #1
 80034ea:	2100      	movs	r1, #0
 80034ec:	b2aa      	uxth	r2, r5
 80034ee:	4562      	cmp	r2, ip
 80034f0:	f8c9 1000 	str.w	r1, [r9]
 80034f4:	bfbf      	itttt	lt
 80034f6:	f8c9 1004 	strlt.w	r1, [r9, #4]
 80034fa:	1c6d      	addlt	r5, r5, #1
 80034fc:	b2ac      	uxthlt	r4, r5
 80034fe:	4564      	cmplt	r4, ip
 8003500:	f280 8083 	bge.w	800360a <arm_mat_gemm_f32+0x1e2>
 8003504:	1c6d      	adds	r5, r5, #1
 8003506:	b2aa      	uxth	r2, r5
 8003508:	4562      	cmp	r2, ip
 800350a:	f8c9 1008 	str.w	r1, [r9, #8]
 800350e:	f280 807c 	bge.w	800360a <arm_mat_gemm_f32+0x1e2>
 8003512:	1c6d      	adds	r5, r5, #1
 8003514:	f8c9 100c 	str.w	r1, [r9, #12]
 8003518:	b2a9      	uxth	r1, r5
 800351a:	4561      	cmp	r1, ip
 800351c:	f109 0910 	add.w	r9, r9, #16
 8003520:	dbe2      	blt.n	80034e8 <arm_mat_gemm_f32+0xc0>
 8003522:	b00a      	add	sp, #40	; 0x28
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	9d06      	ldr	r5, [sp, #24]
 800352a:	0096      	lsls	r6, r2, #2
 800352c:	9608      	str	r6, [sp, #32]
 800352e:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8003532:	f8cd c00c 	str.w	ip, [sp, #12]
 8003536:	f8dd c014 	ldr.w	ip, [sp, #20]
 800353a:	f8ad 4008 	strh.w	r4, [sp, #8]
 800353e:	4644      	mov	r4, r8
 8003540:	f8cd a01c 	str.w	sl, [sp, #28]
 8003544:	fa4f fa8b 	sxtb.w	sl, fp
 8003548:	f1ba 0f00 	cmp.w	sl, #0
 800354c:	ed9f 1abd 	vldr	s2, [pc, #756]	; 8003844 <.text_21>
 8003550:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003554:	bf0c      	ite	eq
 8003556:	4682      	moveq	sl, r0
 8003558:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800355c:	f1ba 0f00 	cmp.w	sl, #0
 8003560:	f000 8019 	beq.w	8003596 <arm_mat_gemm_f32+0x16e>
 8003564:	fa4f f68b 	sxtb.w	r6, fp
 8003568:	2e00      	cmp	r6, #0
 800356a:	f1aa 0a01 	sub.w	sl, sl, #1
 800356e:	edd8 1a00 	vldr	s3, [r8]
 8003572:	ed95 2a00 	vldr	s4, [r5]
 8003576:	bf0c      	ite	eq
 8003578:	2604      	moveq	r6, #4
 800357a:	9e07      	ldrne	r6, [sp, #28]
 800357c:	f1be 0f00 	cmp.w	lr, #0
 8003580:	44b0      	add	r8, r6
 8003582:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003586:	bf0c      	ite	eq
 8003588:	9e08      	ldreq	r6, [sp, #32]
 800358a:	2604      	movne	r6, #4
 800358c:	19ad      	adds	r5, r5, r6
 800358e:	fa1f f68a 	uxth.w	r6, sl
 8003592:	2e00      	cmp	r6, #0
 8003594:	d1e6      	bne.n	8003564 <arm_mat_gemm_f32+0x13c>
 8003596:	1e64      	subs	r4, r4, #1
 8003598:	b2a4      	uxth	r4, r4
 800359a:	f1be 0f00 	cmp.w	lr, #0
 800359e:	ee20 1a01 	vmul.f32	s2, s0, s2
 80035a2:	edd7 1a00 	vldr	s3, [r7]
 80035a6:	441f      	add	r7, r3
 80035a8:	ee00 1aa1 	vmla.f32	s2, s1, s3
 80035ac:	ed89 1a00 	vstr	s2, [r9]
 80035b0:	f109 0904 	add.w	r9, r9, #4
 80035b4:	bf0e      	itee	eq
 80035b6:	1b15      	subeq	r5, r2, r4
 80035b8:	1b0d      	subne	r5, r1, r4
 80035ba:	4355      	mulne	r5, r2
 80035bc:	2c00      	cmp	r4, #0
 80035be:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80035c2:	d1bf      	bne.n	8003544 <arm_mat_gemm_f32+0x11c>
 80035c4:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80035c8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80035cc:	f8cd c014 	str.w	ip, [sp, #20]
 80035d0:	fa4f fc8b 	sxtb.w	ip, fp
 80035d4:	f1bc 0f00 	cmp.w	ip, #0
 80035d8:	9d03      	ldr	r5, [sp, #12]
 80035da:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80035de:	44d1      	add	r9, sl
 80035e0:	f8ad 9002 	strh.w	r9, [sp, #2]
 80035e4:	f8bd 9000 	ldrh.w	r9, [sp]
 80035e8:	bf0c      	ite	eq
 80035ea:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80035ee:	f04f 0c04 	movne.w	ip, #4
 80035f2:	44ac      	add	ip, r5
 80035f4:	9d04      	ldr	r5, [sp, #16]
 80035f6:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 80035fa:	f1a9 0a01 	sub.w	sl, r9, #1
 80035fe:	f8ad a000 	strh.w	sl, [sp]
 8003602:	f8bd 5000 	ldrh.w	r5, [sp]
 8003606:	b965      	cbnz	r5, 8003622 <arm_mat_gemm_f32+0x1fa>
 8003608:	2000      	movs	r0, #0
 800360a:	b00a      	add	sp, #40	; 0x28
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003610:	9f00      	ldr	r7, [sp, #0]
 8003612:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003616:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800361a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800361e:	f8ad 8000 	strh.w	r8, [sp]
 8003622:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003626:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 800362a:	f1be 0f00 	cmp.w	lr, #0
 800362e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8003632:	bf0c      	ite	eq
 8003634:	4690      	moveq	r8, r2
 8003636:	4688      	movne	r8, r1
 8003638:	e776      	b.n	8003528 <arm_mat_gemm_f32+0x100>

0800363a <forward_gemm>:
 800363a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363c:	b08b      	sub	sp, #44	; 0x2c
 800363e:	4604      	mov	r4, r0
 8003640:	6960      	ldr	r0, [r4, #20]
 8003642:	2600      	movs	r6, #0
 8003644:	2700      	movs	r7, #0
 8003646:	6800      	ldr	r0, [r0, #0]
 8003648:	8902      	ldrh	r2, [r0, #8]
 800364a:	6801      	ldr	r1, [r0, #0]
 800364c:	68c3      	ldr	r3, [r0, #12]
 800364e:	2a03      	cmp	r2, #3
 8003650:	680d      	ldr	r5, [r1, #0]
 8003652:	f8d3 c000 	ldr.w	ip, [r3]
 8003656:	d102      	bne.n	800365e <forward_gemm+0x24>
 8003658:	684e      	ldr	r6, [r1, #4]
 800365a:	688f      	ldr	r7, [r1, #8]
 800365c:	e00a      	b.n	8003674 <forward_gemm+0x3a>
 800365e:	2a02      	cmp	r2, #2
 8003660:	d103      	bne.n	800366a <forward_gemm+0x30>
 8003662:	6980      	ldr	r0, [r0, #24]
 8003664:	684e      	ldr	r6, [r1, #4]
 8003666:	6807      	ldr	r7, [r0, #0]
 8003668:	e004      	b.n	8003674 <forward_gemm+0x3a>
 800366a:	2a01      	cmp	r2, #1
 800366c:	d102      	bne.n	8003674 <forward_gemm+0x3a>
 800366e:	6980      	ldr	r0, [r0, #24]
 8003670:	6806      	ldr	r6, [r0, #0]
 8003672:	6847      	ldr	r7, [r0, #4]
 8003674:	f8dc 0000 	ldr.w	r0, [ip]
 8003678:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800367c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8003680:	6883      	ldr	r3, [r0, #8]
 8003682:	a808      	add	r0, sp, #32
 8003684:	b292      	uxth	r2, r2
 8003686:	b289      	uxth	r1, r1
 8003688:	f003 f92e 	bl	80068e8 <arm_mat_init_f32>
 800368c:	682a      	ldr	r2, [r5, #0]
 800368e:	6929      	ldr	r1, [r5, #16]
 8003690:	a806      	add	r0, sp, #24
 8003692:	6893      	ldr	r3, [r2, #8]
 8003694:	68aa      	ldr	r2, [r5, #8]
 8003696:	b289      	uxth	r1, r1
 8003698:	b292      	uxth	r2, r2
 800369a:	f003 f925 	bl	80068e8 <arm_mat_init_f32>
 800369e:	6830      	ldr	r0, [r6, #0]
 80036a0:	68b2      	ldr	r2, [r6, #8]
 80036a2:	6931      	ldr	r1, [r6, #16]
 80036a4:	6883      	ldr	r3, [r0, #8]
 80036a6:	a804      	add	r0, sp, #16
 80036a8:	b292      	uxth	r2, r2
 80036aa:	b289      	uxth	r1, r1
 80036ac:	f003 f91c 	bl	80068e8 <arm_mat_init_f32>
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	6939      	ldr	r1, [r7, #16]
 80036b6:	6883      	ldr	r3, [r0, #8]
 80036b8:	a802      	add	r0, sp, #8
 80036ba:	b292      	uxth	r2, r2
 80036bc:	b289      	uxth	r1, r1
 80036be:	f003 f913 	bl	80068e8 <arm_mat_init_f32>
 80036c2:	a808      	add	r0, sp, #32
 80036c4:	aa02      	add	r2, sp, #8
 80036c6:	9001      	str	r0, [sp, #4]
 80036c8:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 80036cc:	a806      	add	r0, sp, #24
 80036ce:	9100      	str	r1, [sp, #0]
 80036d0:	f994 3020 	ldrsb.w	r3, [r4, #32]
 80036d4:	edd4 0a07 	vldr	s1, [r4, #28]
 80036d8:	a904      	add	r1, sp, #16
 80036da:	ed94 0a06 	vldr	s0, [r4, #24]
 80036de:	f7ff fea3 	bl	8003428 <arm_mat_gemm_f32>
 80036e2:	b00b      	add	sp, #44	; 0x2c
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036e8 <forward_matmul>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	b08b      	sub	sp, #44	; 0x2c
 80036ee:	6940      	ldr	r0, [r0, #20]
 80036f0:	6801      	ldr	r1, [r0, #0]
 80036f2:	680a      	ldr	r2, [r1, #0]
 80036f4:	6810      	ldr	r0, [r2, #0]
 80036f6:	6857      	ldr	r7, [r2, #4]
 80036f8:	68ca      	ldr	r2, [r1, #12]
 80036fa:	6814      	ldr	r4, [r2, #0]
 80036fc:	b90f      	cbnz	r7, 8003702 <forward_matmul+0x1a>
 80036fe:	6989      	ldr	r1, [r1, #24]
 8003700:	680f      	ldr	r7, [r1, #0]
 8003702:	68a2      	ldr	r2, [r4, #8]
 8003704:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8003708:	687d      	ldr	r5, [r7, #4]
 800370a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800370e:	68c1      	ldr	r1, [r0, #12]
 8003710:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003714:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8003718:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800371c:	f8cd 9018 	str.w	r9, [sp, #24]
 8003720:	6906      	ldr	r6, [r0, #16]
 8003722:	6824      	ldr	r4, [r4, #0]
 8003724:	fb01 fa0e 	mul.w	sl, r1, lr
 8003728:	434e      	muls	r6, r1
 800372a:	68a3      	ldr	r3, [r4, #8]
 800372c:	2a00      	cmp	r2, #0
 800372e:	fb0e f606 	mul.w	r6, lr, r6
 8003732:	960a      	str	r6, [sp, #40]	; 0x28
 8003734:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003738:	fb08 f909 	mul.w	r9, r8, r9
 800373c:	fb08 f805 	mul.w	r8, r8, r5
 8003740:	fb05 f909 	mul.w	r9, r5, r9
 8003744:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003748:	d078      	beq.n	800383c <forward_matmul+0x154>
 800374a:	2400      	movs	r4, #0
 800374c:	46a1      	mov	r9, r4
 800374e:	9202      	str	r2, [sp, #8]
 8003750:	9a06      	ldr	r2, [sp, #24]
 8003752:	2a00      	cmp	r2, #0
 8003754:	d068      	beq.n	8003828 <forward_matmul+0x140>
 8003756:	2600      	movs	r6, #0
 8003758:	9600      	str	r6, [sp, #0]
 800375a:	9a06      	ldr	r2, [sp, #24]
 800375c:	f8cd a014 	str.w	sl, [sp, #20]
 8003760:	f8dd a000 	ldr.w	sl, [sp]
 8003764:	f8cd b00c 	str.w	fp, [sp, #12]
 8003768:	9201      	str	r2, [sp, #4]
 800376a:	9a03      	ldr	r2, [sp, #12]
 800376c:	2a00      	cmp	r2, #0
 800376e:	d051      	beq.n	8003814 <forward_matmul+0x12c>
 8003770:	9507      	str	r5, [sp, #28]
 8003772:	f04f 0b00 	mov.w	fp, #0
 8003776:	f8cd c010 	str.w	ip, [sp, #16]
 800377a:	9200      	str	r2, [sp, #0]
 800377c:	9a04      	ldr	r2, [sp, #16]
 800377e:	2a00      	cmp	r2, #0
 8003780:	d03e      	beq.n	8003800 <forward_matmul+0x118>
 8003782:	f04f 0c00 	mov.w	ip, #0
 8003786:	9008      	str	r0, [sp, #32]
 8003788:	9808      	ldr	r0, [sp, #32]
 800378a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003844 <.text_21>
 800378e:	6806      	ldr	r6, [r0, #0]
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	68b5      	ldr	r5, [r6, #8]
 8003794:	6880      	ldr	r0, [r0, #8]
 8003796:	192d      	adds	r5, r5, r4
 8003798:	4455      	add	r5, sl
 800379a:	4465      	add	r5, ip
 800379c:	4448      	add	r0, r9
 800379e:	4458      	add	r0, fp
 80037a0:	eb00 060c 	add.w	r6, r0, ip
 80037a4:	b321      	cbz	r1, 80037f0 <forward_matmul+0x108>
 80037a6:	07c8      	lsls	r0, r1, #31
 80037a8:	d509      	bpl.n	80037be <forward_matmul+0xd6>
 80037aa:	edd5 0a00 	vldr	s1, [r5]
 80037ae:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80037b2:	ed96 1a00 	vldr	s2, [r6]
 80037b6:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80037ba:	ee00 0a81 	vmla.f32	s0, s1, s2
 80037be:	0848      	lsrs	r0, r1, #1
 80037c0:	f000 8016 	beq.w	80037f0 <forward_matmul+0x108>
 80037c4:	edd5 0a00 	vldr	s1, [r5]
 80037c8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80037cc:	ed96 1a00 	vldr	s2, [r6]
 80037d0:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80037d4:	1e40      	subs	r0, r0, #1
 80037d6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80037da:	edd5 1a00 	vldr	s3, [r5]
 80037de:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80037e2:	ed96 2a00 	vldr	s4, [r6]
 80037e6:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80037ea:	ee01 0a82 	vmla.f32	s0, s3, s4
 80037ee:	d1e9      	bne.n	80037c4 <forward_matmul+0xdc>
 80037f0:	ed83 0a00 	vstr	s0, [r3]
 80037f4:	1d1b      	adds	r3, r3, #4
 80037f6:	1e52      	subs	r2, r2, #1
 80037f8:	f10c 0c04 	add.w	ip, ip, #4
 80037fc:	d1c4      	bne.n	8003788 <forward_matmul+0xa0>
 80037fe:	9808      	ldr	r0, [sp, #32]
 8003800:	9d00      	ldr	r5, [sp, #0]
 8003802:	9a07      	ldr	r2, [sp, #28]
 8003804:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8003808:	1e6d      	subs	r5, r5, #1
 800380a:	9500      	str	r5, [sp, #0]
 800380c:	d1b6      	bne.n	800377c <forward_matmul+0x94>
 800380e:	4615      	mov	r5, r2
 8003810:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003814:	9e01      	ldr	r6, [sp, #4]
 8003816:	9a05      	ldr	r2, [sp, #20]
 8003818:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800381c:	1e76      	subs	r6, r6, #1
 800381e:	9601      	str	r6, [sp, #4]
 8003820:	d1a3      	bne.n	800376a <forward_matmul+0x82>
 8003822:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003826:	4692      	mov	sl, r2
 8003828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800382a:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800382e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003830:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003834:	9a02      	ldr	r2, [sp, #8]
 8003836:	1e52      	subs	r2, r2, #1
 8003838:	9202      	str	r2, [sp, #8]
 800383a:	d189      	bne.n	8003750 <forward_matmul+0x68>
 800383c:	b00b      	add	sp, #44	; 0x2c
 800383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003844 <.text_21>:
 8003844:	00000000 	.word	0x00000000

08003848 <.text_22>:
 8003848:	08002713 	.word	0x08002713

0800384c <nl_func_sm_channel_f32>:
 800384c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003850:	4614      	mov	r4, r2
 8003852:	460f      	mov	r7, r1
 8003854:	2c02      	cmp	r4, #2
 8003856:	4606      	mov	r6, r0
 8003858:	ed2d 8b02 	vpush	{d8}
 800385c:	ed97 8a00 	vldr	s16, [r7]
 8003860:	eddf 8ac5 	vldr	s17, [pc, #788]	; 8003b78 <.text_12>
 8003864:	d33d      	bcc.n	80038e2 <nl_func_sm_channel_f32+0x96>
 8003866:	1e61      	subs	r1, r4, #1
 8003868:	1d3a      	adds	r2, r7, #4
 800386a:	f011 0003 	ands.w	r0, r1, #3
 800386e:	d00c      	beq.n	800388a <nl_func_sm_channel_f32+0x3e>
 8003870:	ed92 0a00 	vldr	s0, [r2]
 8003874:	f102 0204 	add.w	r2, r2, #4
 8003878:	eeb4 0a48 	vcmp.f32	s0, s16
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	bf58      	it	pl
 8003882:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003886:	1e40      	subs	r0, r0, #1
 8003888:	d1f2      	bne.n	8003870 <nl_func_sm_channel_f32+0x24>
 800388a:	0889      	lsrs	r1, r1, #2
 800388c:	f000 802b 	beq.w	80038e6 <nl_func_sm_channel_f32+0x9a>
 8003890:	ed92 0a00 	vldr	s0, [r2]
 8003894:	eeb4 0a48 	vcmp.f32	s0, s16
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	bf58      	it	pl
 800389e:	eeb0 8a40 	vmovpl.f32	s16, s0
 80038a2:	ed92 0a01 	vldr	s0, [r2, #4]
 80038a6:	eeb4 0a48 	vcmp.f32	s0, s16
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	bf58      	it	pl
 80038b0:	eeb0 8a40 	vmovpl.f32	s16, s0
 80038b4:	ed92 0a02 	vldr	s0, [r2, #8]
 80038b8:	eeb4 0a48 	vcmp.f32	s0, s16
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	bf58      	it	pl
 80038c2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80038c6:	ed92 0a03 	vldr	s0, [r2, #12]
 80038ca:	f102 0210 	add.w	r2, r2, #16
 80038ce:	eeb4 0a48 	vcmp.f32	s0, s16
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	bf58      	it	pl
 80038d8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80038dc:	1e49      	subs	r1, r1, #1
 80038de:	d1d7      	bne.n	8003890 <nl_func_sm_channel_f32+0x44>
 80038e0:	e001      	b.n	80038e6 <nl_func_sm_channel_f32+0x9a>
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d040      	beq.n	8003968 <nl_func_sm_channel_f32+0x11c>
 80038e6:	46b0      	mov	r8, r6
 80038e8:	ea4f 0504 	mov.w	r5, r4
 80038ec:	ed97 0a00 	vldr	s0, [r7]
 80038f0:	1d3f      	adds	r7, r7, #4
 80038f2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80038f6:	f00e f9c1 	bl	8011c7c <expf>
 80038fa:	1e6d      	subs	r5, r5, #1
 80038fc:	ed88 0a00 	vstr	s0, [r8]
 8003900:	ee78 8a80 	vadd.f32	s17, s17, s0
 8003904:	f108 0804 	add.w	r8, r8, #4
 8003908:	d1f0      	bne.n	80038ec <nl_func_sm_channel_f32+0xa0>
 800390a:	f014 0003 	ands.w	r0, r4, #3
 800390e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003912:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8003916:	d009      	beq.n	800392c <nl_func_sm_channel_f32+0xe0>
 8003918:	edd6 0a00 	vldr	s1, [r6]
 800391c:	1e40      	subs	r0, r0, #1
 800391e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003922:	edc6 0a00 	vstr	s1, [r6]
 8003926:	f106 0604 	add.w	r6, r6, #4
 800392a:	d1f5      	bne.n	8003918 <nl_func_sm_channel_f32+0xcc>
 800392c:	08a4      	lsrs	r4, r4, #2
 800392e:	d01b      	beq.n	8003968 <nl_func_sm_channel_f32+0x11c>
 8003930:	edd6 0a00 	vldr	s1, [r6]
 8003934:	1e64      	subs	r4, r4, #1
 8003936:	ee60 0a80 	vmul.f32	s1, s1, s0
 800393a:	edc6 0a00 	vstr	s1, [r6]
 800393e:	ed96 1a01 	vldr	s2, [r6, #4]
 8003942:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003946:	ed86 1a01 	vstr	s2, [r6, #4]
 800394a:	edd6 0a02 	vldr	s1, [r6, #8]
 800394e:	ed96 1a03 	vldr	s2, [r6, #12]
 8003952:	ee60 1a80 	vmul.f32	s3, s1, s0
 8003956:	ee61 0a00 	vmul.f32	s1, s2, s0
 800395a:	edc6 1a02 	vstr	s3, [r6, #8]
 800395e:	edc6 0a03 	vstr	s1, [r6, #12]
 8003962:	f106 0610 	add.w	r6, r6, #16
 8003966:	d1e3      	bne.n	8003930 <nl_func_sm_channel_f32+0xe4>
 8003968:	ecbd 8b02 	vpop	{d8}
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003970 <nl_func_sm_array_f32>:
 8003970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003974:	b081      	sub	sp, #4
 8003976:	460c      	mov	r4, r1
 8003978:	9f08      	ldr	r7, [sp, #32]
 800397a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800397e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003980:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 8003984:	461d      	mov	r5, r3
 8003986:	00bf      	lsls	r7, r7, #2
 8003988:	427f      	negs	r7, r7
 800398a:	eb0c 0807 	add.w	r8, ip, r7
 800398e:	00b6      	lsls	r6, r6, #2
 8003990:	4276      	negs	r6, r6
 8003992:	45a0      	cmp	r8, r4
 8003994:	eb0e 0906 	add.w	r9, lr, r6
 8003998:	d309      	bcc.n	80039ae <nl_func_sm_array_f32+0x3e>
 800399a:	2300      	movs	r3, #0
 800399c:	462a      	mov	r2, r5
 800399e:	4641      	mov	r1, r8
 80039a0:	4648      	mov	r0, r9
 80039a2:	f7ff ff53 	bl	800384c <nl_func_sm_channel_f32>
 80039a6:	44b8      	add	r8, r7
 80039a8:	45a0      	cmp	r8, r4
 80039aa:	44b1      	add	r9, r6
 80039ac:	d2f5      	bcs.n	800399a <nl_func_sm_array_f32+0x2a>
 80039ae:	b001      	add	sp, #4
 80039b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080039b4 <nl_func_tanh_array_f32>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	460c      	mov	r4, r1
 80039b8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80039bc:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039c0:	1f0d      	subs	r5, r1, #4
 80039c2:	1f06      	subs	r6, r0, #4
 80039c4:	42a5      	cmp	r5, r4
 80039c6:	d309      	bcc.n	80039dc <nl_func_tanh_array_f32+0x28>
 80039c8:	ed95 0a00 	vldr	s0, [r5]
 80039cc:	1f2d      	subs	r5, r5, #4
 80039ce:	f00e fb91 	bl	80120f4 <tanhf>
 80039d2:	ed86 0a00 	vstr	s0, [r6]
 80039d6:	1f36      	subs	r6, r6, #4
 80039d8:	42a5      	cmp	r5, r4
 80039da:	d2f5      	bcs.n	80039c8 <nl_func_tanh_array_f32+0x14>
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080039e0 <nl_func_sigmoid_array_f32>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	460c      	mov	r4, r1
 80039e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80039e8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039ec:	1f0d      	subs	r5, r1, #4
 80039ee:	1f06      	subs	r6, r0, #4
 80039f0:	42a5      	cmp	r5, r4
 80039f2:	d313      	bcc.n	8003a1c <nl_func_sigmoid_array_f32+0x3c>
 80039f4:	ed95 0a00 	vldr	s0, [r5]
 80039f8:	1f2d      	subs	r5, r5, #4
 80039fa:	eeb1 0a40 	vneg.f32	s0, s0
 80039fe:	f00e f93d 	bl	8011c7c <expf>
 8003a02:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a06:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a0a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a0e:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003a12:	ed86 1a00 	vstr	s2, [r6]
 8003a16:	1f36      	subs	r6, r6, #4
 8003a18:	42a5      	cmp	r5, r4
 8003a1a:	d2eb      	bcs.n	80039f4 <nl_func_sigmoid_array_f32+0x14>
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a20 <nl_func_hard_sigmoid_array_f32>:
 8003a20:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a24:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003a28:	1f1b      	subs	r3, r3, #4
 8003a2a:	1f00      	subs	r0, r0, #4
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d321      	bcc.n	8003a74 <nl_func_hard_sigmoid_array_f32+0x54>
 8003a30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a34:	eddf 0aa7 	vldr	s1, [pc, #668]	; 8003cd4 <.text_16>
 8003a38:	edd3 1a00 	vldr	s3, [r3]
 8003a3c:	ed9f 2aa6 	vldr	s4, [pc, #664]	; 8003cd8 <.text_17>
 8003a40:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003a44:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003a48:	eeb4 1a60 	vcmp.f32	s2, s1
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	da08      	bge.n	8003a64 <nl_func_hard_sigmoid_array_f32+0x44>
 8003a52:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	d505      	bpl.n	8003a68 <nl_func_hard_sigmoid_array_f32+0x48>
 8003a5c:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8003b78 <.text_12>
 8003a60:	e002      	b.n	8003a68 <nl_func_hard_sigmoid_array_f32+0x48>
 8003a62:	bf00      	nop
 8003a64:	eeb0 1a40 	vmov.f32	s2, s0
 8003a68:	ed80 1a00 	vstr	s2, [r0]
 8003a6c:	1f1b      	subs	r3, r3, #4
 8003a6e:	1f00      	subs	r0, r0, #4
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d2e1      	bcs.n	8003a38 <nl_func_hard_sigmoid_array_f32+0x18>
 8003a74:	4770      	bx	lr
	...

08003a78 <nl_func_exp_array_f32>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003a80:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003a84:	1f0d      	subs	r5, r1, #4
 8003a86:	1f06      	subs	r6, r0, #4
 8003a88:	42a5      	cmp	r5, r4
 8003a8a:	d309      	bcc.n	8003aa0 <nl_func_exp_array_f32+0x28>
 8003a8c:	ed95 0a00 	vldr	s0, [r5]
 8003a90:	1f2d      	subs	r5, r5, #4
 8003a92:	f00e f8f3 	bl	8011c7c <expf>
 8003a96:	ed86 0a00 	vstr	s0, [r6]
 8003a9a:	1f36      	subs	r6, r6, #4
 8003a9c:	42a5      	cmp	r5, r4
 8003a9e:	d2f5      	bcs.n	8003a8c <nl_func_exp_array_f32+0x14>
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003aa4 <nl_func_sqrt_array_f32>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003aac:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003ab0:	1f0d      	subs	r5, r1, #4
 8003ab2:	1f06      	subs	r6, r0, #4
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d309      	bcc.n	8003acc <nl_func_sqrt_array_f32+0x28>
 8003ab8:	ed95 0a00 	vldr	s0, [r5]
 8003abc:	1f2d      	subs	r5, r5, #4
 8003abe:	f002 f8a9 	bl	8005c14 <ai_math_sqrt>
 8003ac2:	ed86 0a00 	vstr	s0, [r6]
 8003ac6:	1f36      	subs	r6, r6, #4
 8003ac8:	42a5      	cmp	r5, r4
 8003aca:	d2f5      	bcs.n	8003ab8 <nl_func_sqrt_array_f32+0x14>
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ad0 <nl_func_soft_plus_array_f32>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003ad8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003adc:	1f0d      	subs	r5, r1, #4
 8003ade:	1f06      	subs	r6, r0, #4
 8003ae0:	42a5      	cmp	r5, r4
 8003ae2:	d30f      	bcc.n	8003b04 <nl_func_soft_plus_array_f32+0x34>
 8003ae4:	ed95 0a00 	vldr	s0, [r5]
 8003ae8:	1f2d      	subs	r5, r5, #4
 8003aea:	f00e f8c7 	bl	8011c7c <expf>
 8003aee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003af2:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003af6:	f00e f93f 	bl	8011d78 <logf>
 8003afa:	ed86 0a00 	vstr	s0, [r6]
 8003afe:	1f36      	subs	r6, r6, #4
 8003b00:	42a5      	cmp	r5, r4
 8003b02:	d2ef      	bcs.n	8003ae4 <nl_func_soft_plus_array_f32+0x14>
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b08 <nl_func_soft_sign_array_f32>:
 8003b08:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b0c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003b10:	1f1b      	subs	r3, r3, #4
 8003b12:	1f00      	subs	r0, r0, #4
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d30f      	bcc.n	8003b38 <nl_func_soft_sign_array_f32+0x30>
 8003b18:	ed93 0a00 	vldr	s0, [r3]
 8003b1c:	1f1b      	subs	r3, r3, #4
 8003b1e:	eef0 0ac0 	vabs.f32	s1, s0
 8003b22:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003b26:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003b2a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003b2e:	ed80 0a00 	vstr	s0, [r0]
 8003b32:	1f00      	subs	r0, r0, #4
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d2ef      	bcs.n	8003b18 <nl_func_soft_sign_array_f32+0x10>
 8003b38:	4770      	bx	lr
	...

08003b3c <nl_func_sign_array_f32>:
 8003b3c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b40:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003b44:	1f1b      	subs	r3, r3, #4
 8003b46:	1f00      	subs	r0, r0, #4
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	d314      	bcc.n	8003b76 <nl_func_sign_array_f32+0x3a>
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	ed93 0a00 	vldr	s0, [r3]
 8003b54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	bfcc      	ite	gt
 8003b5e:	ed9f 0aba 	vldrgt	s0, [pc, #744]	; 8003e48 <.text_21>
 8003b62:	ee00 2a10 	vmovle	s0, r2
 8003b66:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b6a:	1f1b      	subs	r3, r3, #4
 8003b6c:	ed80 0a00 	vstr	s0, [r0]
 8003b70:	1f00      	subs	r0, r0, #4
 8003b72:	428b      	cmp	r3, r1
 8003b74:	d2ec      	bcs.n	8003b50 <nl_func_sign_array_f32+0x14>
 8003b76:	4770      	bx	lr

08003b78 <.text_12>:
 8003b78:	00000000 	.word	0x00000000

08003b7c <nl_func_clip_array_f32>:
 8003b7c:	ed93 0a00 	vldr	s0, [r3]
 8003b80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003b84:	edd3 0a01 	vldr	s1, [r3, #4]
 8003b88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b8c:	1f1b      	subs	r3, r3, #4
 8003b8e:	1f00      	subs	r0, r0, #4
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d315      	bcc.n	8003bc0 <nl_func_clip_array_f32+0x44>
 8003b94:	ed93 1a00 	vldr	s2, [r3]
 8003b98:	eeb4 0a41 	vcmp.f32	s0, s2
 8003b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba0:	bf58      	it	pl
 8003ba2:	eeb0 1a40 	vmovpl.f32	s2, s0
 8003ba6:	eeb4 1a60 	vcmp.f32	s2, s1
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	bf58      	it	pl
 8003bb0:	eeb0 1a60 	vmovpl.f32	s2, s1
 8003bb4:	ed80 1a00 	vstr	s2, [r0]
 8003bb8:	1f1b      	subs	r3, r3, #4
 8003bba:	1f00      	subs	r0, r0, #4
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d2e9      	bcs.n	8003b94 <nl_func_clip_array_f32+0x18>
 8003bc0:	4770      	bx	lr
	...

08003bc4 <nl_func_hardmax_array_f32>:
 8003bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc8:	6856      	ldr	r6, [r2, #4]
 8003bca:	68d4      	ldr	r4, [r2, #12]
 8003bcc:	4688      	mov	r8, r1
 8003bce:	4605      	mov	r5, r0
 8003bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003bd4:	4374      	muls	r4, r6
 8003bd6:	00a1      	lsls	r1, r4, #2
 8003bd8:	f00b fcb9 	bl	800f54e <__aeabi_memclr>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2c00      	cmp	r4, #0
 8003be0:	4643      	mov	r3, r8
 8003be2:	d05c      	beq.n	8003c9e <nl_func_hardmax_array_f32+0xda>
 8003be4:	f102 0c01 	add.w	ip, r2, #1
 8003be8:	eb06 0e02 	add.w	lr, r6, r2
 8003bec:	45f4      	cmp	ip, lr
 8003bee:	edd3 0a00 	vldr	s1, [r3]
 8003bf2:	d24b      	bcs.n	8003c8c <nl_func_hardmax_array_f32+0xc8>
 8003bf4:	1e71      	subs	r1, r6, #1
 8003bf6:	f011 0003 	ands.w	r0, r1, #3
 8003bfa:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 8003bfe:	d00f      	beq.n	8003c20 <nl_func_hardmax_array_f32+0x5c>
 8003c00:	ed97 1a00 	vldr	s2, [r7]
 8003c04:	f107 0704 	add.w	r7, r7, #4
 8003c08:	eef4 0a41 	vcmp.f32	s1, s2
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	bf44      	itt	mi
 8003c12:	eef0 0a41 	vmovmi.f32	s1, s2
 8003c16:	4662      	movmi	r2, ip
 8003c18:	1e40      	subs	r0, r0, #1
 8003c1a:	f10c 0c01 	add.w	ip, ip, #1
 8003c1e:	d1ef      	bne.n	8003c00 <nl_func_hardmax_array_f32+0x3c>
 8003c20:	0889      	lsrs	r1, r1, #2
 8003c22:	d033      	beq.n	8003c8c <nl_func_hardmax_array_f32+0xc8>
 8003c24:	ed97 1a00 	vldr	s2, [r7]
 8003c28:	eef4 0a41 	vcmp.f32	s1, s2
 8003c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c30:	bf44      	itt	mi
 8003c32:	eef0 0a41 	vmovmi.f32	s1, s2
 8003c36:	4662      	movmi	r2, ip
 8003c38:	ed97 1a01 	vldr	s2, [r7, #4]
 8003c3c:	f10c 0c01 	add.w	ip, ip, #1
 8003c40:	eef4 0a41 	vcmp.f32	s1, s2
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	bf44      	itt	mi
 8003c4a:	eef0 0a41 	vmovmi.f32	s1, s2
 8003c4e:	4662      	movmi	r2, ip
 8003c50:	ed97 1a02 	vldr	s2, [r7, #8]
 8003c54:	f10c 0c01 	add.w	ip, ip, #1
 8003c58:	eef4 0a41 	vcmp.f32	s1, s2
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	bf44      	itt	mi
 8003c62:	eef0 0a41 	vmovmi.f32	s1, s2
 8003c66:	4662      	movmi	r2, ip
 8003c68:	ed97 1a03 	vldr	s2, [r7, #12]
 8003c6c:	f10c 0c01 	add.w	ip, ip, #1
 8003c70:	eef4 0a41 	vcmp.f32	s1, s2
 8003c74:	f107 0710 	add.w	r7, r7, #16
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	bf44      	itt	mi
 8003c7e:	eef0 0a41 	vmovmi.f32	s1, s2
 8003c82:	4662      	movmi	r2, ip
 8003c84:	1e49      	subs	r1, r1, #1
 8003c86:	f10c 0c01 	add.w	ip, ip, #1
 8003c8a:	d1cb      	bne.n	8003c24 <nl_func_hardmax_array_f32+0x60>
 8003c8c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8003c90:	4672      	mov	r2, lr
 8003c92:	42a2      	cmp	r2, r4
 8003c94:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003c98:	ed80 0a00 	vstr	s0, [r0]
 8003c9c:	d3a2      	bcc.n	8003be4 <nl_func_hardmax_array_f32+0x20>
 8003c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003ca4 <nl_func_relu_array_f32>:
 8003ca4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ca8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003cac:	1f1b      	subs	r3, r3, #4
 8003cae:	1f00      	subs	r0, r0, #4
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d30e      	bcc.n	8003cd2 <nl_func_relu_array_f32+0x2e>
 8003cb4:	ed93 0a00 	vldr	s0, [r3]
 8003cb8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	bf48      	it	mi
 8003cc2:	ed9f 0abb 	vldrmi	s0, [pc, #748]	; 8003fb0 <.text_25>
 8003cc6:	ed80 0a00 	vstr	s0, [r0]
 8003cca:	1f1b      	subs	r3, r3, #4
 8003ccc:	1f00      	subs	r0, r0, #4
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d2f0      	bcs.n	8003cb4 <nl_func_relu_array_f32+0x10>
 8003cd2:	4770      	bx	lr

08003cd4 <.text_16>:
 8003cd4:	3f800001 	.word	0x3f800001

08003cd8 <.text_17>:
 8003cd8:	3e4ccccd 	.word	0x3e4ccccd

08003cdc <nl_func_relu_generic_array_f32>:
 8003cdc:	ed93 0a00 	vldr	s0, [r3]
 8003ce0:	1f00      	subs	r0, r0, #4
 8003ce2:	edd3 0a01 	vldr	s1, [r3, #4]
 8003ce6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003cea:	ed93 1a02 	vldr	s2, [r3, #8]
 8003cee:	1f0b      	subs	r3, r1, #4
 8003cf0:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8003cf4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfc:	d52a      	bpl.n	8003d54 <nl_func_relu_generic_array_f32+0x78>
 8003cfe:	eef5 0a40 	vcmp.f32	s1, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	d013      	beq.n	8003d30 <nl_func_relu_generic_array_f32+0x54>
 8003d08:	428a      	cmp	r2, r1
 8003d0a:	d310      	bcc.n	8003d2e <nl_func_relu_generic_array_f32+0x52>
 8003d0c:	ed92 1a00 	vldr	s2, [r2]
 8003d10:	eeb4 1a40 	vcmp.f32	s2, s0
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	bf44      	itt	mi
 8003d1a:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 8003d1e:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8003d22:	ed80 1a00 	vstr	s2, [r0]
 8003d26:	1f12      	subs	r2, r2, #4
 8003d28:	1f00      	subs	r0, r0, #4
 8003d2a:	428a      	cmp	r2, r1
 8003d2c:	d2ee      	bcs.n	8003d0c <nl_func_relu_generic_array_f32+0x30>
 8003d2e:	4770      	bx	lr
 8003d30:	428a      	cmp	r2, r1
 8003d32:	d3fc      	bcc.n	8003d2e <nl_func_relu_generic_array_f32+0x52>
 8003d34:	edd2 0a00 	vldr	s1, [r2]
 8003d38:	eef4 0a40 	vcmp.f32	s1, s0
 8003d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d40:	bf48      	it	mi
 8003d42:	eddf 0a9b 	vldrmi	s1, [pc, #620]	; 8003fb0 <.text_25>
 8003d46:	edc0 0a00 	vstr	s1, [r0]
 8003d4a:	1f12      	subs	r2, r2, #4
 8003d4c:	1f00      	subs	r0, r0, #4
 8003d4e:	428a      	cmp	r2, r1
 8003d50:	d2f0      	bcs.n	8003d34 <nl_func_relu_generic_array_f32+0x58>
 8003d52:	4770      	bx	lr
 8003d54:	428a      	cmp	r2, r1
 8003d56:	d3ea      	bcc.n	8003d2e <nl_func_relu_generic_array_f32+0x52>
 8003d58:	edd2 1a00 	vldr	s3, [r2]
 8003d5c:	eef4 1a41 	vcmp.f32	s3, s2
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d50a      	bpl.n	8003d7c <nl_func_relu_generic_array_f32+0xa0>
 8003d66:	eef4 1a40 	vcmp.f32	s3, s0
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d507      	bpl.n	8003d80 <nl_func_relu_generic_array_f32+0xa4>
 8003d70:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8003d74:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8003d78:	e002      	b.n	8003d80 <nl_func_relu_generic_array_f32+0xa4>
 8003d7a:	bf00      	nop
 8003d7c:	eef0 1a41 	vmov.f32	s3, s2
 8003d80:	edc0 1a00 	vstr	s3, [r0]
 8003d84:	1f12      	subs	r2, r2, #4
 8003d86:	1f00      	subs	r0, r0, #4
 8003d88:	428a      	cmp	r2, r1
 8003d8a:	d2e5      	bcs.n	8003d58 <nl_func_relu_generic_array_f32+0x7c>
 8003d8c:	4770      	bx	lr
	...

08003d90 <nl_func_relu_thresholded_array_f32>:
 8003d90:	ed93 0a00 	vldr	s0, [r3]
 8003d94:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003d9c:	1f1b      	subs	r3, r3, #4
 8003d9e:	1f00      	subs	r0, r0, #4
 8003da0:	428b      	cmp	r3, r1
 8003da2:	d30e      	bcc.n	8003dc2 <nl_func_relu_thresholded_array_f32+0x32>
 8003da4:	edd3 0a00 	vldr	s1, [r3]
 8003da8:	eef4 0a40 	vcmp.f32	s1, s0
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	bf48      	it	mi
 8003db2:	eddf 0a7f 	vldrmi	s1, [pc, #508]	; 8003fb0 <.text_25>
 8003db6:	edc0 0a00 	vstr	s1, [r0]
 8003dba:	1f1b      	subs	r3, r3, #4
 8003dbc:	1f00      	subs	r0, r0, #4
 8003dbe:	428b      	cmp	r3, r1
 8003dc0:	d2f0      	bcs.n	8003da4 <nl_func_relu_thresholded_array_f32+0x14>
 8003dc2:	4770      	bx	lr

08003dc4 <nl_func_elu_array_f32>:
 8003dc4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	460c      	mov	r4, r1
 8003dcc:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003dd0:	1f06      	subs	r6, r0, #4
 8003dd2:	ed2d 8b04 	vpush	{d8-d9}
 8003dd6:	ed93 8a00 	vldr	s16, [r3]
 8003dda:	1f0d      	subs	r5, r1, #4
 8003ddc:	42a5      	cmp	r5, r4
 8003dde:	d32f      	bcc.n	8003e40 <nl_func_elu_array_f32+0x7c>
 8003de0:	edd5 8a00 	vldr	s17, [r5]
 8003de4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	eeb0 0a68 	vmov.f32	s0, s17
 8003df0:	bf4c      	ite	mi
 8003df2:	ed9f 9a6f 	vldrmi	s18, [pc, #444]	; 8003fb0 <.text_25>
 8003df6:	eeb0 9a68 	vmovpl.f32	s18, s17
 8003dfa:	f00d ff3f 	bl	8011c7c <expf>
 8003dfe:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003e02:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003e06:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003e0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	dd05      	ble.n	8003e20 <nl_func_elu_array_f32+0x5c>
 8003e14:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8003fb0 <.text_25>
 8003e18:	ee39 9a01 	vadd.f32	s18, s18, s2
 8003e1c:	e00a      	b.n	8003e34 <nl_func_elu_array_f32+0x70>
 8003e1e:	bf00      	nop
 8003e20:	eeb0 0a68 	vmov.f32	s0, s17
 8003e24:	f00d ff2a 	bl	8011c7c <expf>
 8003e28:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003e2c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003e30:	ee00 9a08 	vmla.f32	s18, s0, s16
 8003e34:	ed86 9a00 	vstr	s18, [r6]
 8003e38:	1f2d      	subs	r5, r5, #4
 8003e3a:	1f36      	subs	r6, r6, #4
 8003e3c:	42a5      	cmp	r5, r4
 8003e3e:	d2cf      	bcs.n	8003de0 <nl_func_elu_array_f32+0x1c>
 8003e40:	ecbd 8b04 	vpop	{d8-d9}
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e48 <.text_21>:
 8003e48:	00000001 	.word	0x00000001

08003e4c <nl_func_selu_array_f32>:
 8003e4c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e58:	1f06      	subs	r6, r0, #4
 8003e5a:	ed2d 8b04 	vpush	{d8-d9}
 8003e5e:	ed93 8a00 	vldr	s16, [r3]
 8003e62:	1f0d      	subs	r5, r1, #4
 8003e64:	42a5      	cmp	r5, r4
 8003e66:	edd3 8a01 	vldr	s17, [r3, #4]
 8003e6a:	d331      	bcc.n	8003ed0 <nl_func_selu_array_f32+0x84>
 8003e6c:	ed95 9a00 	vldr	s18, [r5]
 8003e70:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e78:	eeb0 0a49 	vmov.f32	s0, s18
 8003e7c:	bf4c      	ite	mi
 8003e7e:	eddf 9a4c 	vldrmi	s19, [pc, #304]	; 8003fb0 <.text_25>
 8003e82:	eef0 9a49 	vmovpl.f32	s19, s18
 8003e86:	f00d fef9 	bl	8011c7c <expf>
 8003e8a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003e8e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003e92:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003e96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	dd05      	ble.n	8003eac <nl_func_selu_array_f32+0x60>
 8003ea0:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8003fb0 <.text_25>
 8003ea4:	ee79 9a81 	vadd.f32	s19, s19, s2
 8003ea8:	e00a      	b.n	8003ec0 <nl_func_selu_array_f32+0x74>
 8003eaa:	bf00      	nop
 8003eac:	eeb0 0a49 	vmov.f32	s0, s18
 8003eb0:	f00d fee4 	bl	8011c7c <expf>
 8003eb4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003eb8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ebc:	ee40 9a08 	vmla.f32	s19, s0, s16
 8003ec0:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8003ec4:	1f2d      	subs	r5, r5, #4
 8003ec6:	ed86 0a00 	vstr	s0, [r6]
 8003eca:	1f36      	subs	r6, r6, #4
 8003ecc:	42a5      	cmp	r5, r4
 8003ece:	d2cd      	bcs.n	8003e6c <nl_func_selu_array_f32+0x20>
 8003ed0:	ecbd 8b04 	vpop	{d8-d9}
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ed8 <nl_func_prelu_array_f32>:
 8003ed8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003edc:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003ee0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003ee4:	1f1b      	subs	r3, r3, #4
 8003ee6:	f1ac 0c04 	sub.w	ip, ip, #4
 8003eea:	1f00      	subs	r0, r0, #4
 8003eec:	458c      	cmp	ip, r1
 8003eee:	d320      	bcc.n	8003f32 <nl_func_prelu_array_f32+0x5a>
 8003ef0:	ed9c 0a00 	vldr	s0, [ip]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003efa:	f1ac 0c04 	sub.w	ip, ip, #4
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	ed92 1a00 	vldr	s2, [r2]
 8003f06:	bf4c      	ite	mi
 8003f08:	eddf 0a29 	vldrmi	s1, [pc, #164]	; 8003fb0 <.text_25>
 8003f0c:	eef0 0a40 	vmovpl.f32	s1, s0
 8003f10:	eeb1 0a40 	vneg.f32	s0, s0
 8003f14:	1f13      	subs	r3, r2, #4
 8003f16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	bf48      	it	mi
 8003f20:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8003fb0 <.text_25>
 8003f24:	ee41 0a40 	vmls.f32	s1, s2, s0
 8003f28:	edc0 0a00 	vstr	s1, [r0]
 8003f2c:	1f00      	subs	r0, r0, #4
 8003f2e:	458c      	cmp	ip, r1
 8003f30:	d2de      	bcs.n	8003ef0 <nl_func_prelu_array_f32+0x18>
 8003f32:	4770      	bx	lr

08003f34 <forward_relu>:
 8003f34:	b470      	push	{r4, r5, r6}
 8003f36:	b081      	sub	sp, #4
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6950      	ldr	r0, [r2, #20]
 8003f3c:	6992      	ldr	r2, [r2, #24]
 8003f3e:	6800      	ldr	r0, [r0, #0]
 8003f40:	6801      	ldr	r1, [r0, #0]
 8003f42:	68c4      	ldr	r4, [r0, #12]
 8003f44:	680d      	ldr	r5, [r1, #0]
 8003f46:	6826      	ldr	r6, [r4, #0]
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	68ab      	ldr	r3, [r5, #8]
 8003f4c:	68e9      	ldr	r1, [r5, #12]
 8003f4e:	6928      	ldr	r0, [r5, #16]
 8003f50:	6836      	ldr	r6, [r6, #0]
 8003f52:	435c      	muls	r4, r3
 8003f54:	434c      	muls	r4, r1
 8003f56:	6829      	ldr	r1, [r5, #0]
 8003f58:	4344      	muls	r4, r0
 8003f5a:	68b0      	ldr	r0, [r6, #8]
 8003f5c:	6889      	ldr	r1, [r1, #8]
 8003f5e:	b9ca      	cbnz	r2, 8003f94 <forward_relu+0x60>
 8003f60:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8003f64:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003f68:	1f12      	subs	r2, r2, #4
 8003f6a:	1f00      	subs	r0, r0, #4
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	d31c      	bcc.n	8003faa <forward_relu+0x76>
 8003f70:	ed92 0a00 	vldr	s0, [r2]
 8003f74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7c:	bf48      	it	mi
 8003f7e:	ed9f 0a0c 	vldrmi	s0, [pc, #48]	; 8003fb0 <.text_25>
 8003f82:	ed80 0a00 	vstr	s0, [r0]
 8003f86:	1f12      	subs	r2, r2, #4
 8003f88:	1f00      	subs	r0, r0, #4
 8003f8a:	428a      	cmp	r2, r1
 8003f8c:	d2f0      	bcs.n	8003f70 <forward_relu+0x3c>
 8003f8e:	b001      	add	sp, #4
 8003f90:	bc70      	pop	{r4, r5, r6}
 8003f92:	4770      	bx	lr
 8003f94:	6893      	ldr	r3, [r2, #8]
 8003f96:	6852      	ldr	r2, [r2, #4]
 8003f98:	2a01      	cmp	r2, #1
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	d102      	bne.n	8003fa4 <forward_relu+0x70>
 8003f9e:	b001      	add	sp, #4
 8003fa0:	bc70      	pop	{r4, r5, r6}
 8003fa2:	e6f5      	b.n	8003d90 <nl_func_relu_thresholded_array_f32>
 8003fa4:	b001      	add	sp, #4
 8003fa6:	bc70      	pop	{r4, r5, r6}
 8003fa8:	e698      	b.n	8003cdc <nl_func_relu_generic_array_f32>
 8003faa:	b001      	add	sp, #4
 8003fac:	bc70      	pop	{r4, r5, r6}
 8003fae:	4770      	bx	lr

08003fb0 <.text_25>:
 8003fb0:	00000000 	.word	0x00000000

08003fb4 <forward_relu_thresholded>:
 8003fb4:	b470      	push	{r4, r5, r6}
 8003fb6:	6941      	ldr	r1, [r0, #20]
 8003fb8:	6980      	ldr	r0, [r0, #24]
 8003fba:	680d      	ldr	r5, [r1, #0]
 8003fbc:	682a      	ldr	r2, [r5, #0]
 8003fbe:	68ed      	ldr	r5, [r5, #12]
 8003fc0:	6816      	ldr	r6, [r2, #0]
 8003fc2:	6874      	ldr	r4, [r6, #4]
 8003fc4:	68b3      	ldr	r3, [r6, #8]
 8003fc6:	68f2      	ldr	r2, [r6, #12]
 8003fc8:	6931      	ldr	r1, [r6, #16]
 8003fca:	6836      	ldr	r6, [r6, #0]
 8003fcc:	435c      	muls	r4, r3
 8003fce:	4354      	muls	r4, r2
 8003fd0:	6882      	ldr	r2, [r0, #8]
 8003fd2:	434c      	muls	r4, r1
 8003fd4:	68b1      	ldr	r1, [r6, #8]
 8003fd6:	ed92 0a00 	vldr	s0, [r2]
 8003fda:	682a      	ldr	r2, [r5, #0]
 8003fdc:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8003fe0:	6816      	ldr	r6, [r2, #0]
 8003fe2:	1f18      	subs	r0, r3, #4
 8003fe4:	68b3      	ldr	r3, [r6, #8]
 8003fe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003fea:	1f22      	subs	r2, r4, #4
 8003fec:	4288      	cmp	r0, r1
 8003fee:	d30e      	bcc.n	800400e <forward_relu_thresholded+0x5a>
 8003ff0:	edd0 0a00 	vldr	s1, [r0]
 8003ff4:	eef4 0a40 	vcmp.f32	s1, s0
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf48      	it	mi
 8003ffe:	eddf 0ac4 	vldrmi	s1, [pc, #784]	; 8004310 <.text_34>
 8004002:	edc2 0a00 	vstr	s1, [r2]
 8004006:	1f00      	subs	r0, r0, #4
 8004008:	1f12      	subs	r2, r2, #4
 800400a:	4288      	cmp	r0, r1
 800400c:	d2f0      	bcs.n	8003ff0 <forward_relu_thresholded+0x3c>
 800400e:	bc70      	pop	{r4, r5, r6}
 8004010:	4770      	bx	lr
	...

08004014 <forward_elu>:
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b081      	sub	sp, #4
 8004018:	ed2d 8b04 	vpush	{d8-d9}
 800401c:	6941      	ldr	r1, [r0, #20]
 800401e:	6980      	ldr	r0, [r0, #24]
 8004020:	680f      	ldr	r7, [r1, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6814      	ldr	r4, [r2, #0]
 8004026:	6865      	ldr	r5, [r4, #4]
 8004028:	68a3      	ldr	r3, [r4, #8]
 800402a:	68e2      	ldr	r2, [r4, #12]
 800402c:	6921      	ldr	r1, [r4, #16]
 800402e:	6824      	ldr	r4, [r4, #0]
 8004030:	435d      	muls	r5, r3
 8004032:	4355      	muls	r5, r2
 8004034:	68a4      	ldr	r4, [r4, #8]
 8004036:	434d      	muls	r5, r1
 8004038:	6881      	ldr	r1, [r0, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 8004040:	ed91 8a00 	vldr	s16, [r1]
 8004044:	6801      	ldr	r1, [r0, #0]
 8004046:	1f16      	subs	r6, r2, #4
 8004048:	680b      	ldr	r3, [r1, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004050:	1f2d      	subs	r5, r5, #4
 8004052:	42a6      	cmp	r6, r4
 8004054:	f0c0 8030 	bcc.w	80040b8 <forward_elu+0xa4>
 8004058:	edd6 8a00 	vldr	s17, [r6]
 800405c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004064:	eeb0 0a68 	vmov.f32	s0, s17
 8004068:	bf4c      	ite	mi
 800406a:	ed9f 9aa9 	vldrmi	s18, [pc, #676]	; 8004310 <.text_34>
 800406e:	eeb0 9a68 	vmovpl.f32	s18, s17
 8004072:	f00d fe03 	bl	8011c7c <expf>
 8004076:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800407a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800407e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004082:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	dd05      	ble.n	8004098 <forward_elu+0x84>
 800408c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8004310 <.text_34>
 8004090:	ee39 9a01 	vadd.f32	s18, s18, s2
 8004094:	e00a      	b.n	80040ac <forward_elu+0x98>
 8004096:	bf00      	nop
 8004098:	eeb0 0a68 	vmov.f32	s0, s17
 800409c:	f00d fdee 	bl	8011c7c <expf>
 80040a0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80040a4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80040a8:	ee00 9a08 	vmla.f32	s18, s0, s16
 80040ac:	ed85 9a00 	vstr	s18, [r5]
 80040b0:	1f36      	subs	r6, r6, #4
 80040b2:	1f2d      	subs	r5, r5, #4
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d2cf      	bcs.n	8004058 <forward_elu+0x44>
 80040b8:	ecbd 8b04 	vpop	{d8-d9}
 80040bc:	b001      	add	sp, #4
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c0 <forward_selu>:
 80040c0:	b470      	push	{r4, r5, r6}
 80040c2:	b081      	sub	sp, #4
 80040c4:	6941      	ldr	r1, [r0, #20]
 80040c6:	6980      	ldr	r0, [r0, #24]
 80040c8:	680d      	ldr	r5, [r1, #0]
 80040ca:	682a      	ldr	r2, [r5, #0]
 80040cc:	6883      	ldr	r3, [r0, #8]
 80040ce:	6816      	ldr	r6, [r2, #0]
 80040d0:	6872      	ldr	r2, [r6, #4]
 80040d2:	68b4      	ldr	r4, [r6, #8]
 80040d4:	68f1      	ldr	r1, [r6, #12]
 80040d6:	6930      	ldr	r0, [r6, #16]
 80040d8:	6836      	ldr	r6, [r6, #0]
 80040da:	4362      	muls	r2, r4
 80040dc:	68ec      	ldr	r4, [r5, #12]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	434a      	muls	r2, r1
 80040e2:	68b1      	ldr	r1, [r6, #8]
 80040e4:	682e      	ldr	r6, [r5, #0]
 80040e6:	4342      	muls	r2, r0
 80040e8:	68b0      	ldr	r0, [r6, #8]
 80040ea:	b001      	add	sp, #4
 80040ec:	bc70      	pop	{r4, r5, r6}
 80040ee:	e6ad      	b.n	8003e4c <nl_func_selu_array_f32>

080040f0 <forward_prelu>:
 80040f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040f4:	b081      	sub	sp, #4
 80040f6:	6940      	ldr	r0, [r0, #20]
 80040f8:	6800      	ldr	r0, [r0, #0]
 80040fa:	6801      	ldr	r1, [r0, #0]
 80040fc:	68c2      	ldr	r2, [r0, #12]
 80040fe:	6980      	ldr	r0, [r0, #24]
 8004100:	6804      	ldr	r4, [r0, #0]
 8004102:	680d      	ldr	r5, [r1, #0]
 8004104:	6817      	ldr	r7, [r2, #0]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800410c:	b12c      	cbz	r4, 800411a <forward_prelu+0x2a>
 800410e:	6841      	ldr	r1, [r0, #4]
 8004110:	6800      	ldr	r0, [r0, #0]
 8004112:	f001 fc29 	bl	8005968 <ai_array_get_byte_size>
 8004116:	4681      	mov	r9, r0
 8004118:	e001      	b.n	800411e <forward_prelu+0x2e>
 800411a:	f04f 0901 	mov.w	r9, #1
 800411e:	6828      	ldr	r0, [r5, #0]
 8004120:	6841      	ldr	r1, [r0, #4]
 8004122:	6800      	ldr	r0, [r0, #0]
 8004124:	f001 fc20 	bl	8005968 <ai_array_get_byte_size>
 8004128:	6829      	ldr	r1, [r5, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	688e      	ldr	r6, [r1, #8]
 800412e:	1837      	adds	r7, r6, r0
 8004130:	42be      	cmp	r6, r7
 8004132:	6895      	ldr	r5, [r2, #8]
 8004134:	d211      	bcs.n	800415a <forward_prelu+0x6a>
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	68a0      	ldr	r0, [r4, #8]
 800413a:	68e1      	ldr	r1, [r4, #12]
 800413c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004140:	4643      	mov	r3, r8
 8004142:	4342      	muls	r2, r0
 8004144:	4628      	mov	r0, r5
 8004146:	444d      	add	r5, r9
 8004148:	434a      	muls	r2, r1
 800414a:	4631      	mov	r1, r6
 800414c:	444e      	add	r6, r9
 800414e:	fb0c f202 	mul.w	r2, ip, r2
 8004152:	f7ff fec1 	bl	8003ed8 <nl_func_prelu_array_f32>
 8004156:	42be      	cmp	r6, r7
 8004158:	d3ed      	bcc.n	8004136 <forward_prelu+0x46>
 800415a:	b001      	add	sp, #4
 800415c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004160 <forward_sign>:
 8004160:	b470      	push	{r4, r5, r6}
 8004162:	6940      	ldr	r0, [r0, #20]
 8004164:	6803      	ldr	r3, [r0, #0]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	680c      	ldr	r4, [r1, #0]
 800416a:	6865      	ldr	r5, [r4, #4]
 800416c:	68a2      	ldr	r2, [r4, #8]
 800416e:	68e1      	ldr	r1, [r4, #12]
 8004170:	6920      	ldr	r0, [r4, #16]
 8004172:	6824      	ldr	r4, [r4, #0]
 8004174:	4355      	muls	r5, r2
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	6813      	ldr	r3, [r2, #0]
 800417a:	434d      	muls	r5, r1
 800417c:	4345      	muls	r5, r0
 800417e:	68a0      	ldr	r0, [r4, #8]
 8004180:	681c      	ldr	r4, [r3, #0]
 8004182:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004186:	68a6      	ldr	r6, [r4, #8]
 8004188:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800418c:	1f09      	subs	r1, r1, #4
 800418e:	1f2a      	subs	r2, r5, #4
 8004190:	4281      	cmp	r1, r0
 8004192:	d314      	bcc.n	80041be <forward_sign+0x5e>
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	ed91 0a00 	vldr	s0, [r1]
 800419c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	bfcc      	ite	gt
 80041a6:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8004314 <.text_35>
 80041aa:	ee00 3a10 	vmovle	s0, r3
 80041ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80041b2:	1f09      	subs	r1, r1, #4
 80041b4:	ed82 0a00 	vstr	s0, [r2]
 80041b8:	1f12      	subs	r2, r2, #4
 80041ba:	4281      	cmp	r1, r0
 80041bc:	d2ec      	bcs.n	8004198 <forward_sign+0x38>
 80041be:	bc70      	pop	{r4, r5, r6}
 80041c0:	4770      	bx	lr
	...

080041c4 <forward_clip>:
 80041c4:	b470      	push	{r4, r5, r6}
 80041c6:	6941      	ldr	r1, [r0, #20]
 80041c8:	6980      	ldr	r0, [r0, #24]
 80041ca:	680d      	ldr	r5, [r1, #0]
 80041cc:	682a      	ldr	r2, [r5, #0]
 80041ce:	6816      	ldr	r6, [r2, #0]
 80041d0:	6874      	ldr	r4, [r6, #4]
 80041d2:	68b3      	ldr	r3, [r6, #8]
 80041d4:	68f2      	ldr	r2, [r6, #12]
 80041d6:	6931      	ldr	r1, [r6, #16]
 80041d8:	435c      	muls	r4, r3
 80041da:	4354      	muls	r4, r2
 80041dc:	6832      	ldr	r2, [r6, #0]
 80041de:	434c      	muls	r4, r1
 80041e0:	6881      	ldr	r1, [r0, #8]
 80041e2:	6890      	ldr	r0, [r2, #8]
 80041e4:	68ea      	ldr	r2, [r5, #12]
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	681d      	ldr	r5, [r3, #0]
 80041ea:	ed91 0a00 	vldr	s0, [r1]
 80041ee:	edd1 0a01 	vldr	s1, [r1, #4]
 80041f2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 80041f6:	68ae      	ldr	r6, [r5, #8]
 80041f8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80041fc:	1f09      	subs	r1, r1, #4
 80041fe:	1f22      	subs	r2, r4, #4
 8004200:	4281      	cmp	r1, r0
 8004202:	d315      	bcc.n	8004230 <forward_clip+0x6c>
 8004204:	ed91 1a00 	vldr	s2, [r1]
 8004208:	eeb4 0a41 	vcmp.f32	s0, s2
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	bf58      	it	pl
 8004212:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004216:	eeb4 1a60 	vcmp.f32	s2, s1
 800421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421e:	bf58      	it	pl
 8004220:	eeb0 1a60 	vmovpl.f32	s2, s1
 8004224:	ed82 1a00 	vstr	s2, [r2]
 8004228:	1f09      	subs	r1, r1, #4
 800422a:	1f12      	subs	r2, r2, #4
 800422c:	4281      	cmp	r1, r0
 800422e:	d2e9      	bcs.n	8004204 <forward_clip+0x40>
 8004230:	bc70      	pop	{r4, r5, r6}
 8004232:	4770      	bx	lr

08004234 <forward_sigmoid>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	6940      	ldr	r0, [r0, #20]
 8004238:	6803      	ldr	r3, [r0, #0]
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	680c      	ldr	r4, [r1, #0]
 800423e:	6866      	ldr	r6, [r4, #4]
 8004240:	68a2      	ldr	r2, [r4, #8]
 8004242:	68e1      	ldr	r1, [r4, #12]
 8004244:	6920      	ldr	r0, [r4, #16]
 8004246:	6824      	ldr	r4, [r4, #0]
 8004248:	4356      	muls	r6, r2
 800424a:	434e      	muls	r6, r1
 800424c:	68a4      	ldr	r4, [r4, #8]
 800424e:	4346      	muls	r6, r0
 8004250:	68d8      	ldr	r0, [r3, #12]
 8004252:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	1f0d      	subs	r5, r1, #4
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004262:	1f36      	subs	r6, r6, #4
 8004264:	42a5      	cmp	r5, r4
 8004266:	d313      	bcc.n	8004290 <forward_sigmoid+0x5c>
 8004268:	ed95 0a00 	vldr	s0, [r5]
 800426c:	1f2d      	subs	r5, r5, #4
 800426e:	eeb1 0a40 	vneg.f32	s0, s0
 8004272:	f00d fd03 	bl	8011c7c <expf>
 8004276:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800427a:	ee70 0a20 	vadd.f32	s1, s0, s1
 800427e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004282:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8004286:	ed86 1a00 	vstr	s2, [r6]
 800428a:	1f36      	subs	r6, r6, #4
 800428c:	42a5      	cmp	r5, r4
 800428e:	d2eb      	bcs.n	8004268 <forward_sigmoid+0x34>
 8004290:	bd70      	pop	{r4, r5, r6, pc}
	...

08004294 <forward_hard_sigmoid>:
 8004294:	b470      	push	{r4, r5, r6}
 8004296:	6940      	ldr	r0, [r0, #20]
 8004298:	6803      	ldr	r3, [r0, #0]
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	680c      	ldr	r4, [r1, #0]
 800429e:	6865      	ldr	r5, [r4, #4]
 80042a0:	68a2      	ldr	r2, [r4, #8]
 80042a2:	68e1      	ldr	r1, [r4, #12]
 80042a4:	6920      	ldr	r0, [r4, #16]
 80042a6:	6824      	ldr	r4, [r4, #0]
 80042a8:	4355      	muls	r5, r2
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	434d      	muls	r5, r1
 80042b0:	4345      	muls	r5, r0
 80042b2:	68a0      	ldr	r0, [r4, #8]
 80042b4:	681c      	ldr	r4, [r3, #0]
 80042b6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80042ba:	68a6      	ldr	r6, [r4, #8]
 80042bc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80042c0:	1f09      	subs	r1, r1, #4
 80042c2:	1f2a      	subs	r2, r5, #4
 80042c4:	4281      	cmp	r1, r0
 80042c6:	d321      	bcc.n	800430c <forward_hard_sigmoid+0x78>
 80042c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042cc:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004318 <.text_36>
 80042d0:	edd1 1a00 	vldr	s3, [r1]
 80042d4:	ed9f 2a11 	vldr	s4, [pc, #68]	; 800431c <.text_37>
 80042d8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80042dc:	ee01 1a82 	vmla.f32	s2, s3, s4
 80042e0:	eeb4 1a60 	vcmp.f32	s2, s1
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	da08      	bge.n	80042fc <forward_hard_sigmoid+0x68>
 80042ea:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f2:	d505      	bpl.n	8004300 <forward_hard_sigmoid+0x6c>
 80042f4:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004310 <.text_34>
 80042f8:	e002      	b.n	8004300 <forward_hard_sigmoid+0x6c>
 80042fa:	bf00      	nop
 80042fc:	eeb0 1a40 	vmov.f32	s2, s0
 8004300:	ed82 1a00 	vstr	s2, [r2]
 8004304:	1f09      	subs	r1, r1, #4
 8004306:	1f12      	subs	r2, r2, #4
 8004308:	4281      	cmp	r1, r0
 800430a:	d2e1      	bcs.n	80042d0 <forward_hard_sigmoid+0x3c>
 800430c:	bc70      	pop	{r4, r5, r6}
 800430e:	4770      	bx	lr

08004310 <.text_34>:
 8004310:	00000000 	.word	0x00000000

08004314 <.text_35>:
 8004314:	00000001 	.word	0x00000001

08004318 <.text_36>:
 8004318:	3f800001 	.word	0x3f800001

0800431c <.text_37>:
 800431c:	3e4ccccd 	.word	0x3e4ccccd

08004320 <forward_exp>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	6940      	ldr	r0, [r0, #20]
 8004324:	6803      	ldr	r3, [r0, #0]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	680c      	ldr	r4, [r1, #0]
 800432a:	6866      	ldr	r6, [r4, #4]
 800432c:	68a2      	ldr	r2, [r4, #8]
 800432e:	68e1      	ldr	r1, [r4, #12]
 8004330:	6920      	ldr	r0, [r4, #16]
 8004332:	6824      	ldr	r4, [r4, #0]
 8004334:	4356      	muls	r6, r2
 8004336:	434e      	muls	r6, r1
 8004338:	68a4      	ldr	r4, [r4, #8]
 800433a:	4346      	muls	r6, r0
 800433c:	68d8      	ldr	r0, [r3, #12]
 800433e:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8004342:	6802      	ldr	r2, [r0, #0]
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	1f0d      	subs	r5, r1, #4
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800434e:	1f36      	subs	r6, r6, #4
 8004350:	42a5      	cmp	r5, r4
 8004352:	d309      	bcc.n	8004368 <forward_exp+0x48>
 8004354:	ed95 0a00 	vldr	s0, [r5]
 8004358:	1f2d      	subs	r5, r5, #4
 800435a:	f00d fc8f 	bl	8011c7c <expf>
 800435e:	ed86 0a00 	vstr	s0, [r6]
 8004362:	1f36      	subs	r6, r6, #4
 8004364:	42a5      	cmp	r5, r4
 8004366:	d2f5      	bcs.n	8004354 <forward_exp+0x34>
 8004368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800436c <forward_sqrt>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	6940      	ldr	r0, [r0, #20]
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	680c      	ldr	r4, [r1, #0]
 8004376:	6866      	ldr	r6, [r4, #4]
 8004378:	68a2      	ldr	r2, [r4, #8]
 800437a:	68e1      	ldr	r1, [r4, #12]
 800437c:	6920      	ldr	r0, [r4, #16]
 800437e:	6824      	ldr	r4, [r4, #0]
 8004380:	4356      	muls	r6, r2
 8004382:	434e      	muls	r6, r1
 8004384:	68a4      	ldr	r4, [r4, #8]
 8004386:	4346      	muls	r6, r0
 8004388:	68d8      	ldr	r0, [r3, #12]
 800438a:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 800438e:	6802      	ldr	r2, [r0, #0]
 8004390:	6813      	ldr	r3, [r2, #0]
 8004392:	1f0d      	subs	r5, r1, #4
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800439a:	1f36      	subs	r6, r6, #4
 800439c:	42a5      	cmp	r5, r4
 800439e:	d309      	bcc.n	80043b4 <forward_sqrt+0x48>
 80043a0:	ed95 0a00 	vldr	s0, [r5]
 80043a4:	1f2d      	subs	r5, r5, #4
 80043a6:	f001 fc35 	bl	8005c14 <ai_math_sqrt>
 80043aa:	ed86 0a00 	vstr	s0, [r6]
 80043ae:	1f36      	subs	r6, r6, #4
 80043b0:	42a5      	cmp	r5, r4
 80043b2:	d2f5      	bcs.n	80043a0 <forward_sqrt+0x34>
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080043b8 <forward_soft_plus>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	6940      	ldr	r0, [r0, #20]
 80043bc:	6803      	ldr	r3, [r0, #0]
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	680c      	ldr	r4, [r1, #0]
 80043c2:	6866      	ldr	r6, [r4, #4]
 80043c4:	68a2      	ldr	r2, [r4, #8]
 80043c6:	68e1      	ldr	r1, [r4, #12]
 80043c8:	6920      	ldr	r0, [r4, #16]
 80043ca:	6824      	ldr	r4, [r4, #0]
 80043cc:	4356      	muls	r6, r2
 80043ce:	434e      	muls	r6, r1
 80043d0:	68a4      	ldr	r4, [r4, #8]
 80043d2:	4346      	muls	r6, r0
 80043d4:	68d8      	ldr	r0, [r3, #12]
 80043d6:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 80043da:	6802      	ldr	r2, [r0, #0]
 80043dc:	6813      	ldr	r3, [r2, #0]
 80043de:	1f0d      	subs	r5, r1, #4
 80043e0:	6899      	ldr	r1, [r3, #8]
 80043e2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80043e6:	1f36      	subs	r6, r6, #4
 80043e8:	42a5      	cmp	r5, r4
 80043ea:	d30f      	bcc.n	800440c <forward_soft_plus+0x54>
 80043ec:	ed95 0a00 	vldr	s0, [r5]
 80043f0:	1f2d      	subs	r5, r5, #4
 80043f2:	f00d fc43 	bl	8011c7c <expf>
 80043f6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80043fa:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043fe:	f00d fcbb 	bl	8011d78 <logf>
 8004402:	ed86 0a00 	vstr	s0, [r6]
 8004406:	1f36      	subs	r6, r6, #4
 8004408:	42a5      	cmp	r5, r4
 800440a:	d2ef      	bcs.n	80043ec <forward_soft_plus+0x34>
 800440c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004410 <forward_soft_sign>:
 8004410:	b470      	push	{r4, r5, r6}
 8004412:	6940      	ldr	r0, [r0, #20]
 8004414:	6803      	ldr	r3, [r0, #0]
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	680c      	ldr	r4, [r1, #0]
 800441a:	6865      	ldr	r5, [r4, #4]
 800441c:	68a2      	ldr	r2, [r4, #8]
 800441e:	68e1      	ldr	r1, [r4, #12]
 8004420:	6920      	ldr	r0, [r4, #16]
 8004422:	6824      	ldr	r4, [r4, #0]
 8004424:	4355      	muls	r5, r2
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	434d      	muls	r5, r1
 800442c:	4345      	muls	r5, r0
 800442e:	68a0      	ldr	r0, [r4, #8]
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004436:	68a6      	ldr	r6, [r4, #8]
 8004438:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800443c:	1f09      	subs	r1, r1, #4
 800443e:	1f2a      	subs	r2, r5, #4
 8004440:	4281      	cmp	r1, r0
 8004442:	d30f      	bcc.n	8004464 <forward_soft_sign+0x54>
 8004444:	ed91 0a00 	vldr	s0, [r1]
 8004448:	1f09      	subs	r1, r1, #4
 800444a:	eef0 0ac0 	vabs.f32	s1, s0
 800444e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004452:	ee70 0a81 	vadd.f32	s1, s1, s2
 8004456:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800445a:	ed82 0a00 	vstr	s0, [r2]
 800445e:	1f12      	subs	r2, r2, #4
 8004460:	4281      	cmp	r1, r0
 8004462:	d2ef      	bcs.n	8004444 <forward_soft_sign+0x34>
 8004464:	bc70      	pop	{r4, r5, r6}
 8004466:	4770      	bx	lr

08004468 <forward_tanh>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	6940      	ldr	r0, [r0, #20]
 800446c:	6803      	ldr	r3, [r0, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	680c      	ldr	r4, [r1, #0]
 8004472:	6866      	ldr	r6, [r4, #4]
 8004474:	68a2      	ldr	r2, [r4, #8]
 8004476:	68e1      	ldr	r1, [r4, #12]
 8004478:	6920      	ldr	r0, [r4, #16]
 800447a:	6824      	ldr	r4, [r4, #0]
 800447c:	4356      	muls	r6, r2
 800447e:	434e      	muls	r6, r1
 8004480:	68a4      	ldr	r4, [r4, #8]
 8004482:	4346      	muls	r6, r0
 8004484:	68d8      	ldr	r0, [r3, #12]
 8004486:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 800448a:	6802      	ldr	r2, [r0, #0]
 800448c:	6813      	ldr	r3, [r2, #0]
 800448e:	1f0d      	subs	r5, r1, #4
 8004490:	6899      	ldr	r1, [r3, #8]
 8004492:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004496:	1f36      	subs	r6, r6, #4
 8004498:	42a5      	cmp	r5, r4
 800449a:	d309      	bcc.n	80044b0 <forward_tanh+0x48>
 800449c:	ed95 0a00 	vldr	s0, [r5]
 80044a0:	1f2d      	subs	r5, r5, #4
 80044a2:	f00d fe27 	bl	80120f4 <tanhf>
 80044a6:	ed86 0a00 	vstr	s0, [r6]
 80044aa:	1f36      	subs	r6, r6, #4
 80044ac:	42a5      	cmp	r5, r4
 80044ae:	d2f5      	bcs.n	800449c <forward_tanh+0x34>
 80044b0:	bd70      	pop	{r4, r5, r6, pc}

080044b2 <forward_sm>:
 80044b2:	b570      	push	{r4, r5, r6, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	6940      	ldr	r0, [r0, #20]
 80044b8:	6800      	ldr	r0, [r0, #0]
 80044ba:	6801      	ldr	r1, [r0, #0]
 80044bc:	68c2      	ldr	r2, [r0, #12]
 80044be:	680c      	ldr	r4, [r1, #0]
 80044c0:	6815      	ldr	r5, [r2, #0]
 80044c2:	68a2      	ldr	r2, [r4, #8]
 80044c4:	68a8      	ldr	r0, [r5, #8]
 80044c6:	9200      	str	r2, [sp, #0]
 80044c8:	9001      	str	r0, [sp, #4]
 80044ca:	6866      	ldr	r6, [r4, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	68e1      	ldr	r1, [r4, #12]
 80044d0:	6920      	ldr	r0, [r4, #16]
 80044d2:	6824      	ldr	r4, [r4, #0]
 80044d4:	4372      	muls	r2, r6
 80044d6:	682d      	ldr	r5, [r5, #0]
 80044d8:	434a      	muls	r2, r1
 80044da:	68a1      	ldr	r1, [r4, #8]
 80044dc:	4342      	muls	r2, r0
 80044de:	68a8      	ldr	r0, [r5, #8]
 80044e0:	f7ff fa46 	bl	8003970 <nl_func_sm_array_f32>
 80044e4:	b002      	add	sp, #8
 80044e6:	bd70      	pop	{r4, r5, r6, pc}

080044e8 <forward_hardmax>:
 80044e8:	b470      	push	{r4, r5, r6}
 80044ea:	b081      	sub	sp, #4
 80044ec:	6941      	ldr	r1, [r0, #20]
 80044ee:	6980      	ldr	r0, [r0, #24]
 80044f0:	680c      	ldr	r4, [r1, #0]
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	68e4      	ldr	r4, [r4, #12]
 80044f6:	6883      	ldr	r3, [r0, #8]
 80044f8:	6811      	ldr	r1, [r2, #0]
 80044fa:	6826      	ldr	r6, [r4, #0]
 80044fc:	680d      	ldr	r5, [r1, #0]
 80044fe:	1d0a      	adds	r2, r1, #4
 8004500:	68a9      	ldr	r1, [r5, #8]
 8004502:	6835      	ldr	r5, [r6, #0]
 8004504:	68a8      	ldr	r0, [r5, #8]
 8004506:	b001      	add	sp, #4
 8004508:	bc70      	pop	{r4, r5, r6}
 800450a:	f7ff bb5b 	b.w	8003bc4 <nl_func_hardmax_array_f32>
	...

08004510 <pool_func_mp_array_f32>:
 8004510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004514:	469e      	mov	lr, r3
 8004516:	4689      	mov	r9, r1
 8004518:	b086      	sub	sp, #24
 800451a:	4692      	mov	sl, r2
 800451c:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
 8004520:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004524:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8004528:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800452a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800452c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800452e:	6880      	ldr	r0, [r0, #8]
 8004530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004532:	9004      	str	r0, [sp, #16]
 8004534:	1e70      	subs	r0, r6, #1
 8004536:	fb10 f707 	smulbb	r7, r0, r7
 800453a:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800453e:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8004542:	6889      	ldr	r1, [r1, #8]
 8004544:	1aff      	subs	r7, r7, r3
 8004546:	19c7      	adds	r7, r0, r7
 8004548:	1e78      	subs	r0, r7, #1
 800454a:	eba0 000a 	sub.w	r0, r0, sl
 800454e:	432e      	orrs	r6, r5
 8004550:	f040 80d7 	bne.w	8004702 <pool_func_mp_array_f32+0x1f2>
 8004554:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8004558:	1e5f      	subs	r7, r3, #1
 800455a:	fb17 f702 	smulbb	r7, r7, r2
 800455e:	1b7f      	subs	r7, r7, r5
 8004560:	19e7      	adds	r7, r4, r7
 8004562:	1e7e      	subs	r6, r7, #1
 8004564:	eba6 0609 	sub.w	r6, r6, r9
 8004568:	b236      	sxth	r6, r6
 800456a:	2e00      	cmp	r6, #0
 800456c:	bf44      	itt	mi
 800456e:	b200      	sxthmi	r0, r0
 8004570:	2800      	cmpmi	r0, #0
 8004572:	f140 80c6 	bpl.w	8004702 <pool_func_mp_array_f32+0x1f2>
 8004576:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 800457a:	2700      	movs	r7, #0
 800457c:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8004894 <.text_3>
 8004580:	f1b0 0f00 	cmp.w	r0, #0
 8004584:	f000 8183 	beq.w	800488e <pool_func_mp_array_f32+0x37e>
 8004588:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 800458c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8004590:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8004594:	f04f 0c00 	mov.w	ip, #0
 8004598:	fb15 3507 	smlabb	r5, r5, r7, r3
 800459c:	2800      	cmp	r0, #0
 800459e:	b22d      	sxth	r5, r5
 80045a0:	f000 80a7 	beq.w	80046f2 <pool_func_mp_array_f32+0x1e2>
 80045a4:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 80045a8:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 80045ac:	f8cd 700c 	str.w	r7, [sp, #12]
 80045b0:	f8cd c004 	str.w	ip, [sp, #4]
 80045b4:	f8ad e000 	strh.w	lr, [sp]
 80045b8:	f8bd e054 	ldrh.w	lr, [sp, #84]	; 0x54
 80045bc:	9f01      	ldr	r7, [sp, #4]
 80045be:	f8bd 6000 	ldrh.w	r6, [sp]
 80045c2:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 80045c6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80045ca:	f8dd c004 	ldr.w	ip, [sp, #4]
 80045ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80045d2:	2300      	movs	r3, #0
 80045d4:	fb00 2c0c 	mla	ip, r0, ip, r2
 80045d8:	9a03      	ldr	r2, [sp, #12]
 80045da:	fb0e 7702 	mla	r7, lr, r2, r7
 80045de:	f8bd 2000 	ldrh.w	r2, [sp]
 80045e2:	437e      	muls	r6, r7
 80045e4:	9605      	str	r6, [sp, #20]
 80045e6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80045ea:	fa0f fc8c 	sxth.w	ip, ip
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	fb06 f808 	mul.w	r8, r6, r8
 80045f4:	fa0f f888 	sxth.w	r8, r8
 80045f8:	d06a      	beq.n	80046d0 <pool_func_mp_array_f32+0x1c0>
 80045fa:	9102      	str	r1, [sp, #8]
 80045fc:	f8dd 600c 	ldr.w	r6, [sp, #12]
 8004600:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004604:	f8bd e000 	ldrh.w	lr, [sp]
 8004608:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 800460c:	eef0 0a40 	vmov.f32	s1, s0
 8004610:	4371      	muls	r1, r6
 8004612:	b209      	sxth	r1, r1
 8004614:	460a      	mov	r2, r1
 8004616:	42aa      	cmp	r2, r5
 8004618:	9103      	str	r1, [sp, #12]
 800461a:	da48      	bge.n	80046ae <pool_func_mp_array_f32+0x19e>
 800461c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004620:	eba5 0902 	sub.w	r9, r5, r2
 8004624:	9a04      	ldr	r2, [sp, #16]
 8004626:	4379      	muls	r1, r7
 8004628:	45e0      	cmp	r8, ip
 800462a:	4644      	mov	r4, r8
 800462c:	da3a      	bge.n	80046a4 <pool_func_mp_array_f32+0x194>
 800462e:	ebac 0008 	sub.w	r0, ip, r8
 8004632:	ea5f 7ac0 	movs.w	sl, r0, lsl #31
 8004636:	d510      	bpl.n	800465a <pool_func_mp_array_f32+0x14a>
 8004638:	46f2      	mov	sl, lr
 800463a:	eb01 0b04 	add.w	fp, r1, r4
 800463e:	fb0b 3a0a 	mla	sl, fp, sl, r3
 8004642:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 8004646:	ed9b 1a00 	vldr	s2, [fp]
 800464a:	eeb4 1a60 	vcmp.f32	s2, s1
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	bf58      	it	pl
 8004654:	eef0 0a41 	vmovpl.f32	s1, s2
 8004658:	1c64      	adds	r4, r4, #1
 800465a:	0840      	lsrs	r0, r0, #1
 800465c:	d022      	beq.n	80046a4 <pool_func_mp_array_f32+0x194>
 800465e:	46f2      	mov	sl, lr
 8004660:	eb01 0b04 	add.w	fp, r1, r4
 8004664:	fb0b 3b0a 	mla	fp, fp, sl, r3
 8004668:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800466c:	ed9b 1a00 	vldr	s2, [fp]
 8004670:	eeb4 1a60 	vcmp.f32	s2, s1
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	bf58      	it	pl
 800467a:	eef0 0a41 	vmovpl.f32	s1, s2
 800467e:	1c64      	adds	r4, r4, #1
 8004680:	eb01 0b04 	add.w	fp, r1, r4
 8004684:	fb0b 3a0a 	mla	sl, fp, sl, r3
 8004688:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800468c:	ed9a 1a00 	vldr	s2, [sl]
 8004690:	eeb4 1a60 	vcmp.f32	s2, s1
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	bf58      	it	pl
 800469a:	eef0 0a41 	vmovpl.f32	s1, s2
 800469e:	1c64      	adds	r4, r4, #1
 80046a0:	1e40      	subs	r0, r0, #1
 80046a2:	d1dc      	bne.n	800465e <pool_func_mp_array_f32+0x14e>
 80046a4:	1879      	adds	r1, r7, r1
 80046a6:	f1b9 0901 	subs.w	r9, r9, #1
 80046aa:	d1bd      	bne.n	8004628 <pool_func_mp_array_f32+0x118>
 80046ac:	9204      	str	r2, [sp, #16]
 80046ae:	9a05      	ldr	r2, [sp, #20]
 80046b0:	9902      	ldr	r1, [sp, #8]
 80046b2:	18d2      	adds	r2, r2, r3
 80046b4:	1c5b      	adds	r3, r3, #1
 80046b6:	eb01 0982 	add.w	r9, r1, r2, lsl #2
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	4573      	cmp	r3, lr
 80046be:	edc9 0a00 	vstr	s1, [r9]
 80046c2:	dba1      	blt.n	8004608 <pool_func_mp_array_f32+0xf8>
 80046c4:	9902      	ldr	r1, [sp, #8]
 80046c6:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80046ca:	9603      	str	r6, [sp, #12]
 80046cc:	f8ad e000 	strh.w	lr, [sp]
 80046d0:	9a01      	ldr	r2, [sp, #4]
 80046d2:	1c52      	adds	r2, r2, #1
 80046d4:	b212      	sxth	r2, r2
 80046d6:	9201      	str	r2, [sp, #4]
 80046d8:	4610      	mov	r0, r2
 80046da:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80046de:	4290      	cmp	r0, r2
 80046e0:	f6ff af6a 	blt.w	80045b8 <pool_func_mp_array_f32+0xa8>
 80046e4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 80046e8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80046ec:	9f03      	ldr	r7, [sp, #12]
 80046ee:	f8bd e000 	ldrh.w	lr, [sp]
 80046f2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80046f6:	1c7f      	adds	r7, r7, #1
 80046f8:	b23f      	sxth	r7, r7
 80046fa:	429f      	cmp	r7, r3
 80046fc:	f280 80c7 	bge.w	800488e <pool_func_mp_array_f32+0x37e>
 8004700:	e742      	b.n	8004588 <pool_func_mp_array_f32+0x78>
 8004702:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004706:	f04f 0c00 	mov.w	ip, #0
 800470a:	464b      	mov	r3, r9
 800470c:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8004894 <.text_3>
 8004710:	f1b0 0f00 	cmp.w	r0, #0
 8004714:	f000 80bb 	beq.w	800488e <pool_func_mp_array_f32+0x37e>
 8004718:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 800471c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8004720:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 8004724:	f04f 0800 	mov.w	r8, #0
 8004728:	fb1c f709 	smulbb	r7, ip, r9
 800472c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 8004730:	eba7 0909 	sub.w	r9, r7, r9
 8004734:	2800      	cmp	r0, #0
 8004736:	44b1      	add	r9, r6
 8004738:	fa0f f989 	sxth.w	r9, r9
 800473c:	f000 809e 	beq.w	800487c <pool_func_mp_array_f32+0x36c>
 8004740:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 8004744:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8004748:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 800474c:	f8cd c00c 	str.w	ip, [sp, #12]
 8004750:	f8cd 8004 	str.w	r8, [sp, #4]
 8004754:	f8ad e000 	strh.w	lr, [sp]
 8004758:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 800475c:	9d01      	ldr	r5, [sp, #4]
 800475e:	f8bd 8054 	ldrh.w	r8, [sp, #84]	; 0x54
 8004762:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004766:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800476a:	f8bd 7000 	ldrh.w	r7, [sp]
 800476e:	fb15 f200 	smulbb	r2, r5, r0
 8004772:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
 8004776:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 800477a:	fb08 cc0e 	mla	ip, r8, lr, ip
 800477e:	1a10      	subs	r0, r2, r0
 8004780:	1828      	adds	r0, r5, r0
 8004782:	f8bd 5000 	ldrh.w	r5, [sp]
 8004786:	fb0c f707 	mul.w	r7, ip, r7
 800478a:	b200      	sxth	r0, r0
 800478c:	9705      	str	r7, [sp, #20]
 800478e:	2d00      	cmp	r5, #0
 8004790:	d060      	beq.n	8004854 <pool_func_mp_array_f32+0x344>
 8004792:	9102      	str	r1, [sp, #8]
 8004794:	2100      	movs	r1, #0
 8004796:	9c03      	ldr	r4, [sp, #12]
 8004798:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 800479c:	eef0 0a40 	vmov.f32	s1, s0
 80047a0:	fb14 f502 	smulbb	r5, r4, r2
 80047a4:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80047a8:	1aaa      	subs	r2, r5, r2
 80047aa:	b212      	sxth	r2, r2
 80047ac:	454a      	cmp	r2, r9
 80047ae:	da42      	bge.n	8004836 <pool_func_mp_array_f32+0x326>
 80047b0:	fb03 f802 	mul.w	r8, r3, r2
 80047b4:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 80047b8:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80047bc:	f8dd 7004 	ldr.w	r7, [sp, #4]
 80047c0:	fb17 fe06 	smulbb	lr, r7, r6
 80047c4:	ebae 0e05 	sub.w	lr, lr, r5
 80047c8:	fa0f fc8e 	sxth.w	ip, lr
 80047cc:	fa0f fe8e 	sxth.w	lr, lr
 80047d0:	4586      	cmp	lr, r0
 80047d2:	da27      	bge.n	8004824 <pool_func_mp_array_f32+0x314>
 80047d4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80047d8:	f8ad a002 	strh.w	sl, [sp, #2]
 80047dc:	2a00      	cmp	r2, #0
 80047de:	bf58      	it	pl
 80047e0:	f1bc 0f00 	cmppl.w	ip, #0
 80047e4:	d416      	bmi.n	8004814 <pool_func_mp_array_f32+0x304>
 80047e6:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80047ea:	4552      	cmp	r2, sl
 80047ec:	bfb8      	it	lt
 80047ee:	459c      	cmplt	ip, r3
 80047f0:	da10      	bge.n	8004814 <pool_func_mp_array_f32+0x304>
 80047f2:	f8bd a000 	ldrh.w	sl, [sp]
 80047f6:	eb08 0b0c 	add.w	fp, r8, ip
 80047fa:	fb0b 1a0a 	mla	sl, fp, sl, r1
 80047fe:	eb0e 0a8a 	add.w	sl, lr, sl, lsl #2
 8004802:	ed9a 1a00 	vldr	s2, [sl]
 8004806:	eeb4 1a60 	vcmp.f32	s2, s1
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	bf58      	it	pl
 8004810:	eef0 0a41 	vmovpl.f32	s1, s2
 8004814:	f10c 0c01 	add.w	ip, ip, #1
 8004818:	4584      	cmp	ip, r0
 800481a:	dbdf      	blt.n	80047dc <pool_func_mp_array_f32+0x2cc>
 800481c:	f8cd e010 	str.w	lr, [sp, #16]
 8004820:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004824:	1c52      	adds	r2, r2, #1
 8004826:	454a      	cmp	r2, r9
 8004828:	4498      	add	r8, r3
 800482a:	dbc9      	blt.n	80047c0 <pool_func_mp_array_f32+0x2b0>
 800482c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8004830:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 8004834:	9701      	str	r7, [sp, #4]
 8004836:	9d05      	ldr	r5, [sp, #20]
 8004838:	9e02      	ldr	r6, [sp, #8]
 800483a:	f8bd 2000 	ldrh.w	r2, [sp]
 800483e:	186d      	adds	r5, r5, r1
 8004840:	1c49      	adds	r1, r1, #1
 8004842:	eb06 0785 	add.w	r7, r6, r5, lsl #2
 8004846:	b209      	sxth	r1, r1
 8004848:	4291      	cmp	r1, r2
 800484a:	edc7 0a00 	vstr	s1, [r7]
 800484e:	dba3      	blt.n	8004798 <pool_func_mp_array_f32+0x288>
 8004850:	9902      	ldr	r1, [sp, #8]
 8004852:	9403      	str	r4, [sp, #12]
 8004854:	9a01      	ldr	r2, [sp, #4]
 8004856:	1c52      	adds	r2, r2, #1
 8004858:	b212      	sxth	r2, r2
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	4615      	mov	r5, r2
 800485e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8004862:	4295      	cmp	r5, r2
 8004864:	f6ff af78 	blt.w	8004758 <pool_func_mp_array_f32+0x248>
 8004868:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 800486c:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8004870:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8004874:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004878:	f8bd e000 	ldrh.w	lr, [sp]
 800487c:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004880:	f10c 0c01 	add.w	ip, ip, #1
 8004884:	fa0f fc8c 	sxth.w	ip, ip
 8004888:	4584      	cmp	ip, r0
 800488a:	f6ff af45 	blt.w	8004718 <pool_func_mp_array_f32+0x208>
 800488e:	b006      	add	sp, #24
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004894 <.text_3>:
 8004894:	cf000000 	.word	0xcf000000

08004898 <pool_func_ap_array_f32>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	468b      	mov	fp, r1
 800489e:	4682      	mov	sl, r0
 80048a0:	4610      	mov	r0, r2
 80048a2:	b087      	sub	sp, #28
 80048a4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80048a8:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 80048ac:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 80048b0:	f9bd c04c 	ldrsh.w	ip, [sp, #76]	; 0x4c
 80048b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80048b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80048b8:	4699      	mov	r9, r3
 80048ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80048be:	f1aa 0e01 	sub.w	lr, sl, #1
 80048c2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80048c6:	fb1e f404 	smulbb	r4, lr, r4
 80048ca:	f8bd e04c 	ldrh.w	lr, [sp, #76]	; 0x4c
 80048ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	eba4 040c 	sub.w	r4, r4, ip
 80048d6:	4454      	add	r4, sl
 80048d8:	f1a4 0a01 	sub.w	sl, r4, #1
 80048dc:	ea56 0e0e 	orrs.w	lr, r6, lr
 80048e0:	ebaa 0a00 	sub.w	sl, sl, r0
 80048e4:	f040 80cb 	bne.w	8004a7e <pool_func_ap_array_f32+0x1e6>
 80048e8:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 80048ec:	f1ac 0401 	sub.w	r4, ip, #1
 80048f0:	fb14 f403 	smulbb	r4, r4, r3
 80048f4:	1ba4      	subs	r4, r4, r6
 80048f6:	4444      	add	r4, r8
 80048f8:	f1a4 0e01 	sub.w	lr, r4, #1
 80048fc:	ebae 0e0b 	sub.w	lr, lr, fp
 8004900:	fa0f fe8e 	sxth.w	lr, lr
 8004904:	f1be 0f00 	cmp.w	lr, #0
 8004908:	bf44      	itt	mi
 800490a:	fa0f fa8a 	sxthmi.w	sl, sl
 800490e:	f1ba 0f00 	cmpmi.w	sl, #0
 8004912:	f140 80b4 	bpl.w	8004a7e <pool_func_ap_array_f32+0x1e6>
 8004916:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 800491a:	2600      	movs	r6, #0
 800491c:	f1b0 0f00 	cmp.w	r0, #0
 8004920:	f000 8187 	beq.w	8004c32 <pool_func_ap_array_f32+0x39a>
 8004924:	f8bd e054 	ldrh.w	lr, [sp, #84]	; 0x54
 8004928:	f9bd a054 	ldrsh.w	sl, [sp, #84]	; 0x54
 800492c:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
 8004930:	f8bd 4058 	ldrh.w	r4, [sp, #88]	; 0x58
 8004934:	2500      	movs	r5, #0
 8004936:	fb0e fe06 	mul.w	lr, lr, r6
 800493a:	fb1a ca06 	smlabb	sl, sl, r6, ip
 800493e:	2c00      	cmp	r4, #0
 8004940:	fa0f fe8e 	sxth.w	lr, lr
 8004944:	fa0f fa8a 	sxth.w	sl, sl
 8004948:	f8cd e010 	str.w	lr, [sp, #16]
 800494c:	f000 808f 	beq.w	8004a6e <pool_func_ap_array_f32+0x1d6>
 8004950:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8004954:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8004958:	9605      	str	r6, [sp, #20]
 800495a:	9501      	str	r5, [sp, #4]
 800495c:	f8ad 900a 	strh.w	r9, [sp, #10]
 8004960:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
 8004964:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8004968:	9801      	ldr	r0, [sp, #4]
 800496a:	9c05      	ldr	r4, [sp, #20]
 800496c:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 8004970:	2300      	movs	r3, #0
 8004972:	fb10 f908 	smulbb	r9, r0, r8
 8004976:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 800497a:	fb05 0004 	mla	r0, r5, r4, r0
 800497e:	f1b8 0f00 	cmp.w	r8, #0
 8004982:	44cc      	add	ip, r9
 8004984:	fa0f fc8c 	sxth.w	ip, ip
 8004988:	fb00 f008 	mul.w	r0, r0, r8
 800498c:	9006      	str	r0, [sp, #24]
 800498e:	d05d      	beq.n	8004a4c <pool_func_ap_array_f32+0x1b4>
 8004990:	9200      	str	r2, [sp, #0]
 8004992:	f8ad b00c 	strh.w	fp, [sp, #12]
 8004996:	9804      	ldr	r0, [sp, #16]
 8004998:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8004c38 <.text_5>
 800499c:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8004c38 <.text_5>
 80049a0:	4550      	cmp	r0, sl
 80049a2:	da41      	bge.n	8004a28 <pool_func_ap_array_f32+0x190>
 80049a4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80049a8:	9c04      	ldr	r4, [sp, #16]
 80049aa:	460a      	mov	r2, r1
 80049ac:	ee10 ea90 	vmov	lr, s1
 80049b0:	fb00 f00b 	mul.w	r0, r0, fp
 80049b4:	ebaa 0404 	sub.w	r4, sl, r4
 80049b8:	ea4f 0100 	mov.w	r1, r0
 80049bc:	fa0f f689 	sxth.w	r6, r9
 80049c0:	4566      	cmp	r6, ip
 80049c2:	464d      	mov	r5, r9
 80049c4:	da2a      	bge.n	8004a1c <pool_func_ap_array_f32+0x184>
 80049c6:	ebac 0006 	sub.w	r0, ip, r6
 80049ca:	44e6      	add	lr, ip
 80049cc:	07c7      	lsls	r7, r0, #31
 80049ce:	ebae 0e06 	sub.w	lr, lr, r6
 80049d2:	d509      	bpl.n	80049e8 <pool_func_ap_array_f32+0x150>
 80049d4:	198e      	adds	r6, r1, r6
 80049d6:	1c6d      	adds	r5, r5, #1
 80049d8:	fb06 3608 	mla	r6, r6, r8, r3
 80049dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80049e0:	edd6 0a00 	vldr	s1, [r6]
 80049e4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80049e8:	0840      	lsrs	r0, r0, #1
 80049ea:	d017      	beq.n	8004a1c <pool_func_ap_array_f32+0x184>
 80049ec:	fa01 f685 	sxtah	r6, r1, r5
 80049f0:	1c6d      	adds	r5, r5, #1
 80049f2:	fb06 3608 	mla	r6, r6, r8, r3
 80049f6:	fa01 f785 	sxtah	r7, r1, r5
 80049fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80049fe:	fb07 3708 	mla	r7, r7, r8, r3
 8004a02:	1c6d      	adds	r5, r5, #1
 8004a04:	1e40      	subs	r0, r0, #1
 8004a06:	edd6 0a00 	vldr	s1, [r6]
 8004a0a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8004a0e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004a12:	ed96 1a00 	vldr	s2, [r6]
 8004a16:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004a1a:	d1e7      	bne.n	80049ec <pool_func_ap_array_f32+0x154>
 8004a1c:	1e64      	subs	r4, r4, #1
 8004a1e:	4459      	add	r1, fp
 8004a20:	d1cc      	bne.n	80049bc <pool_func_ap_array_f32+0x124>
 8004a22:	4611      	mov	r1, r2
 8004a24:	ee00 ea90 	vmov	s1, lr
 8004a28:	9a06      	ldr	r2, [sp, #24]
 8004a2a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004a2e:	9800      	ldr	r0, [sp, #0]
 8004a30:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004a34:	18d2      	adds	r2, r2, r3
 8004a36:	1c5b      	adds	r3, r3, #1
 8004a38:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	4543      	cmp	r3, r8
 8004a40:	ed8b 0a00 	vstr	s0, [fp]
 8004a44:	dba7      	blt.n	8004996 <pool_func_ap_array_f32+0xfe>
 8004a46:	9a00      	ldr	r2, [sp, #0]
 8004a48:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8004a4c:	9801      	ldr	r0, [sp, #4]
 8004a4e:	1c40      	adds	r0, r0, #1
 8004a50:	b200      	sxth	r0, r0
 8004a52:	9001      	str	r0, [sp, #4]
 8004a54:	4603      	mov	r3, r0
 8004a56:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	f6ff af80 	blt.w	8004960 <pool_func_ap_array_f32+0xc8>
 8004a60:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8004a64:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8004a68:	9e05      	ldr	r6, [sp, #20]
 8004a6a:	f8bd 900a 	ldrh.w	r9, [sp, #10]
 8004a6e:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8004a72:	1c76      	adds	r6, r6, #1
 8004a74:	b236      	sxth	r6, r6
 8004a76:	4286      	cmp	r6, r0
 8004a78:	f280 80db 	bge.w	8004c32 <pool_func_ap_array_f32+0x39a>
 8004a7c:	e752      	b.n	8004924 <pool_func_ap_array_f32+0x8c>
 8004a7e:	46da      	mov	sl, fp
 8004a80:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8004a84:	f04f 0c00 	mov.w	ip, #0
 8004a88:	f1bb 0f00 	cmp.w	fp, #0
 8004a8c:	f000 80d1 	beq.w	8004c32 <pool_func_ap_array_f32+0x39a>
 8004a90:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004a94:	f9bd e04c 	ldrsh.w	lr, [sp, #76]	; 0x4c
 8004a98:	f9bd 5054 	ldrsh.w	r5, [sp, #84]	; 0x54
 8004a9c:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8004aa0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8004aa4:	fb1c f404 	smulbb	r4, ip, r4
 8004aa8:	eba4 040e 	sub.w	r4, r4, lr
 8004aac:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004ab0:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 8004ab4:	fb1c f505 	smulbb	r5, ip, r5
 8004ab8:	1b2c      	subs	r4, r5, r4
 8004aba:	2500      	movs	r5, #0
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	445c      	add	r4, fp
 8004ac0:	b224      	sxth	r4, r4
 8004ac2:	f000 80ad 	beq.w	8004c20 <pool_func_ap_array_f32+0x388>
 8004ac6:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8004aca:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8004ace:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8004ad2:	f8cd c00c 	str.w	ip, [sp, #12]
 8004ad6:	9501      	str	r5, [sp, #4]
 8004ad8:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8004adc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8004ae0:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8004ae4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004ae8:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
 8004aec:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8004af0:	fb1b f303 	smulbb	r3, fp, r3
 8004af4:	fb05 bb0c 	mla	fp, r5, ip, fp
 8004af8:	1b9e      	subs	r6, r3, r6
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	44b6      	add	lr, r6
 8004b00:	fa0f fe8e 	sxth.w	lr, lr
 8004b04:	fb0b fb09 	mul.w	fp, fp, r9
 8004b08:	b236      	sxth	r6, r6
 8004b0a:	f8cd b010 	str.w	fp, [sp, #16]
 8004b0e:	d075      	beq.n	8004bfc <pool_func_ap_array_f32+0x364>
 8004b10:	9200      	str	r2, [sp, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004b18:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8004c38 <.text_5>
 8004b1c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8004c38 <.text_5>
 8004b20:	45a0      	cmp	r8, r4
 8004b22:	da5a      	bge.n	8004bda <pool_func_ap_array_f32+0x342>
 8004b24:	fb0a fc08 	mul.w	ip, sl, r8
 8004b28:	ee10 3a90 	vmov	r3, s1
 8004b2c:	4576      	cmp	r6, lr
 8004b2e:	46b3      	mov	fp, r6
 8004b30:	da4c      	bge.n	8004bcc <pool_func_ap_array_f32+0x334>
 8004b32:	ebae 0506 	sub.w	r5, lr, r6
 8004b36:	07ef      	lsls	r7, r5, #31
 8004b38:	d516      	bpl.n	8004b68 <pool_func_ap_array_f32+0x2d0>
 8004b3a:	f1b8 0f00 	cmp.w	r8, #0
 8004b3e:	bf58      	it	pl
 8004b40:	f1bb 0f00 	cmppl.w	fp, #0
 8004b44:	d40e      	bmi.n	8004b64 <pool_func_ap_array_f32+0x2cc>
 8004b46:	4580      	cmp	r8, r0
 8004b48:	bfb8      	it	lt
 8004b4a:	45d3      	cmplt	fp, sl
 8004b4c:	da0a      	bge.n	8004b64 <pool_func_ap_array_f32+0x2cc>
 8004b4e:	eb0c 070b 	add.w	r7, ip, fp
 8004b52:	1c5b      	adds	r3, r3, #1
 8004b54:	fb07 2709 	mla	r7, r7, r9, r2
 8004b58:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004b5c:	edd7 0a00 	vldr	s1, [r7]
 8004b60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004b64:	f10b 0b01 	add.w	fp, fp, #1
 8004b68:	086d      	lsrs	r5, r5, #1
 8004b6a:	d02f      	beq.n	8004bcc <pool_func_ap_array_f32+0x334>
 8004b6c:	465f      	mov	r7, fp
 8004b6e:	46ab      	mov	fp, r5
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	d405      	bmi.n	8004b82 <pool_func_ap_array_f32+0x2ea>
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	bf48      	it	mi
 8004b7a:	1c7f      	addmi	r7, r7, #1
 8004b7c:	d411      	bmi.n	8004ba2 <pool_func_ap_array_f32+0x30a>
 8004b7e:	4580      	cmp	r8, r0
 8004b80:	db01      	blt.n	8004b86 <pool_func_ap_array_f32+0x2ee>
 8004b82:	1c7f      	adds	r7, r7, #1
 8004b84:	e01e      	b.n	8004bc4 <pool_func_ap_array_f32+0x32c>
 8004b86:	1c7d      	adds	r5, r7, #1
 8004b88:	4557      	cmp	r7, sl
 8004b8a:	da09      	bge.n	8004ba0 <pool_func_ap_array_f32+0x308>
 8004b8c:	4467      	add	r7, ip
 8004b8e:	1c5b      	adds	r3, r3, #1
 8004b90:	fb07 2709 	mla	r7, r7, r9, r2
 8004b94:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004b98:	edd7 0a00 	vldr	s1, [r7]
 8004b9c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ba0:	462f      	mov	r7, r5
 8004ba2:	2f00      	cmp	r7, #0
 8004ba4:	d40e      	bmi.n	8004bc4 <pool_func_ap_array_f32+0x32c>
 8004ba6:	4580      	cmp	r8, r0
 8004ba8:	bfb8      	it	lt
 8004baa:	4557      	cmplt	r7, sl
 8004bac:	da0a      	bge.n	8004bc4 <pool_func_ap_array_f32+0x32c>
 8004bae:	eb0c 0507 	add.w	r5, ip, r7
 8004bb2:	1c5b      	adds	r3, r3, #1
 8004bb4:	fb05 2509 	mla	r5, r5, r9, r2
 8004bb8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004bbc:	edd5 0a00 	vldr	s1, [r5]
 8004bc0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004bc4:	1c7f      	adds	r7, r7, #1
 8004bc6:	f1bb 0b01 	subs.w	fp, fp, #1
 8004bca:	d1d1      	bne.n	8004b70 <pool_func_ap_array_f32+0x2d8>
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	45a0      	cmp	r8, r4
 8004bd2:	44d4      	add	ip, sl
 8004bd4:	dbaa      	blt.n	8004b2c <pool_func_ap_array_f32+0x294>
 8004bd6:	ee00 3a90 	vmov	s1, r3
 8004bda:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004bde:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004be8:	4490      	add	r8, r2
 8004bea:	1c52      	adds	r2, r2, #1
 8004bec:	eb03 0b88 	add.w	fp, r3, r8, lsl #2
 8004bf0:	b212      	sxth	r2, r2
 8004bf2:	454a      	cmp	r2, r9
 8004bf4:	ed8b 0a00 	vstr	s0, [fp]
 8004bf8:	db8c      	blt.n	8004b14 <pool_func_ap_array_f32+0x27c>
 8004bfa:	9a00      	ldr	r2, [sp, #0]
 8004bfc:	9b01      	ldr	r3, [sp, #4]
 8004bfe:	1c5b      	adds	r3, r3, #1
 8004c00:	b21b      	sxth	r3, r3
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	4698      	mov	r8, r3
 8004c06:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8004c0a:	4598      	cmp	r8, r3
 8004c0c:	f6ff af64 	blt.w	8004ad8 <pool_func_ap_array_f32+0x240>
 8004c10:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8004c14:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8004c18:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8004c1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004c20:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8004c24:	f10c 0c01 	add.w	ip, ip, #1
 8004c28:	fa0f fc8c 	sxth.w	ip, ip
 8004c2c:	45dc      	cmp	ip, fp
 8004c2e:	f6ff af2f 	blt.w	8004a90 <pool_func_ap_array_f32+0x1f8>
 8004c32:	b007      	add	sp, #28
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c38 <.text_5>:
 8004c38:	00000000 	.word	0x00000000

08004c3c <pool_func_mp_kernel_array_f32>:
 8004c3c:	b470      	push	{r4, r5, r6}
 8004c3e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8004c42:	42a1      	cmp	r1, r4
 8004c44:	d257      	bcs.n	8004cf6 <pool_func_mp_kernel_array_f32+0xba>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d051      	beq.n	8004cee <pool_func_mp_kernel_array_f32+0xb2>
 8004c4a:	f013 0203 	ands.w	r2, r3, #3
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4606      	mov	r6, r0
 8004c52:	d011      	beq.n	8004c78 <pool_func_mp_kernel_array_f32+0x3c>
 8004c54:	ed96 0a00 	vldr	s0, [r6]
 8004c58:	edd5 0a00 	vldr	s1, [r5]
 8004c5c:	eef4 0a40 	vcmp.f32	s1, s0
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	bf58      	it	pl
 8004c66:	eeb0 0a60 	vmovpl.f32	s0, s1
 8004c6a:	ed86 0a00 	vstr	s0, [r6]
 8004c6e:	1e52      	subs	r2, r2, #1
 8004c70:	1d36      	adds	r6, r6, #4
 8004c72:	1d2d      	adds	r5, r5, #4
 8004c74:	2a00      	cmp	r2, #0
 8004c76:	d1ed      	bne.n	8004c54 <pool_func_mp_kernel_array_f32+0x18>
 8004c78:	089a      	lsrs	r2, r3, #2
 8004c7a:	d038      	beq.n	8004cee <pool_func_mp_kernel_array_f32+0xb2>
 8004c7c:	edd5 0a00 	vldr	s1, [r5]
 8004c80:	edd6 1a00 	vldr	s3, [r6]
 8004c84:	eef4 0a61 	vcmp.f32	s1, s3
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	bf48      	it	mi
 8004c8e:	eef0 0a61 	vmovmi.f32	s1, s3
 8004c92:	edc6 0a00 	vstr	s1, [r6]
 8004c96:	edd5 0a01 	vldr	s1, [r5, #4]
 8004c9a:	edd6 1a01 	vldr	s3, [r6, #4]
 8004c9e:	eef4 0a61 	vcmp.f32	s1, s3
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	ed96 0a02 	vldr	s0, [r6, #8]
 8004caa:	bf48      	it	mi
 8004cac:	eef0 0a61 	vmovmi.f32	s1, s3
 8004cb0:	edc6 0a01 	vstr	s1, [r6, #4]
 8004cb4:	ed95 1a02 	vldr	s2, [r5, #8]
 8004cb8:	eeb4 1a40 	vcmp.f32	s2, s0
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	edd6 1a03 	vldr	s3, [r6, #12]
 8004cc4:	bf48      	it	mi
 8004cc6:	eeb0 1a40 	vmovmi.f32	s2, s0
 8004cca:	ed86 1a02 	vstr	s2, [r6, #8]
 8004cce:	edd5 0a03 	vldr	s1, [r5, #12]
 8004cd2:	eef4 0a61 	vcmp.f32	s1, s3
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	bf58      	it	pl
 8004cdc:	eef0 1a60 	vmovpl.f32	s3, s1
 8004ce0:	edc6 1a03 	vstr	s3, [r6, #12]
 8004ce4:	1e52      	subs	r2, r2, #1
 8004ce6:	3610      	adds	r6, #16
 8004ce8:	3510      	adds	r5, #16
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d1c6      	bne.n	8004c7c <pool_func_mp_kernel_array_f32+0x40>
 8004cee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004cf2:	42a1      	cmp	r1, r4
 8004cf4:	d3a7      	bcc.n	8004c46 <pool_func_mp_kernel_array_f32+0xa>
 8004cf6:	bc70      	pop	{r4, r5, r6}
 8004cf8:	4770      	bx	lr
	...

08004cfc <pool_func_ap_kernel_array_f32>:
 8004cfc:	b470      	push	{r4, r5, r6}
 8004cfe:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8004d02:	42a1      	cmp	r1, r4
 8004d04:	d24f      	bcs.n	8004da6 <pool_func_ap_kernel_array_f32+0xaa>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d049      	beq.n	8004d9e <pool_func_ap_kernel_array_f32+0xa2>
 8004d0a:	f013 0203 	ands.w	r2, r3, #3
 8004d0e:	460d      	mov	r5, r1
 8004d10:	4606      	mov	r6, r0
 8004d12:	d00e      	beq.n	8004d32 <pool_func_ap_kernel_array_f32+0x36>
 8004d14:	4288      	cmp	r0, r1
 8004d16:	ed95 0a00 	vldr	s0, [r5]
 8004d1a:	bf1c      	itt	ne
 8004d1c:	edd6 0a00 	vldrne	s1, [r6]
 8004d20:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8004d24:	ed86 0a00 	vstr	s0, [r6]
 8004d28:	1e52      	subs	r2, r2, #1
 8004d2a:	1d36      	adds	r6, r6, #4
 8004d2c:	1d2d      	adds	r5, r5, #4
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	d1f0      	bne.n	8004d14 <pool_func_ap_kernel_array_f32+0x18>
 8004d32:	089a      	lsrs	r2, r3, #2
 8004d34:	d033      	beq.n	8004d9e <pool_func_ap_kernel_array_f32+0xa2>
 8004d36:	4288      	cmp	r0, r1
 8004d38:	edd5 1a00 	vldr	s3, [r5]
 8004d3c:	d10c      	bne.n	8004d58 <pool_func_ap_kernel_array_f32+0x5c>
 8004d3e:	edc6 1a00 	vstr	s3, [r6]
 8004d42:	ed95 0a01 	vldr	s0, [r5, #4]
 8004d46:	ed86 0a01 	vstr	s0, [r6, #4]
 8004d4a:	edd5 1a02 	vldr	s3, [r5, #8]
 8004d4e:	edc6 1a02 	vstr	s3, [r6, #8]
 8004d52:	edd5 1a03 	vldr	s3, [r5, #12]
 8004d56:	e01b      	b.n	8004d90 <pool_func_ap_kernel_array_f32+0x94>
 8004d58:	edd6 0a00 	vldr	s1, [r6]
 8004d5c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8004d60:	ed86 0a00 	vstr	s0, [r6]
 8004d64:	ed96 1a01 	vldr	s2, [r6, #4]
 8004d68:	ed95 0a01 	vldr	s0, [r5, #4]
 8004d6c:	ee71 0a00 	vadd.f32	s1, s2, s0
 8004d70:	edc6 0a01 	vstr	s1, [r6, #4]
 8004d74:	edd6 1a02 	vldr	s3, [r6, #8]
 8004d78:	edd5 0a02 	vldr	s1, [r5, #8]
 8004d7c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8004d80:	ed86 0a02 	vstr	s0, [r6, #8]
 8004d84:	ed96 0a03 	vldr	s0, [r6, #12]
 8004d88:	ed95 1a03 	vldr	s2, [r5, #12]
 8004d8c:	ee70 1a01 	vadd.f32	s3, s0, s2
 8004d90:	edc6 1a03 	vstr	s3, [r6, #12]
 8004d94:	1e52      	subs	r2, r2, #1
 8004d96:	3610      	adds	r6, #16
 8004d98:	3510      	adds	r5, #16
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	d1cb      	bne.n	8004d36 <pool_func_ap_kernel_array_f32+0x3a>
 8004d9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004da2:	42a1      	cmp	r1, r4
 8004da4:	d3af      	bcc.n	8004d06 <pool_func_ap_kernel_array_f32+0xa>
 8004da6:	9903      	ldr	r1, [sp, #12]
 8004da8:	b3a1      	cbz	r1, 8004e14 <pool_func_ap_kernel_array_f32+0x118>
 8004daa:	ee00 1a10 	vmov	s0, r1
 8004dae:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004db2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004db6:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8004dba:	b35b      	cbz	r3, 8004e14 <pool_func_ap_kernel_array_f32+0x118>
 8004dbc:	f013 0103 	ands.w	r1, r3, #3
 8004dc0:	f000 800a 	beq.w	8004dd8 <pool_func_ap_kernel_array_f32+0xdc>
 8004dc4:	edd0 0a00 	vldr	s1, [r0]
 8004dc8:	1e49      	subs	r1, r1, #1
 8004dca:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004dce:	edc0 0a00 	vstr	s1, [r0]
 8004dd2:	f100 0004 	add.w	r0, r0, #4
 8004dd6:	d1f5      	bne.n	8004dc4 <pool_func_ap_kernel_array_f32+0xc8>
 8004dd8:	089b      	lsrs	r3, r3, #2
 8004dda:	d01b      	beq.n	8004e14 <pool_func_ap_kernel_array_f32+0x118>
 8004ddc:	edd0 0a00 	vldr	s1, [r0]
 8004de0:	1e5b      	subs	r3, r3, #1
 8004de2:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004de6:	edc0 0a00 	vstr	s1, [r0]
 8004dea:	ed90 1a01 	vldr	s2, [r0, #4]
 8004dee:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004df2:	ed80 1a01 	vstr	s2, [r0, #4]
 8004df6:	edd0 0a02 	vldr	s1, [r0, #8]
 8004dfa:	ed90 1a03 	vldr	s2, [r0, #12]
 8004dfe:	ee60 1a80 	vmul.f32	s3, s1, s0
 8004e02:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004e06:	edc0 1a02 	vstr	s3, [r0, #8]
 8004e0a:	edc0 0a03 	vstr	s1, [r0, #12]
 8004e0e:	f100 0010 	add.w	r0, r0, #16
 8004e12:	d1e3      	bne.n	8004ddc <pool_func_ap_kernel_array_f32+0xe0>
 8004e14:	bc70      	pop	{r4, r5, r6}
 8004e16:	4770      	bx	lr

08004e18 <forward_mp>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b08e      	sub	sp, #56	; 0x38
 8004e1e:	4680      	mov	r8, r0
 8004e20:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8004e24:	6800      	ldr	r0, [r0, #0]
 8004e26:	6801      	ldr	r1, [r0, #0]
 8004e28:	68c2      	ldr	r2, [r0, #12]
 8004e2a:	680d      	ldr	r5, [r1, #0]
 8004e2c:	6817      	ldr	r7, [r2, #0]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6929      	ldr	r1, [r5, #16]
 8004e32:	9109      	str	r1, [sp, #36]	; 0x24
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	9208      	str	r2, [sp, #32]
 8004e38:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8004e3c:	68a9      	ldr	r1, [r5, #8]
 8004e3e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004e42:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8004e46:	f8cd c01c 	str.w	ip, [sp, #28]
 8004e4a:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8004e4e:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8004e52:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8004e56:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8004e5a:	f8d5 8000 	ldr.w	r8, [r5]
 8004e5e:	683f      	ldr	r7, [r7, #0]
 8004e60:	f8dc 6000 	ldr.w	r6, [ip]
 8004e64:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004e68:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8004e6c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8004e70:	4276      	negs	r6, r6
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	9600      	str	r6, [sp, #0]
 8004e76:	f000 80d7 	beq.w	8005028 <forward_mp+0x210>
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	4264      	negs	r4, r4
 8004e7e:	940c      	str	r4, [sp, #48]	; 0x30
 8004e80:	fb01 f709 	mul.w	r7, r1, r9
 8004e84:	970b      	str	r7, [sp, #44]	; 0x2c
 8004e86:	9d00      	ldr	r5, [sp, #0]
 8004e88:	9b00      	ldr	r3, [sp, #0]
 8004e8a:	9f07      	ldr	r7, [sp, #28]
 8004e8c:	9c00      	ldr	r4, [sp, #0]
 8004e8e:	426d      	negs	r5, r5
 8004e90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e92:	bfcc      	ite	gt
 8004e94:	f04f 0c00 	movgt.w	ip, #0
 8004e98:	f8dd c000 	ldrle.w	ip, [sp]
 8004e9c:	1aeb      	subs	r3, r5, r3
 8004e9e:	42bb      	cmp	r3, r7
 8004ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ea2:	bf88      	it	hi
 8004ea4:	463b      	movhi	r3, r7
 8004ea6:	191c      	adds	r4, r3, r4
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80b3 	beq.w	8005016 <forward_mp+0x1fe>
 8004eb0:	fb09 fa0c 	mul.w	sl, r9, ip
 8004eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004eb8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004ebc:	9202      	str	r2, [sp, #8]
 8004ebe:	9006      	str	r0, [sp, #24]
 8004ec0:	f8cd c014 	str.w	ip, [sp, #20]
 8004ec4:	9404      	str	r4, [sp, #16]
 8004ec6:	4268      	negs	r0, r5
 8004ec8:	9f03      	ldr	r7, [sp, #12]
 8004eca:	9a02      	ldr	r2, [sp, #8]
 8004ecc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004ed0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004ed4:	bfcc      	ite	gt
 8004ed6:	2000      	movgt	r0, #0
 8004ed8:	4628      	movle	r0, r5
 8004eda:	1b7f      	subs	r7, r7, r5
 8004edc:	4297      	cmp	r7, r2
 8004ede:	bf88      	it	hi
 8004ee0:	4617      	movhi	r7, r2
 8004ee2:	197f      	adds	r7, r7, r5
 8004ee4:	1a3f      	subs	r7, r7, r0
 8004ee6:	4460      	add	r0, ip
 8004ee8:	434f      	muls	r7, r1
 8004eea:	4348      	muls	r0, r1
 8004eec:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
 8004ef0:	b309      	cbz	r1, 8004f36 <forward_mp+0x11e>
 8004ef2:	f011 0003 	ands.w	r0, r1, #3
 8004ef6:	4672      	mov	r2, lr
 8004ef8:	4664      	mov	r4, ip
 8004efa:	d005      	beq.n	8004f08 <forward_mp+0xf0>
 8004efc:	1e40      	subs	r0, r0, #1
 8004efe:	f854 6b04 	ldr.w	r6, [r4], #4
 8004f02:	f842 6b04 	str.w	r6, [r2], #4
 8004f06:	d1f9      	bne.n	8004efc <forward_mp+0xe4>
 8004f08:	0888      	lsrs	r0, r1, #2
 8004f0a:	d014      	beq.n	8004f36 <forward_mp+0x11e>
 8004f0c:	ed94 0a00 	vldr	s0, [r4]
 8004f10:	1e40      	subs	r0, r0, #1
 8004f12:	ed82 0a00 	vstr	s0, [r2]
 8004f16:	edd4 0a01 	vldr	s1, [r4, #4]
 8004f1a:	edc2 0a01 	vstr	s1, [r2, #4]
 8004f1e:	ed94 0a02 	vldr	s0, [r4, #8]
 8004f22:	ed82 0a02 	vstr	s0, [r2, #8]
 8004f26:	edd4 0a03 	vldr	s1, [r4, #12]
 8004f2a:	3410      	adds	r4, #16
 8004f2c:	edc2 0a03 	vstr	s1, [r2, #12]
 8004f30:	3210      	adds	r2, #16
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d1ea      	bne.n	8004f0c <forward_mp+0xf4>
 8004f36:	9805      	ldr	r0, [sp, #20]
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	4290      	cmp	r0, r2
 8004f3c:	da61      	bge.n	8005002 <forward_mp+0x1ea>
 8004f3e:	1a12      	subs	r2, r2, r0
 8004f40:	46e2      	mov	sl, ip
 8004f42:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8004f46:	45da      	cmp	sl, fp
 8004f48:	d257      	bcs.n	8004ffa <forward_mp+0x1e2>
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d051      	beq.n	8004ff2 <forward_mp+0x1da>
 8004f4e:	f011 0003 	ands.w	r0, r1, #3
 8004f52:	4654      	mov	r4, sl
 8004f54:	4676      	mov	r6, lr
 8004f56:	d011      	beq.n	8004f7c <forward_mp+0x164>
 8004f58:	ed96 0a00 	vldr	s0, [r6]
 8004f5c:	edd4 0a00 	vldr	s1, [r4]
 8004f60:	eef4 0a40 	vcmp.f32	s1, s0
 8004f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f68:	bf58      	it	pl
 8004f6a:	eeb0 0a60 	vmovpl.f32	s0, s1
 8004f6e:	ed86 0a00 	vstr	s0, [r6]
 8004f72:	1e40      	subs	r0, r0, #1
 8004f74:	1d36      	adds	r6, r6, #4
 8004f76:	1d24      	adds	r4, r4, #4
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d1ed      	bne.n	8004f58 <forward_mp+0x140>
 8004f7c:	0888      	lsrs	r0, r1, #2
 8004f7e:	d038      	beq.n	8004ff2 <forward_mp+0x1da>
 8004f80:	edd4 0a00 	vldr	s1, [r4]
 8004f84:	edd6 1a00 	vldr	s3, [r6]
 8004f88:	eef4 0a61 	vcmp.f32	s1, s3
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	bf48      	it	mi
 8004f92:	eef0 0a61 	vmovmi.f32	s1, s3
 8004f96:	edc6 0a00 	vstr	s1, [r6]
 8004f9a:	edd4 0a01 	vldr	s1, [r4, #4]
 8004f9e:	edd6 1a01 	vldr	s3, [r6, #4]
 8004fa2:	eef4 0a61 	vcmp.f32	s1, s3
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	ed96 0a02 	vldr	s0, [r6, #8]
 8004fae:	bf48      	it	mi
 8004fb0:	eef0 0a61 	vmovmi.f32	s1, s3
 8004fb4:	edc6 0a01 	vstr	s1, [r6, #4]
 8004fb8:	ed94 1a02 	vldr	s2, [r4, #8]
 8004fbc:	eeb4 1a40 	vcmp.f32	s2, s0
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	edd6 1a03 	vldr	s3, [r6, #12]
 8004fc8:	bf48      	it	mi
 8004fca:	eeb0 1a40 	vmovmi.f32	s2, s0
 8004fce:	ed86 1a02 	vstr	s2, [r6, #8]
 8004fd2:	edd4 0a03 	vldr	s1, [r4, #12]
 8004fd6:	eef4 0a61 	vcmp.f32	s1, s3
 8004fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fde:	bf58      	it	pl
 8004fe0:	eef0 1a60 	vmovpl.f32	s3, s1
 8004fe4:	edc6 1a03 	vstr	s3, [r6, #12]
 8004fe8:	1e40      	subs	r0, r0, #1
 8004fea:	3610      	adds	r6, #16
 8004fec:	3410      	adds	r4, #16
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d1c6      	bne.n	8004f80 <forward_mp+0x168>
 8004ff2:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8004ff6:	45da      	cmp	sl, fp
 8004ff8:	d3a7      	bcc.n	8004f4a <forward_mp+0x132>
 8004ffa:	1e52      	subs	r2, r2, #1
 8004ffc:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8005000:	d19e      	bne.n	8004f40 <forward_mp+0x128>
 8005002:	9806      	ldr	r0, [sp, #24]
 8005004:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005008:	1945      	adds	r5, r0, r5
 800500a:	1e5b      	subs	r3, r3, #1
 800500c:	f47f af5b 	bne.w	8004ec6 <forward_mp+0xae>
 8005010:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005014:	9a02      	ldr	r2, [sp, #8]
 8005016:	9f00      	ldr	r7, [sp, #0]
 8005018:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800501a:	19ef      	adds	r7, r5, r7
 800501c:	9700      	str	r7, [sp, #0]
 800501e:	9c01      	ldr	r4, [sp, #4]
 8005020:	1e64      	subs	r4, r4, #1
 8005022:	9401      	str	r4, [sp, #4]
 8005024:	f47f af2f 	bne.w	8004e86 <forward_mp+0x6e>
 8005028:	b00e      	add	sp, #56	; 0x38
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005030 <forward_ap>:
 8005030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	b097      	sub	sp, #92	; 0x5c
 8005036:	6941      	ldr	r1, [r0, #20]
 8005038:	6809      	ldr	r1, [r1, #0]
 800503a:	68cb      	ldr	r3, [r1, #12]
 800503c:	680a      	ldr	r2, [r1, #0]
 800503e:	681f      	ldr	r7, [r3, #0]
 8005040:	6816      	ldr	r6, [r2, #0]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	6934      	ldr	r4, [r6, #16]
 8005046:	940c      	str	r4, [sp, #48]	; 0x30
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	930b      	str	r3, [sp, #44]	; 0x2c
 800504c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005050:	68b1      	ldr	r1, [r6, #8]
 8005052:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8005056:	69c3      	ldr	r3, [r0, #28]
 8005058:	2a00      	cmp	r2, #0
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	6a04      	ldr	r4, [r0, #32]
 800505e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8005062:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8005066:	f8d0 e02c 	ldr.w	lr, [r0, #44]	; 0x2c
 800506a:	6836      	ldr	r6, [r6, #0]
 800506c:	f8d7 9000 	ldr.w	r9, [r7]
 8005070:	f8de a000 	ldr.w	sl, [lr]
 8005074:	f8de 5004 	ldr.w	r5, [lr, #4]
 8005078:	68b3      	ldr	r3, [r6, #8]
 800507a:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800507e:	f1ca 0a00 	rsb	sl, sl, #0
 8005082:	f8cd a004 	str.w	sl, [sp, #4]
 8005086:	f000 8133 	beq.w	80052f0 <forward_ap+0x2c0>
 800508a:	9203      	str	r2, [sp, #12]
 800508c:	426d      	negs	r5, r5
 800508e:	9515      	str	r5, [sp, #84]	; 0x54
 8005090:	9d04      	ldr	r5, [sp, #16]
 8005092:	fb01 f70c 	mul.w	r7, r1, ip
 8005096:	fb05 f508 	mul.w	r5, r5, r8
 800509a:	9514      	str	r5, [sp, #80]	; 0x50
 800509c:	9713      	str	r7, [sp, #76]	; 0x4c
 800509e:	9e01      	ldr	r6, [sp, #4]
 80050a0:	9a01      	ldr	r2, [sp, #4]
 80050a2:	9f04      	ldr	r7, [sp, #16]
 80050a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80050a8:	4276      	negs	r6, r6
 80050aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80050ac:	bfcc      	ite	gt
 80050ae:	2500      	movgt	r5, #0
 80050b0:	9d01      	ldrle	r5, [sp, #4]
 80050b2:	1ab2      	subs	r2, r6, r2
 80050b4:	42ba      	cmp	r2, r7
 80050b6:	bf88      	it	hi
 80050b8:	463a      	movhi	r2, r7
 80050ba:	4496      	add	lr, r2
 80050bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050be:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	f000 8109 	beq.w	80052d8 <forward_ap+0x2a8>
 80050c6:	4616      	mov	r6, r2
 80050c8:	900d      	str	r0, [sp, #52]	; 0x34
 80050ca:	fb0c f205 	mul.w	r2, ip, r5
 80050ce:	f8cd c018 	str.w	ip, [sp, #24]
 80050d2:	eba5 0b0e 	sub.w	fp, r5, lr
 80050d6:	9212      	str	r2, [sp, #72]	; 0x48
 80050d8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80050dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80050e0:	940a      	str	r4, [sp, #40]	; 0x28
 80050e2:	9309      	str	r3, [sp, #36]	; 0x24
 80050e4:	9508      	str	r5, [sp, #32]
 80050e6:	f8cd e01c 	str.w	lr, [sp, #28]
 80050ea:	9700      	str	r7, [sp, #0]
 80050ec:	9602      	str	r6, [sp, #8]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	9a06      	ldr	r2, [sp, #24]
 80050f2:	9800      	ldr	r0, [sp, #0]
 80050f4:	f8dd e000 	ldr.w	lr, [sp]
 80050f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80050fa:	425b      	negs	r3, r3
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	bfcc      	ite	gt
 8005100:	2500      	movgt	r5, #0
 8005102:	9d00      	ldrle	r5, [sp, #0]
 8005104:	1a10      	subs	r0, r2, r0
 8005106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005108:	4298      	cmp	r0, r3
 800510a:	bf88      	it	hi
 800510c:	4618      	movhi	r0, r3
 800510e:	4486      	add	lr, r0
 8005110:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005112:	eba5 0c0e 	sub.w	ip, r5, lr
 8005116:	ebae 0805 	sub.w	r8, lr, r5
 800511a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511c:	fb08 f801 	mul.w	r8, r8, r1
 8005120:	fb00 fc0c 	mul.w	ip, r0, ip
 8005124:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005126:	1828      	adds	r0, r5, r0
 8005128:	4348      	muls	r0, r1
 800512a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800512e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	2800      	cmp	r0, #0
 8005136:	bf14      	ite	ne
 8005138:	9f14      	ldrne	r7, [sp, #80]	; 0x50
 800513a:	4667      	moveq	r7, ip
 800513c:	b189      	cbz	r1, 8005162 <forward_ap+0x132>
 800513e:	f011 0003 	ands.w	r0, r1, #3
 8005142:	464b      	mov	r3, r9
 8005144:	d003      	beq.n	800514e <forward_ap+0x11e>
 8005146:	1e40      	subs	r0, r0, #1
 8005148:	f843 2b04 	str.w	r2, [r3], #4
 800514c:	d1fb      	bne.n	8005146 <forward_ap+0x116>
 800514e:	0888      	lsrs	r0, r1, #2
 8005150:	d007      	beq.n	8005162 <forward_ap+0x132>
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	1e40      	subs	r0, r0, #1
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	609a      	str	r2, [r3, #8]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	f103 0310 	add.w	r3, r3, #16
 8005160:	d1f7      	bne.n	8005152 <forward_ap+0x122>
 8005162:	9808      	ldr	r0, [sp, #32]
 8005164:	9b07      	ldr	r3, [sp, #28]
 8005166:	4298      	cmp	r0, r3
 8005168:	f280 80a4 	bge.w	80052b4 <forward_ap+0x284>
 800516c:	ebae 0505 	sub.w	r5, lr, r5
 8005170:	1a1b      	subs	r3, r3, r0
 8005172:	950e      	str	r5, [sp, #56]	; 0x38
 8005174:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005178:	4694      	mov	ip, r2
 800517a:	940f      	str	r4, [sp, #60]	; 0x3c
 800517c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800517e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005180:	46b6      	mov	lr, r6
 8005182:	eb0e 0588 	add.w	r5, lr, r8, lsl #2
 8005186:	4494      	add	ip, r2
 8005188:	4560      	cmp	r0, ip
 800518a:	bf0c      	ite	eq
 800518c:	463c      	moveq	r4, r7
 800518e:	2400      	movne	r4, #0
 8005190:	45ae      	cmp	lr, r5
 8005192:	d24d      	bcs.n	8005230 <forward_ap+0x200>
 8005194:	2200      	movs	r2, #0
 8005196:	2900      	cmp	r1, #0
 8005198:	d046      	beq.n	8005228 <forward_ap+0x1f8>
 800519a:	f011 0003 	ands.w	r0, r1, #3
 800519e:	46f2      	mov	sl, lr
 80051a0:	46cb      	mov	fp, r9
 80051a2:	d010      	beq.n	80051c6 <forward_ap+0x196>
 80051a4:	45f1      	cmp	r9, lr
 80051a6:	ed9a 0a00 	vldr	s0, [sl]
 80051aa:	f10a 0a04 	add.w	sl, sl, #4
 80051ae:	bf1c      	itt	ne
 80051b0:	eddb 0a00 	vldrne	s1, [fp]
 80051b4:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80051b8:	1c52      	adds	r2, r2, #1
 80051ba:	ed8b 0a00 	vstr	s0, [fp]
 80051be:	1e40      	subs	r0, r0, #1
 80051c0:	f10b 0b04 	add.w	fp, fp, #4
 80051c4:	d1ee      	bne.n	80051a4 <forward_ap+0x174>
 80051c6:	0888      	lsrs	r0, r1, #2
 80051c8:	d02e      	beq.n	8005228 <forward_ap+0x1f8>
 80051ca:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 80051ce:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80051d2:	45f1      	cmp	r9, lr
 80051d4:	edda 1a00 	vldr	s3, [sl]
 80051d8:	bf1c      	itt	ne
 80051da:	ed92 0a00 	vldrne	s0, [r2]
 80051de:	ee70 1a21 	vaddne.f32	s3, s0, s3
 80051e2:	edc2 1a00 	vstr	s3, [r2]
 80051e6:	edda 1a01 	vldr	s3, [sl, #4]
 80051ea:	bf1c      	itt	ne
 80051ec:	edd2 0a01 	vldrne	s1, [r2, #4]
 80051f0:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80051f4:	edc2 1a01 	vstr	s3, [r2, #4]
 80051f8:	ed9a 1a02 	vldr	s2, [sl, #8]
 80051fc:	bf1c      	itt	ne
 80051fe:	ed92 0a02 	vldrne	s0, [r2, #8]
 8005202:	ee30 1a01 	vaddne.f32	s2, s0, s2
 8005206:	ed82 1a02 	vstr	s2, [r2, #8]
 800520a:	edda 1a03 	vldr	s3, [sl, #12]
 800520e:	f10a 0a10 	add.w	sl, sl, #16
 8005212:	bf1c      	itt	ne
 8005214:	edd2 0a03 	vldrne	s1, [r2, #12]
 8005218:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 800521c:	edc2 1a03 	vstr	s3, [r2, #12]
 8005220:	1e40      	subs	r0, r0, #1
 8005222:	3210      	adds	r2, #16
 8005224:	2800      	cmp	r0, #0
 8005226:	d1d4      	bne.n	80051d2 <forward_ap+0x1a2>
 8005228:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800522c:	45ae      	cmp	lr, r5
 800522e:	d3b1      	bcc.n	8005194 <forward_ap+0x164>
 8005230:	2c00      	cmp	r4, #0
 8005232:	d039      	beq.n	80052a8 <forward_ap+0x278>
 8005234:	ee00 4a10 	vmov	s0, r4
 8005238:	2200      	movs	r2, #0
 800523a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800523e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005242:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005246:	b379      	cbz	r1, 80052a8 <forward_ap+0x278>
 8005248:	f011 0003 	ands.w	r0, r1, #3
 800524c:	464c      	mov	r4, r9
 800524e:	d00a      	beq.n	8005266 <forward_ap+0x236>
 8005250:	edd4 0a00 	vldr	s1, [r4]
 8005254:	1c52      	adds	r2, r2, #1
 8005256:	ee60 0a80 	vmul.f32	s1, s1, s0
 800525a:	1e40      	subs	r0, r0, #1
 800525c:	edc4 0a00 	vstr	s1, [r4]
 8005260:	f104 0404 	add.w	r4, r4, #4
 8005264:	d1f4      	bne.n	8005250 <forward_ap+0x220>
 8005266:	0888      	lsrs	r0, r1, #2
 8005268:	f000 801e 	beq.w	80052a8 <forward_ap+0x278>
 800526c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005270:	edd2 0a00 	vldr	s1, [r2]
 8005274:	1e40      	subs	r0, r0, #1
 8005276:	ee60 0a80 	vmul.f32	s1, s1, s0
 800527a:	edc2 0a00 	vstr	s1, [r2]
 800527e:	ed92 1a01 	vldr	s2, [r2, #4]
 8005282:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005286:	ed82 1a01 	vstr	s2, [r2, #4]
 800528a:	edd2 0a02 	vldr	s1, [r2, #8]
 800528e:	ed92 1a03 	vldr	s2, [r2, #12]
 8005292:	ee60 1a80 	vmul.f32	s3, s1, s0
 8005296:	ee61 0a00 	vmul.f32	s1, s2, s0
 800529a:	edc2 1a02 	vstr	s3, [r2, #8]
 800529e:	edc2 0a03 	vstr	s1, [r2, #12]
 80052a2:	f102 0210 	add.w	r2, r2, #16
 80052a6:	d1e3      	bne.n	8005270 <forward_ap+0x240>
 80052a8:	1e5b      	subs	r3, r3, #1
 80052aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80052ac:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80052b0:	f47f af64 	bne.w	800517c <forward_ap+0x14c>
 80052b4:	9a00      	ldr	r2, [sp, #0]
 80052b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b8:	9c02      	ldr	r4, [sp, #8]
 80052ba:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 80052be:	189a      	adds	r2, r3, r2
 80052c0:	9200      	str	r2, [sp, #0]
 80052c2:	1e64      	subs	r4, r4, #1
 80052c4:	9402      	str	r4, [sp, #8]
 80052c6:	f47f af12 	bne.w	80050ee <forward_ap+0xbe>
 80052ca:	461c      	mov	r4, r3
 80052cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80052ce:	f8dd c018 	ldr.w	ip, [sp, #24]
 80052d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80052d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d8:	9e01      	ldr	r6, [sp, #4]
 80052da:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80052dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80052e0:	19be      	adds	r6, r7, r6
 80052e2:	9601      	str	r6, [sp, #4]
 80052e4:	f1be 0e01 	subs.w	lr, lr, #1
 80052e8:	f8cd e00c 	str.w	lr, [sp, #12]
 80052ec:	f47f aed7 	bne.w	800509e <forward_ap+0x6e>
 80052f0:	b017      	add	sp, #92	; 0x5c
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080052f8 <ai_array_fmt_name>:
 80052f8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80052fc:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005300:	d062      	beq.n	80053c8 <ai_array_fmt_name+0xd0>
 8005302:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005306:	1a89      	subs	r1, r1, r2
 8005308:	f000 8094 	beq.w	8005434 <ai_array_fmt_name+0x13c>
 800530c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005310:	1a89      	subs	r1, r1, r2
 8005312:	d071      	beq.n	80053f8 <ai_array_fmt_name+0x100>
 8005314:	1a89      	subs	r1, r1, r2
 8005316:	d063      	beq.n	80053e0 <ai_array_fmt_name+0xe8>
 8005318:	1fc9      	subs	r1, r1, #7
 800531a:	f000 808e 	beq.w	800543a <ai_array_fmt_name+0x142>
 800531e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005322:	1a89      	subs	r1, r1, r2
 8005324:	d05f      	beq.n	80053e6 <ai_array_fmt_name+0xee>
 8005326:	390f      	subs	r1, #15
 8005328:	f000 808a 	beq.w	8005440 <ai_array_fmt_name+0x148>
 800532c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005330:	1a89      	subs	r1, r1, r2
 8005332:	d05b      	beq.n	80053ec <ai_array_fmt_name+0xf4>
 8005334:	391f      	subs	r1, #31
 8005336:	f000 8086 	beq.w	8005446 <ai_array_fmt_name+0x14e>
 800533a:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800533e:	1a89      	subs	r1, r1, r2
 8005340:	d057      	beq.n	80053f2 <ai_array_fmt_name+0xfa>
 8005342:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005918 <.text_15>
 8005346:	1a89      	subs	r1, r1, r2
 8005348:	f000 808f 	beq.w	800546a <ai_array_fmt_name+0x172>
 800534c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005350:	1a89      	subs	r1, r1, r2
 8005352:	f000 8087 	beq.w	8005464 <ai_array_fmt_name+0x16c>
 8005356:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 800591c <.text_16>
 800535a:	1a89      	subs	r1, r1, r2
 800535c:	d05e      	beq.n	800541c <ai_array_fmt_name+0x124>
 800535e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005362:	1a89      	subs	r1, r1, r2
 8005364:	d057      	beq.n	8005416 <ai_array_fmt_name+0x11e>
 8005366:	1a89      	subs	r1, r1, r2
 8005368:	d049      	beq.n	80053fe <ai_array_fmt_name+0x106>
 800536a:	1fc9      	subs	r1, r1, #7
 800536c:	d059      	beq.n	8005422 <ai_array_fmt_name+0x12a>
 800536e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005372:	1a89      	subs	r1, r1, r2
 8005374:	d046      	beq.n	8005404 <ai_array_fmt_name+0x10c>
 8005376:	390f      	subs	r1, #15
 8005378:	d056      	beq.n	8005428 <ai_array_fmt_name+0x130>
 800537a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800537e:	1a89      	subs	r1, r1, r2
 8005380:	d043      	beq.n	800540a <ai_array_fmt_name+0x112>
 8005382:	391f      	subs	r1, #31
 8005384:	d053      	beq.n	800542e <ai_array_fmt_name+0x136>
 8005386:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800538a:	1a89      	subs	r1, r1, r2
 800538c:	d040      	beq.n	8005410 <ai_array_fmt_name+0x118>
 800538e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005918 <.text_15>
 8005392:	1a89      	subs	r1, r1, r2
 8005394:	d063      	beq.n	800545e <ai_array_fmt_name+0x166>
 8005396:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800539a:	1a89      	subs	r1, r1, r2
 800539c:	d05c      	beq.n	8005458 <ai_array_fmt_name+0x160>
 800539e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005920 <.text_17>
 80053a2:	1a89      	subs	r1, r1, r2
 80053a4:	d019      	beq.n	80053da <ai_array_fmt_name+0xe2>
 80053a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053aa:	1a89      	subs	r1, r1, r2
 80053ac:	d00f      	beq.n	80053ce <ai_array_fmt_name+0xd6>
 80053ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053b2:	1a89      	subs	r1, r1, r2
 80053b4:	d00e      	beq.n	80053d4 <ai_array_fmt_name+0xdc>
 80053b6:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005924 <.text_18>
 80053ba:	1a89      	subs	r1, r1, r2
 80053bc:	d049      	beq.n	8005452 <ai_array_fmt_name+0x15a>
 80053be:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80053c2:	1a89      	subs	r1, r1, r2
 80053c4:	d042      	beq.n	800544c <ai_array_fmt_name+0x154>
 80053c6:	e053      	b.n	8005470 <ai_array_fmt_name+0x178>
 80053c8:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80053cc:	4770      	bx	lr
 80053ce:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80053d2:	4770      	bx	lr
 80053d4:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80053d8:	4770      	bx	lr
 80053da:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80053de:	4770      	bx	lr
 80053e0:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80053e4:	4770      	bx	lr
 80053e6:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80053ea:	4770      	bx	lr
 80053ec:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80053f0:	4770      	bx	lr
 80053f2:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80053f6:	4770      	bx	lr
 80053f8:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80053fc:	4770      	bx	lr
 80053fe:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005402:	4770      	bx	lr
 8005404:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005408:	4770      	bx	lr
 800540a:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800540e:	4770      	bx	lr
 8005410:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005414:	4770      	bx	lr
 8005416:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800541a:	4770      	bx	lr
 800541c:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005420:	4770      	bx	lr
 8005422:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005426:	4770      	bx	lr
 8005428:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800542c:	4770      	bx	lr
 800542e:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005432:	4770      	bx	lr
 8005434:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005438:	4770      	bx	lr
 800543a:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800543e:	4770      	bx	lr
 8005440:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005444:	4770      	bx	lr
 8005446:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 800544a:	4770      	bx	lr
 800544c:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8005450:	4770      	bx	lr
 8005452:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005456:	4770      	bx	lr
 8005458:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 800545c:	4770      	bx	lr
 800545e:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8005462:	4770      	bx	lr
 8005464:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005468:	4770      	bx	lr
 800546a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800546e:	4770      	bx	lr
 8005470:	f36f 000d 	bfc	r0, #0, #14
 8005474:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005478:	2840      	cmp	r0, #64	; 0x40
 800547a:	d009      	beq.n	8005490 <ai_array_fmt_name+0x198>
 800547c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005928 <.text_19>
 8005480:	4288      	cmp	r0, r1
 8005482:	d00b      	beq.n	800549c <ai_array_fmt_name+0x1a4>
 8005484:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 800592c <.text_20>
 8005488:	4288      	cmp	r0, r1
 800548a:	d004      	beq.n	8005496 <ai_array_fmt_name+0x19e>
 800548c:	a07a      	add	r0, pc, #488	; (adr r0, 8005678 <.text_8>)
 800548e:	4770      	bx	lr
 8005490:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8005494:	4770      	bx	lr
 8005496:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800549a:	4770      	bx	lr
 800549c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80054a0:	4770      	bx	lr

080054a2 <ai_array_fmt_exported>:
 80054a2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80054a6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80054aa:	d068      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80054b0:	1a89      	subs	r1, r1, r2
 80054b2:	d064      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b8:	1a89      	subs	r1, r1, r2
 80054ba:	d062      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054bc:	1a89      	subs	r1, r1, r2
 80054be:	d05e      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054c0:	1fc9      	subs	r1, r1, #7
 80054c2:	d05c      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054c4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80054c8:	1a89      	subs	r1, r1, r2
 80054ca:	d058      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054cc:	390f      	subs	r1, #15
 80054ce:	d056      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054d0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80054d4:	1a89      	subs	r1, r1, r2
 80054d6:	d054      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054d8:	391f      	subs	r1, #31
 80054da:	d052      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054dc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80054e0:	1a89      	subs	r1, r1, r2
 80054e2:	d04e      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054e4:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005918 <.text_15>
 80054e8:	1a89      	subs	r1, r1, r2
 80054ea:	d04a      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054ec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80054f0:	1a89      	subs	r1, r1, r2
 80054f2:	d046      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 80054f4:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 800591c <.text_16>
 80054f8:	1a89      	subs	r1, r1, r2
 80054fa:	d040      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 80054fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005500:	1a89      	subs	r1, r1, r2
 8005502:	d03e      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005504:	1a89      	subs	r1, r1, r2
 8005506:	d03a      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 8005508:	1fc9      	subs	r1, r1, #7
 800550a:	d038      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 800550c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005510:	1a89      	subs	r1, r1, r2
 8005512:	d034      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 8005514:	390f      	subs	r1, #15
 8005516:	d032      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 8005518:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800551c:	1a89      	subs	r1, r1, r2
 800551e:	d030      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005520:	391f      	subs	r1, #31
 8005522:	d02e      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005524:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005528:	1a89      	subs	r1, r1, r2
 800552a:	d02a      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 800552c:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005918 <.text_15>
 8005530:	1a89      	subs	r1, r1, r2
 8005532:	d026      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005534:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005538:	1a89      	subs	r1, r1, r2
 800553a:	d022      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 800553c:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005920 <.text_17>
 8005540:	1a89      	subs	r1, r1, r2
 8005542:	d01e      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005548:	1a89      	subs	r1, r1, r2
 800554a:	d018      	beq.n	800557e <ai_array_fmt_exported+0xdc>
 800554c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005550:	1a89      	subs	r1, r1, r2
 8005552:	d016      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005554:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005924 <.text_18>
 8005558:	1a89      	subs	r1, r1, r2
 800555a:	d012      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 800555c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005560:	1a89      	subs	r1, r1, r2
 8005562:	d00e      	beq.n	8005582 <ai_array_fmt_exported+0xe0>
 8005564:	f36f 000d 	bfc	r0, #0, #14
 8005568:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800556c:	2840      	cmp	r0, #64	; 0x40
 800556e:	bf1f      	itttt	ne
 8005570:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005928 <.text_19>
 8005574:	4298      	cmpne	r0, r3
 8005576:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 800592c <.text_20>
 800557a:	4298      	cmpne	r0, r3
 800557c:	d101      	bne.n	8005582 <ai_array_fmt_exported+0xe0>
 800557e:	2001      	movs	r0, #1
 8005580:	4770      	bx	lr
 8005582:	2000      	movs	r0, #0
 8005584:	4770      	bx	lr

08005586 <ai_array_fmt_valid>:
 8005586:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800558a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800558e:	d069      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005590:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005594:	1a89      	subs	r1, r1, r2
 8005596:	d065      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559c:	1a89      	subs	r1, r1, r2
 800559e:	d061      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055a0:	1a89      	subs	r1, r1, r2
 80055a2:	d05f      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055a4:	1fc9      	subs	r1, r1, #7
 80055a6:	d05d      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055a8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80055ac:	1a89      	subs	r1, r1, r2
 80055ae:	d059      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055b0:	390f      	subs	r1, #15
 80055b2:	d057      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055b4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80055b8:	1a89      	subs	r1, r1, r2
 80055ba:	d053      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055bc:	391f      	subs	r1, #31
 80055be:	d051      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055c0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80055c4:	1a89      	subs	r1, r1, r2
 80055c6:	d04d      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055c8:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005918 <.text_15>
 80055cc:	1a89      	subs	r1, r1, r2
 80055ce:	d049      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055d0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80055d4:	1a89      	subs	r1, r1, r2
 80055d6:	d045      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055d8:	f8df 2340 	ldr.w	r2, [pc, #832]	; 800591c <.text_16>
 80055dc:	1a89      	subs	r1, r1, r2
 80055de:	d041      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e4:	1a89      	subs	r1, r1, r2
 80055e6:	d03d      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055e8:	1a89      	subs	r1, r1, r2
 80055ea:	d03b      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055ec:	1fc9      	subs	r1, r1, #7
 80055ee:	d039      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055f0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80055f4:	1a89      	subs	r1, r1, r2
 80055f6:	d035      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055f8:	390f      	subs	r1, #15
 80055fa:	d033      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 80055fc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005600:	1a89      	subs	r1, r1, r2
 8005602:	d02f      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005604:	391f      	subs	r1, #31
 8005606:	d02d      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005608:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800560c:	1a89      	subs	r1, r1, r2
 800560e:	d029      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005610:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005918 <.text_15>
 8005614:	1a89      	subs	r1, r1, r2
 8005616:	d025      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005618:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800561c:	1a89      	subs	r1, r1, r2
 800561e:	d021      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005620:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005920 <.text_17>
 8005624:	1a89      	subs	r1, r1, r2
 8005626:	d01d      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562c:	1a89      	subs	r1, r1, r2
 800562e:	d019      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005634:	1a89      	subs	r1, r1, r2
 8005636:	d015      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005638:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005924 <.text_18>
 800563c:	1a89      	subs	r1, r1, r2
 800563e:	d011      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005640:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005644:	1a89      	subs	r1, r1, r2
 8005646:	bf1e      	ittt	ne
 8005648:	f36f 000d 	bfcne	r0, #0, #14
 800564c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005650:	2840      	cmpne	r0, #64	; 0x40
 8005652:	d007      	beq.n	8005664 <ai_array_fmt_valid+0xde>
 8005654:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005928 <.text_19>
 8005658:	4298      	cmp	r0, r3
 800565a:	bf1c      	itt	ne
 800565c:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 800592c <.text_20>
 8005660:	4298      	cmpne	r0, r3
 8005662:	d101      	bne.n	8005668 <ai_array_fmt_valid+0xe2>
 8005664:	2001      	movs	r0, #1
 8005666:	4770      	bx	lr
 8005668:	2000      	movs	r0, #0
 800566a:	4770      	bx	lr

0800566c <ai_array_fmt_get_formats>:
 800566c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005930 <.text_21>
 8005670:	6001      	str	r1, [r0, #0]
 8005672:	201c      	movs	r0, #28
 8005674:	4770      	bx	lr
	...

08005678 <.text_8>:
 8005678:	00000000 	.word	0x00000000

0800567c <ai_buffer_fmt_name>:
 800567c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005680:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005684:	d022      	beq.n	80056cc <ai_buffer_fmt_name+0x50>
 8005686:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800568a:	1a89      	subs	r1, r1, r2
 800568c:	d039      	beq.n	8005702 <ai_buffer_fmt_name+0x86>
 800568e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005692:	1a89      	subs	r1, r1, r2
 8005694:	d020      	beq.n	80056d8 <ai_buffer_fmt_name+0x5c>
 8005696:	1fc9      	subs	r1, r1, #7
 8005698:	d036      	beq.n	8005708 <ai_buffer_fmt_name+0x8c>
 800569a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800569e:	1a89      	subs	r1, r1, r2
 80056a0:	d01d      	beq.n	80056de <ai_buffer_fmt_name+0x62>
 80056a2:	390f      	subs	r1, #15
 80056a4:	d033      	beq.n	800570e <ai_buffer_fmt_name+0x92>
 80056a6:	4aa3      	ldr	r2, [pc, #652]	; (8005934 <.text_22>)
 80056a8:	1a89      	subs	r1, r1, r2
 80056aa:	d021      	beq.n	80056f0 <ai_buffer_fmt_name+0x74>
 80056ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b0:	1a89      	subs	r1, r1, r2
 80056b2:	d017      	beq.n	80056e4 <ai_buffer_fmt_name+0x68>
 80056b4:	1fc9      	subs	r1, r1, #7
 80056b6:	d01e      	beq.n	80056f6 <ai_buffer_fmt_name+0x7a>
 80056b8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80056bc:	1a89      	subs	r1, r1, r2
 80056be:	d014      	beq.n	80056ea <ai_buffer_fmt_name+0x6e>
 80056c0:	390f      	subs	r1, #15
 80056c2:	d01b      	beq.n	80056fc <ai_buffer_fmt_name+0x80>
 80056c4:	4a9c      	ldr	r2, [pc, #624]	; (8005938 <.text_23>)
 80056c6:	1a89      	subs	r1, r1, r2
 80056c8:	d003      	beq.n	80056d2 <ai_buffer_fmt_name+0x56>
 80056ca:	e023      	b.n	8005714 <ai_buffer_fmt_name+0x98>
 80056cc:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80056d0:	4770      	bx	lr
 80056d2:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80056d6:	4770      	bx	lr
 80056d8:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80056dc:	4770      	bx	lr
 80056de:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80056e2:	4770      	bx	lr
 80056e4:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80056e8:	4770      	bx	lr
 80056ea:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80056ee:	4770      	bx	lr
 80056f0:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80056f4:	4770      	bx	lr
 80056f6:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80056fa:	4770      	bx	lr
 80056fc:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005700:	4770      	bx	lr
 8005702:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005706:	4770      	bx	lr
 8005708:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 800570c:	4770      	bx	lr
 800570e:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005712:	4770      	bx	lr
 8005714:	0b80      	lsrs	r0, r0, #14
 8005716:	0380      	lsls	r0, r0, #14
 8005718:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800571c:	2840      	cmp	r0, #64	; 0x40
 800571e:	d007      	beq.n	8005730 <ai_buffer_fmt_name+0xb4>
 8005720:	4981      	ldr	r1, [pc, #516]	; (8005928 <.text_19>)
 8005722:	4288      	cmp	r0, r1
 8005724:	d00a      	beq.n	800573c <ai_buffer_fmt_name+0xc0>
 8005726:	4981      	ldr	r1, [pc, #516]	; (800592c <.text_20>)
 8005728:	4288      	cmp	r0, r1
 800572a:	d004      	beq.n	8005736 <ai_buffer_fmt_name+0xba>
 800572c:	a079      	add	r0, pc, #484	; (adr r0, 8005914 <.text_14>)
 800572e:	4770      	bx	lr
 8005730:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005734:	4770      	bx	lr
 8005736:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 800573a:	4770      	bx	lr
 800573c:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005740:	4770      	bx	lr

08005742 <ai_buffer_fmt_valid>:
 8005742:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005746:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800574a:	d02d      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800574c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005750:	1a89      	subs	r1, r1, r2
 8005752:	d029      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 8005754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005758:	1a89      	subs	r1, r1, r2
 800575a:	d025      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800575c:	1fc9      	subs	r1, r1, #7
 800575e:	d023      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 8005760:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005764:	1a89      	subs	r1, r1, r2
 8005766:	d01f      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 8005768:	390f      	subs	r1, #15
 800576a:	d01d      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800576c:	4a71      	ldr	r2, [pc, #452]	; (8005934 <.text_22>)
 800576e:	1a89      	subs	r1, r1, r2
 8005770:	d01a      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 8005772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005776:	1a89      	subs	r1, r1, r2
 8005778:	d016      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800577a:	1fc9      	subs	r1, r1, #7
 800577c:	d014      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800577e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005782:	1a89      	subs	r1, r1, r2
 8005784:	d010      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 8005786:	390f      	subs	r1, #15
 8005788:	d00e      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800578a:	4a6b      	ldr	r2, [pc, #428]	; (8005938 <.text_23>)
 800578c:	1a89      	subs	r1, r1, r2
 800578e:	bf1f      	itttt	ne
 8005790:	0b80      	lsrne	r0, r0, #14
 8005792:	0380      	lslne	r0, r0, #14
 8005794:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005798:	2840      	cmpne	r0, #64	; 0x40
 800579a:	d005      	beq.n	80057a8 <ai_buffer_fmt_valid+0x66>
 800579c:	4b62      	ldr	r3, [pc, #392]	; (8005928 <.text_19>)
 800579e:	4298      	cmp	r0, r3
 80057a0:	bf1c      	itt	ne
 80057a2:	4b62      	ldrne	r3, [pc, #392]	; (800592c <.text_20>)
 80057a4:	4298      	cmpne	r0, r3
 80057a6:	d101      	bne.n	80057ac <ai_buffer_fmt_valid+0x6a>
 80057a8:	2001      	movs	r0, #1
 80057aa:	4770      	bx	lr
 80057ac:	2000      	movs	r0, #0
 80057ae:	4770      	bx	lr

080057b0 <ai_buffer_fmt_get_formats>:
 80057b0:	4962      	ldr	r1, [pc, #392]	; (800593c <.text_24>)
 80057b2:	6001      	str	r1, [r0, #0]
 80057b4:	200c      	movs	r0, #12
 80057b6:	4770      	bx	lr

080057b8 <ai_array_to_buffer_fmt>:
 80057b8:	4601      	mov	r1, r0
 80057ba:	2040      	movs	r0, #64	; 0x40
 80057bc:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80057c0:	2a02      	cmp	r2, #2
 80057c2:	d104      	bne.n	80057ce <ai_array_to_buffer_fmt+0x16>
 80057c4:	485e      	ldr	r0, [pc, #376]	; (8005940 <.text_25>)
 80057c6:	4008      	ands	r0, r1
 80057c8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80057cc:	e037      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 80057ce:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80057d2:	4b55      	ldr	r3, [pc, #340]	; (8005928 <.text_19>)
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	d02d      	beq.n	8005834 <ai_array_to_buffer_fmt+0x7c>
 80057d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	d01b      	beq.n	8005818 <ai_array_to_buffer_fmt+0x60>
 80057e0:	1fd2      	subs	r2, r2, #7
 80057e2:	d029      	beq.n	8005838 <ai_array_to_buffer_fmt+0x80>
 80057e4:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80057e8:	1ad2      	subs	r2, r2, r3
 80057ea:	d017      	beq.n	800581c <ai_array_to_buffer_fmt+0x64>
 80057ec:	3a0f      	subs	r2, #15
 80057ee:	d025      	beq.n	800583c <ai_array_to_buffer_fmt+0x84>
 80057f0:	4b50      	ldr	r3, [pc, #320]	; (8005934 <.text_22>)
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	d018      	beq.n	8005828 <ai_array_to_buffer_fmt+0x70>
 80057f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	d010      	beq.n	8005820 <ai_array_to_buffer_fmt+0x68>
 80057fe:	1fd2      	subs	r2, r2, #7
 8005800:	d014      	beq.n	800582c <ai_array_to_buffer_fmt+0x74>
 8005802:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	d00c      	beq.n	8005824 <ai_array_to_buffer_fmt+0x6c>
 800580a:	3a0f      	subs	r2, #15
 800580c:	d010      	beq.n	8005830 <ai_array_to_buffer_fmt+0x78>
 800580e:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <.text_23>)
 8005810:	1ad2      	subs	r2, r2, r3
 8005812:	d114      	bne.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005814:	484b      	ldr	r0, [pc, #300]	; (8005944 <.text_26>)
 8005816:	e012      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005818:	484b      	ldr	r0, [pc, #300]	; (8005948 <.text_27>)
 800581a:	e010      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 800581c:	484b      	ldr	r0, [pc, #300]	; (800594c <.text_28>)
 800581e:	e00e      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005820:	484b      	ldr	r0, [pc, #300]	; (8005950 <.text_29>)
 8005822:	e00c      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005824:	484b      	ldr	r0, [pc, #300]	; (8005954 <.text_30>)
 8005826:	e00a      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005828:	4840      	ldr	r0, [pc, #256]	; (800592c <.text_20>)
 800582a:	e008      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 800582c:	484a      	ldr	r0, [pc, #296]	; (8005958 <.text_31>)
 800582e:	e006      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005830:	484a      	ldr	r0, [pc, #296]	; (800595c <.text_32>)
 8005832:	e004      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005834:	4618      	mov	r0, r3
 8005836:	e002      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 8005838:	4849      	ldr	r0, [pc, #292]	; (8005960 <.text_33>)
 800583a:	e000      	b.n	800583e <ai_array_to_buffer_fmt+0x86>
 800583c:	4849      	ldr	r0, [pc, #292]	; (8005964 <.text_34>)
 800583e:	004a      	lsls	r2, r1, #1
 8005840:	bf4c      	ite	mi
 8005842:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005846:	2200      	movpl	r2, #0
 8005848:	4310      	orrs	r0, r2
 800584a:	008a      	lsls	r2, r1, #2
 800584c:	bf4c      	ite	mi
 800584e:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005852:	2200      	movpl	r2, #0
 8005854:	4310      	orrs	r0, r2
 8005856:	0109      	lsls	r1, r1, #4
 8005858:	bf4c      	ite	mi
 800585a:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 800585e:	2100      	movpl	r1, #0
 8005860:	4308      	orrs	r0, r1
 8005862:	4770      	bx	lr

08005864 <ai_buffer_to_array_fmt>:
 8005864:	4602      	mov	r2, r0
 8005866:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800586a:	3840      	subs	r0, #64	; 0x40
 800586c:	d022      	beq.n	80058b4 <ai_buffer_to_array_fmt+0x50>
 800586e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005872:	1a40      	subs	r0, r0, r1
 8005874:	d030      	beq.n	80058d8 <ai_buffer_to_array_fmt+0x74>
 8005876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800587a:	1a40      	subs	r0, r0, r1
 800587c:	d01e      	beq.n	80058bc <ai_buffer_to_array_fmt+0x58>
 800587e:	1fc0      	subs	r0, r0, #7
 8005880:	d02c      	beq.n	80058dc <ai_buffer_to_array_fmt+0x78>
 8005882:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005886:	1a40      	subs	r0, r0, r1
 8005888:	d01a      	beq.n	80058c0 <ai_buffer_to_array_fmt+0x5c>
 800588a:	380f      	subs	r0, #15
 800588c:	d028      	beq.n	80058e0 <ai_buffer_to_array_fmt+0x7c>
 800588e:	4929      	ldr	r1, [pc, #164]	; (8005934 <.text_22>)
 8005890:	1a40      	subs	r0, r0, r1
 8005892:	d01b      	beq.n	80058cc <ai_buffer_to_array_fmt+0x68>
 8005894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005898:	1a40      	subs	r0, r0, r1
 800589a:	d013      	beq.n	80058c4 <ai_buffer_to_array_fmt+0x60>
 800589c:	1fc0      	subs	r0, r0, #7
 800589e:	d017      	beq.n	80058d0 <ai_buffer_to_array_fmt+0x6c>
 80058a0:	f240 31f9 	movw	r1, #1017	; 0x3f9
 80058a4:	1a40      	subs	r0, r0, r1
 80058a6:	d00f      	beq.n	80058c8 <ai_buffer_to_array_fmt+0x64>
 80058a8:	380f      	subs	r0, #15
 80058aa:	d013      	beq.n	80058d4 <ai_buffer_to_array_fmt+0x70>
 80058ac:	4922      	ldr	r1, [pc, #136]	; (8005938 <.text_23>)
 80058ae:	1a40      	subs	r0, r0, r1
 80058b0:	d002      	beq.n	80058b8 <ai_buffer_to_array_fmt+0x54>
 80058b2:	e017      	b.n	80058e4 <ai_buffer_to_array_fmt+0x80>
 80058b4:	2040      	movs	r0, #64	; 0x40
 80058b6:	e01f      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058b8:	4822      	ldr	r0, [pc, #136]	; (8005944 <.text_26>)
 80058ba:	e01d      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058bc:	4822      	ldr	r0, [pc, #136]	; (8005948 <.text_27>)
 80058be:	e01b      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058c0:	4822      	ldr	r0, [pc, #136]	; (800594c <.text_28>)
 80058c2:	e019      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058c4:	4822      	ldr	r0, [pc, #136]	; (8005950 <.text_29>)
 80058c6:	e017      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058c8:	4822      	ldr	r0, [pc, #136]	; (8005954 <.text_30>)
 80058ca:	e015      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058cc:	4817      	ldr	r0, [pc, #92]	; (800592c <.text_20>)
 80058ce:	e013      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058d0:	4821      	ldr	r0, [pc, #132]	; (8005958 <.text_31>)
 80058d2:	e011      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058d4:	4821      	ldr	r0, [pc, #132]	; (800595c <.text_32>)
 80058d6:	e00f      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058d8:	4813      	ldr	r0, [pc, #76]	; (8005928 <.text_19>)
 80058da:	e00d      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058dc:	4820      	ldr	r0, [pc, #128]	; (8005960 <.text_33>)
 80058de:	e00b      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058e0:	4820      	ldr	r0, [pc, #128]	; (8005964 <.text_34>)
 80058e2:	e009      	b.n	80058f8 <ai_buffer_to_array_fmt+0x94>
 80058e4:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80058e8:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80058ec:	2900      	cmp	r1, #0
 80058ee:	bf14      	ite	ne
 80058f0:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80058f4:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80058f8:	0051      	lsls	r1, r2, #1
 80058fa:	bf48      	it	mi
 80058fc:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005900:	0093      	lsls	r3, r2, #2
 8005902:	bf48      	it	mi
 8005904:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005908:	0111      	lsls	r1, r2, #4
 800590a:	bf48      	it	mi
 800590c:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005910:	4770      	bx	lr
	...

08005914 <.text_14>:
 8005914:	00000000 	.word	0x00000000

08005918 <.text_15>:
 8005918:	002be80f 	.word	0x002be80f

0800591c <.text_16>:
 800591c:	003bf7f1 	.word	0x003bf7f1

08005920 <.text_17>:
 8005920:	00b9fff1 	.word	0x00b9fff1

08005924 <.text_18>:
 8005924:	004df000 	.word	0x004df000

08005928 <.text_19>:
 8005928:	00040040 	.word	0x00040040

0800592c <.text_20>:
 800592c:	00840040 	.word	0x00840040

08005930 <.text_21>:
 8005930:	08012e54 	.word	0x08012e54

08005934 <.text_22>:
 8005934:	007ff7f1 	.word	0x007ff7f1

08005938 <.text_23>:
 8005938:	00fe07f1 	.word	0x00fe07f1

0800593c <.text_24>:
 800593c:	08012ec4 	.word	0x08012ec4

08005940 <.text_25>:
 8005940:	00803fff 	.word	0x00803fff

08005944 <.text_26>:
 8005944:	01821040 	.word	0x01821040

08005948 <.text_27>:
 8005948:	00040440 	.word	0x00040440

0800594c <.text_28>:
 800594c:	00040840 	.word	0x00040840

08005950 <.text_29>:
 8005950:	00840440 	.word	0x00840440

08005954 <.text_30>:
 8005954:	00840840 	.word	0x00840840

08005958 <.text_31>:
 8005958:	00840447 	.word	0x00840447

0800595c <.text_32>:
 800595c:	0084084f 	.word	0x0084084f

08005960 <.text_33>:
 8005960:	00040447 	.word	0x00040447

08005964 <.text_34>:
 8005964:	0004084f 	.word	0x0004084f

08005968 <ai_array_get_byte_size>:
 8005968:	b909      	cbnz	r1, 800596e <ai_array_get_byte_size+0x6>
 800596a:	2000      	movs	r0, #0
 800596c:	4770      	bx	lr
 800596e:	11c2      	asrs	r2, r0, #7
 8005970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005974:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005978:	189b      	adds	r3, r3, r2
 800597a:	4359      	muls	r1, r3
 800597c:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005980:	f00c 0c0f 	and.w	ip, ip, #15
 8005984:	1543      	asrs	r3, r0, #21
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	1dc9      	adds	r1, r1, #7
 800598c:	08c9      	lsrs	r1, r1, #3
 800598e:	00c9      	lsls	r1, r1, #3
 8005990:	40d9      	lsrs	r1, r3
 8005992:	f1bc 0f04 	cmp.w	ip, #4
 8005996:	d00a      	beq.n	80059ae <ai_array_get_byte_size+0x46>
 8005998:	f1bc 0f08 	cmp.w	ip, #8
 800599c:	bf02      	ittt	eq
 800599e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80059a2:	1882      	addeq	r2, r0, r2
 80059a4:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80059a8:	1dc9      	adds	r1, r1, #7
 80059aa:	08c8      	lsrs	r0, r1, #3
 80059ac:	4770      	bx	lr
 80059ae:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80059b2:	1882      	adds	r2, r0, r2
 80059b4:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80059b8:	1dc9      	adds	r1, r1, #7
 80059ba:	08c8      	lsrs	r0, r1, #3
 80059bc:	4770      	bx	lr

080059be <ai_array_get_data_byte_size>:
 80059be:	b909      	cbnz	r1, 80059c4 <ai_array_get_data_byte_size+0x6>
 80059c0:	2000      	movs	r0, #0
 80059c2:	4770      	bx	lr
 80059c4:	11c2      	asrs	r2, r0, #7
 80059c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059ca:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80059ce:	189a      	adds	r2, r3, r2
 80059d0:	4351      	muls	r1, r2
 80059d2:	1540      	asrs	r0, r0, #21
 80059d4:	f000 0003 	and.w	r0, r0, #3
 80059d8:	1dc9      	adds	r1, r1, #7
 80059da:	08c9      	lsrs	r1, r1, #3
 80059dc:	00c9      	lsls	r1, r1, #3
 80059de:	40c1      	lsrs	r1, r0
 80059e0:	1dc9      	adds	r1, r1, #7
 80059e2:	08c8      	lsrs	r0, r1, #3
 80059e4:	4770      	bx	lr

080059e6 <ai_array_get_elems_from_size>:
 80059e6:	b909      	cbnz	r1, 80059ec <ai_array_get_elems_from_size+0x6>
 80059e8:	2000      	movs	r0, #0
 80059ea:	4770      	bx	lr
 80059ec:	1442      	asrs	r2, r0, #17
 80059ee:	00c9      	lsls	r1, r1, #3
 80059f0:	f002 020f 	and.w	r2, r2, #15
 80059f4:	2a04      	cmp	r2, #4
 80059f6:	d002      	beq.n	80059fe <ai_array_get_elems_from_size+0x18>
 80059f8:	2a08      	cmp	r2, #8
 80059fa:	d009      	beq.n	8005a10 <ai_array_get_elems_from_size+0x2a>
 80059fc:	e010      	b.n	8005a20 <ai_array_get_elems_from_size+0x3a>
 80059fe:	11c3      	asrs	r3, r0, #7
 8005a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a04:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005a08:	18d2      	adds	r2, r2, r3
 8005a0a:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005a0e:	e007      	b.n	8005a20 <ai_array_get_elems_from_size+0x3a>
 8005a10:	11c2      	asrs	r2, r0, #7
 8005a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a16:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005a1a:	189a      	adds	r2, r3, r2
 8005a1c:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005a20:	1542      	asrs	r2, r0, #21
 8005a22:	f002 0203 	and.w	r2, r2, #3
 8005a26:	4091      	lsls	r1, r2
 8005a28:	1dc9      	adds	r1, r1, #7
 8005a2a:	11c3      	asrs	r3, r0, #7
 8005a2c:	08c9      	lsrs	r1, r1, #3
 8005a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a32:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005a36:	00c9      	lsls	r1, r1, #3
 8005a38:	18c0      	adds	r0, r0, r3
 8005a3a:	fbb1 f0f0 	udiv	r0, r1, r0
 8005a3e:	4770      	bx	lr

08005a40 <.text_38>:
 8005a40:	5f544d46 	.word	0x5f544d46
 8005a44:	454e4f4e 	.word	0x454e4f4e
 8005a48:	00000000 	.word	0x00000000

08005a4c <.text_39>:
 8005a4c:	5f544d46 	.word	0x5f544d46
 8005a50:	414f4c46 	.word	0x414f4c46
 8005a54:	0054      	.short	0x0054
	...

08005a58 <.text_40>:
 8005a58:	5f544d46 	.word	0x5f544d46
 8005a5c:	414f4c46 	.word	0x414f4c46
 8005a60:	00343654 	.word	0x00343654

08005a64 <.text_41>:
 8005a64:	5f544d46 	.word	0x5f544d46
 8005a68:	414f4c46 	.word	0x414f4c46
 8005a6c:	00363154 	.word	0x00363154

08005a70 <.text_42>:
 8005a70:	5f544d46 	.word	0x5f544d46
 8005a74:	3855      	.short	0x3855
	...

08005a78 <.text_43>:
 8005a78:	5f544d46 	.word	0x5f544d46
 8005a7c:	00363155 	.word	0x00363155

08005a80 <.text_44>:
 8005a80:	5f544d46 	.word	0x5f544d46
 8005a84:	00323355 	.word	0x00323355

08005a88 <.text_45>:
 8005a88:	5f544d46 	.word	0x5f544d46
 8005a8c:	00343655 	.word	0x00343655

08005a90 <.text_46>:
 8005a90:	5f544d46 	.word	0x5f544d46
 8005a94:	3455      	.short	0x3455
	...

08005a98 <.text_47>:
 8005a98:	5f544d46 	.word	0x5f544d46
 8005a9c:	3853      	.short	0x3853
	...

08005aa0 <.text_48>:
 8005aa0:	5f544d46 	.word	0x5f544d46
 8005aa4:	00363153 	.word	0x00363153

08005aa8 <.text_49>:
 8005aa8:	5f544d46 	.word	0x5f544d46
 8005aac:	00323353 	.word	0x00323353

08005ab0 <.text_50>:
 8005ab0:	5f544d46 	.word	0x5f544d46
 8005ab4:	00343653 	.word	0x00343653

08005ab8 <.text_51>:
 8005ab8:	5f544d46 	.word	0x5f544d46
 8005abc:	3453      	.short	0x3453
	...

08005ac0 <.text_52>:
 8005ac0:	5f544d46 	.word	0x5f544d46
 8005ac4:	0051      	.short	0x0051
	...

08005ac8 <.text_53>:
 8005ac8:	5f544d46 	.word	0x5f544d46
 8005acc:	3751      	.short	0x3751
	...

08005ad0 <.text_54>:
 8005ad0:	5f544d46 	.word	0x5f544d46
 8005ad4:	00353151 	.word	0x00353151

08005ad8 <.text_55>:
 8005ad8:	5f544d46 	.word	0x5f544d46
 8005adc:	00313351 	.word	0x00313351

08005ae0 <.text_56>:
 8005ae0:	5f544d46 	.word	0x5f544d46
 8005ae4:	5155      	.short	0x5155
	...

08005ae8 <.text_57>:
 8005ae8:	5f544d46 	.word	0x5f544d46
 8005aec:	00375155 	.word	0x00375155

08005af0 <.text_58>:
 8005af0:	5f544d46 	.word	0x5f544d46
 8005af4:	35315155 	.word	0x35315155
 8005af8:	00000000 	.word	0x00000000

08005afc <.text_59>:
 8005afc:	5f544d46 	.word	0x5f544d46
 8005b00:	31335155 	.word	0x31335155
 8005b04:	00000000 	.word	0x00000000

08005b08 <.text_60>:
 8005b08:	5f544d46 	.word	0x5f544d46
 8005b0c:	3454554c 	.word	0x3454554c
 8005b10:	4f4c465f 	.word	0x4f4c465f
 8005b14:	5441      	.short	0x5441
	...

08005b18 <.text_61>:
 8005b18:	5f544d46 	.word	0x5f544d46
 8005b1c:	3854554c 	.word	0x3854554c
 8005b20:	4f4c465f 	.word	0x4f4c465f
 8005b24:	5441      	.short	0x5441
	...

08005b28 <.text_62>:
 8005b28:	5f544d46 	.word	0x5f544d46
 8005b2c:	3454554c 	.word	0x3454554c
 8005b30:	3531515f 	.word	0x3531515f
 8005b34:	00000000 	.word	0x00000000

08005b38 <.text_63>:
 8005b38:	5f544d46 	.word	0x5f544d46
 8005b3c:	3854554c 	.word	0x3854554c
 8005b40:	3531515f 	.word	0x3531515f
 8005b44:	00000000 	.word	0x00000000

08005b48 <.text_64>:
 8005b48:	5f544d46 	.word	0x5f544d46
 8005b4c:	3454554c 	.word	0x3454554c
 8005b50:	3151555f 	.word	0x3151555f
 8005b54:	0035      	.short	0x0035
	...

08005b58 <.text_65>:
 8005b58:	5f544d46 	.word	0x5f544d46
 8005b5c:	3854554c 	.word	0x3854554c
 8005b60:	3151555f 	.word	0x3151555f
 8005b64:	0035      	.short	0x0035
	...

08005b68 <.text_66>:
 8005b68:	415f4941 	.word	0x415f4941
 8005b6c:	59415252 	.word	0x59415252
 8005b70:	524f465f 	.word	0x524f465f
 8005b74:	5f54414d 	.word	0x5f54414d
 8005b78:	454e4f4e 	.word	0x454e4f4e
 8005b7c:	00000000 	.word	0x00000000

08005b80 <.text_67>:
 8005b80:	415f4941 	.word	0x415f4941
 8005b84:	59415252 	.word	0x59415252
 8005b88:	524f465f 	.word	0x524f465f
 8005b8c:	5f54414d 	.word	0x5f54414d
 8005b90:	0051      	.short	0x0051
	...

08005b94 <.text_68>:
 8005b94:	415f4941 	.word	0x415f4941
 8005b98:	59415252 	.word	0x59415252
 8005b9c:	524f465f 	.word	0x524f465f
 8005ba0:	5f54414d 	.word	0x5f54414d
 8005ba4:	5155      	.short	0x5155
	...

08005ba8 <.text_69>:
 8005ba8:	425f4941 	.word	0x425f4941
 8005bac:	45464655 	.word	0x45464655
 8005bb0:	4f465f52 	.word	0x4f465f52
 8005bb4:	54414d52 	.word	0x54414d52
 8005bb8:	4e4f4e5f 	.word	0x4e4f4e5f
 8005bbc:	0045      	.short	0x0045
	...

08005bc0 <.text_70>:
 8005bc0:	425f4941 	.word	0x425f4941
 8005bc4:	45464655 	.word	0x45464655
 8005bc8:	4f465f52 	.word	0x4f465f52
 8005bcc:	54414d52 	.word	0x54414d52
 8005bd0:	515f      	.short	0x515f
	...

08005bd4 <.text_71>:
 8005bd4:	425f4941 	.word	0x425f4941
 8005bd8:	45464655 	.word	0x45464655
 8005bdc:	4f465f52 	.word	0x4f465f52
 8005be0:	54414d52 	.word	0x54414d52
 8005be4:	0051555f 	.word	0x0051555f

08005be8 <ai_math_dot_array>:
 8005be8:	b530      	push	{r4, r5, lr}
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	b081      	sub	sp, #4
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	9500      	str	r5, [sp, #0]
 8005bf8:	466b      	mov	r3, sp
 8005bfa:	f000 fdf3 	bl	80067e4 <arm_dot_prod_f32>
 8005bfe:	ed94 0a00 	vldr	s0, [r4]
 8005c02:	eddd 0a00 	vldr	s1, [sp]
 8005c06:	ee70 0a20 	vadd.f32	s1, s0, s1
 8005c0a:	edc4 0a00 	vstr	s1, [r4]
 8005c0e:	b001      	add	sp, #4
 8005c10:	bd30      	pop	{r4, r5, pc}
	...

08005c14 <ai_math_sqrt>:
 8005c14:	eef0 0a40 	vmov.f32	s1, s0
 8005c18:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c20:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8005cc4 <.text_12>
 8005c24:	db01      	blt.n	8005c2a <ai_math_sqrt+0x16>
 8005c26:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8005c2a:	4770      	bx	lr

08005c2c <ai_math_exp>:
 8005c2c:	f00c b826 	b.w	8011c7c <expf>

08005c30 <ai_math_pow>:
 8005c30:	f00c b922 	b.w	8011e78 <powf>

08005c34 <ai_math_tanh>:
 8005c34:	f00c ba5e 	b.w	80120f4 <tanhf>

08005c38 <ai_math_relu>:
 8005c38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	bf48      	it	mi
 8005c42:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8005cc4 <.text_12>
 8005c46:	4770      	bx	lr

08005c48 <ai_math_prelu>:
 8005c48:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c50:	bf48      	it	mi
 8005c52:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8005c56:	4770      	bx	lr

08005c58 <ai_math_sigmoid>:
 8005c58:	b500      	push	{lr}
 8005c5a:	b081      	sub	sp, #4
 8005c5c:	eeb1 0a40 	vneg.f32	s0, s0
 8005c60:	f00c f80c 	bl	8011c7c <expf>
 8005c64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005c68:	b001      	add	sp, #4
 8005c6a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005c6e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005c72:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8005c76:	bd00      	pop	{pc}

08005c78 <ai_math_hard_sigmoid>:
 8005c78:	eef0 0a40 	vmov.f32	s1, s0
 8005c7c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8005cc8 <.text_13>
 8005c80:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005c84:	ee00 0a81 	vmla.f32	s0, s1, s2
 8005c88:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005ccc <.text_14>
 8005c8c:	eeb4 0a60 	vcmp.f32	s0, s1
 8005c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c94:	da07      	bge.n	8005ca6 <ai_math_hard_sigmoid+0x2e>
 8005c96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	d504      	bpl.n	8005caa <ai_math_hard_sigmoid+0x32>
 8005ca0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005cc4 <.text_12>
 8005ca4:	4770      	bx	lr
 8005ca6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005caa:	4770      	bx	lr

08005cac <ai_math_sign>:
 8005cac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	bfcc      	ite	gt
 8005cb6:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8005cd0 <.text_15>
 8005cba:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8005cd4 <.text_16>
 8005cbe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005cc2:	4770      	bx	lr

08005cc4 <.text_12>:
 8005cc4:	00000000 	.word	0x00000000

08005cc8 <.text_13>:
 8005cc8:	3e4ccccd 	.word	0x3e4ccccd

08005ccc <.text_14>:
 8005ccc:	3f800001 	.word	0x3f800001

08005cd0 <.text_15>:
 8005cd0:	00000001 	.word	0x00000001

08005cd4 <.text_16>:
 8005cd4:	ffffffff 	.word	0xffffffff

08005cd8 <ai_sum>:
 8005cd8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005cdc:	4770      	bx	lr

08005cde <ai_sub>:
 8005cde:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005ce2:	4770      	bx	lr

08005ce4 <ai_mul>:
 8005ce4:	ee20 0a20 	vmul.f32	s0, s0, s1
 8005ce8:	4770      	bx	lr

08005cea <ai_div>:
 8005cea:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005cee:	4770      	bx	lr

08005cf0 <ai_max>:
 8005cf0:	eef4 0a40 	vcmp.f32	s1, s0
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	bf58      	it	pl
 8005cfa:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005cfe:	4770      	bx	lr

08005d00 <ai_min>:
 8005d00:	eeb4 0a60 	vcmp.f32	s0, s1
 8005d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d08:	bf58      	it	pl
 8005d0a:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005d0e:	4770      	bx	lr

08005d10 <core_timer_init_>:
 8005d10:	4770      	bx	lr

08005d12 <core_timer_ticks_>:
 8005d12:	2000      	movs	r0, #0
 8005d14:	4770      	bx	lr
	...

08005d18 <core_timer_init>:
 8005d18:	b530      	push	{r4, r5, lr}
 8005d1a:	0005      	movs	r5, r0
 8005d1c:	b081      	sub	sp, #4
 8005d1e:	460c      	mov	r4, r1
 8005d20:	d00d      	beq.n	8005d3e <core_timer_init+0x26>
 8005d22:	4929      	ldr	r1, [pc, #164]	; (8005dc8 <.text_12>)
 8005d24:	7808      	ldrb	r0, [r1, #0]
 8005d26:	b118      	cbz	r0, 8005d30 <core_timer_init+0x18>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	700a      	strb	r2, [r1, #0]
 8005d2c:	f7ff fff0 	bl	8005d10 <core_timer_init_>
 8005d30:	b904      	cbnz	r4, 8005d34 <core_timer_init+0x1c>
 8005d32:	a423      	add	r4, pc, #140	; (adr r4, 8005dc0 <.text_10>)
 8005d34:	602c      	str	r4, [r5, #0]
 8005d36:	2000      	movs	r0, #0
 8005d38:	60a8      	str	r0, [r5, #8]
 8005d3a:	6068      	str	r0, [r5, #4]
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	b001      	add	sp, #4
 8005d40:	bd30      	pop	{r4, r5, pc}

08005d42 <core_timer_reset>:
 8005d42:	b118      	cbz	r0, 8005d4c <core_timer_reset+0xa>
 8005d44:	2100      	movs	r1, #0
 8005d46:	6081      	str	r1, [r0, #8]
 8005d48:	6041      	str	r1, [r0, #4]
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	4770      	bx	lr

08005d4e <core_timer_start>:
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	0004      	movs	r4, r0
 8005d52:	d101      	bne.n	8005d58 <core_timer_start+0xa>
 8005d54:	2000      	movs	r0, #0
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	f7ff ffdb 	bl	8005d12 <core_timer_ticks_>
 8005d5c:	6060      	str	r0, [r4, #4]
 8005d5e:	2001      	movs	r0, #1
 8005d60:	bd10      	pop	{r4, pc}

08005d62 <core_timer_stop>:
 8005d62:	b510      	push	{r4, lr}
 8005d64:	0004      	movs	r4, r0
 8005d66:	d101      	bne.n	8005d6c <core_timer_stop+0xa>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	bd10      	pop	{r4, pc}
 8005d6c:	f7ff ffd1 	bl	8005d12 <core_timer_ticks_>
 8005d70:	68a2      	ldr	r2, [r4, #8]
 8005d72:	6861      	ldr	r1, [r4, #4]
 8005d74:	1880      	adds	r0, r0, r2
 8005d76:	1a40      	subs	r0, r0, r1
 8005d78:	60a0      	str	r0, [r4, #8]
 8005d7a:	bd10      	pop	{r4, pc}

08005d7c <core_timer_main_test_unit>:
 8005d7c:	b500      	push	{lr}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	a112      	add	r1, pc, #72	; (adr r1, 8005dcc <.text_13>)
 8005d82:	4668      	mov	r0, sp
 8005d84:	f7ff ffc8 	bl	8005d18 <core_timer_init>
 8005d88:	f7ff ffc3 	bl	8005d12 <core_timer_ticks_>
 8005d8c:	9001      	str	r0, [sp, #4]
 8005d8e:	4668      	mov	r0, sp
 8005d90:	f7ff ffe7 	bl	8005d62 <core_timer_stop>
 8005d94:	ed9d 0a02 	vldr	s0, [sp, #8]
 8005d98:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005d9c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8005dc4 <.text_11>
 8005da0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8005da4:	ee10 0a90 	vmov	r0, s1
 8005da8:	f000 fa36 	bl	8006218 <__aeabi_f2d>
 8005dac:	460b      	mov	r3, r1
 8005dae:	4602      	mov	r2, r0
 8005db0:	f8dd 1000 	ldr.w	r1, [sp]
 8005db4:	a009      	add	r0, pc, #36	; (adr r0, 8005ddc <.text_14>)
 8005db6:	f00a f90f 	bl	800ffd8 <iprintf>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	b003      	add	sp, #12
 8005dbe:	bd00      	pop	{pc}

08005dc0 <.text_10>:
 8005dc0:	00000000 	.word	0x00000000

08005dc4 <.text_11>:
 8005dc4:	3a83126f 	.word	0x3a83126f

08005dc8 <.text_12>:
 8005dc8:	20000004 	.word	0x20000004

08005dcc <.text_13>:
 8005dcc:	6d617845 	.word	0x6d617845
 8005dd0:	20656c70 	.word	0x20656c70
 8005dd4:	656d6954 	.word	0x656d6954
 8005dd8:	0072      	.short	0x0072
	...

08005ddc <.text_14>:
 8005ddc:	656d6954 	.word	0x656d6954
 8005de0:	73252072 	.word	0x73252072
 8005de4:	6c45203a 	.word	0x6c45203a
 8005de8:	65737061 	.word	0x65737061
 8005dec:	66252064 	.word	0x66252064
 8005df0:	0d736d20 	.word	0x0d736d20
 8005df4:	000a      	.short	0x000a
	...

08005df8 <__aeabi_memset>:
 8005df8:	b470      	push	{r4, r5, r6}
 8005dfa:	0784      	lsls	r4, r0, #30
 8005dfc:	d046      	beq.n	8005e8c <__aeabi_memset+0x94>
 8005dfe:	1e4c      	subs	r4, r1, #1
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d041      	beq.n	8005e88 <__aeabi_memset+0x90>
 8005e04:	b2d5      	uxtb	r5, r2
 8005e06:	4603      	mov	r3, r0
 8005e08:	e002      	b.n	8005e10 <__aeabi_memset+0x18>
 8005e0a:	1e61      	subs	r1, r4, #1
 8005e0c:	b3e4      	cbz	r4, 8005e88 <__aeabi_memset+0x90>
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f803 5b01 	strb.w	r5, [r3], #1
 8005e14:	0799      	lsls	r1, r3, #30
 8005e16:	d1f8      	bne.n	8005e0a <__aeabi_memset+0x12>
 8005e18:	2c03      	cmp	r4, #3
 8005e1a:	d92e      	bls.n	8005e7a <__aeabi_memset+0x82>
 8005e1c:	b2d5      	uxtb	r5, r2
 8005e1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005e22:	2c0f      	cmp	r4, #15
 8005e24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005e28:	d919      	bls.n	8005e5e <__aeabi_memset+0x66>
 8005e2a:	4626      	mov	r6, r4
 8005e2c:	f103 0110 	add.w	r1, r3, #16
 8005e30:	3e10      	subs	r6, #16
 8005e32:	2e0f      	cmp	r6, #15
 8005e34:	f841 5c10 	str.w	r5, [r1, #-16]
 8005e38:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005e3c:	f841 5c08 	str.w	r5, [r1, #-8]
 8005e40:	f841 5c04 	str.w	r5, [r1, #-4]
 8005e44:	f101 0110 	add.w	r1, r1, #16
 8005e48:	d8f2      	bhi.n	8005e30 <__aeabi_memset+0x38>
 8005e4a:	f1a4 0110 	sub.w	r1, r4, #16
 8005e4e:	f021 010f 	bic.w	r1, r1, #15
 8005e52:	f004 040f 	and.w	r4, r4, #15
 8005e56:	3110      	adds	r1, #16
 8005e58:	2c03      	cmp	r4, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	d90d      	bls.n	8005e7a <__aeabi_memset+0x82>
 8005e5e:	461e      	mov	r6, r3
 8005e60:	4621      	mov	r1, r4
 8005e62:	3904      	subs	r1, #4
 8005e64:	2903      	cmp	r1, #3
 8005e66:	f846 5b04 	str.w	r5, [r6], #4
 8005e6a:	d8fa      	bhi.n	8005e62 <__aeabi_memset+0x6a>
 8005e6c:	1f21      	subs	r1, r4, #4
 8005e6e:	f021 0103 	bic.w	r1, r1, #3
 8005e72:	3104      	adds	r1, #4
 8005e74:	440b      	add	r3, r1
 8005e76:	f004 0403 	and.w	r4, r4, #3
 8005e7a:	b12c      	cbz	r4, 8005e88 <__aeabi_memset+0x90>
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	441c      	add	r4, r3
 8005e80:	f803 2b01 	strb.w	r2, [r3], #1
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	d1fb      	bne.n	8005e80 <__aeabi_memset+0x88>
 8005e88:	bc70      	pop	{r4, r5, r6}
 8005e8a:	4770      	bx	lr
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	4603      	mov	r3, r0
 8005e90:	e7c2      	b.n	8005e18 <__aeabi_memset+0x20>

08005e92 <strlen>:
 8005e92:	4603      	mov	r3, r0
 8005e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d1fb      	bne.n	8005e94 <strlen+0x2>
 8005e9c:	1a18      	subs	r0, r3, r0
 8005e9e:	3801      	subs	r0, #1
 8005ea0:	4770      	bx	lr
	...

08005eb0 <memchr>:
 8005eb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005eb4:	2a10      	cmp	r2, #16
 8005eb6:	db2b      	blt.n	8005f10 <memchr+0x60>
 8005eb8:	f010 0f07 	tst.w	r0, #7
 8005ebc:	d008      	beq.n	8005ed0 <memchr+0x20>
 8005ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ec2:	3a01      	subs	r2, #1
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d02d      	beq.n	8005f24 <memchr+0x74>
 8005ec8:	f010 0f07 	tst.w	r0, #7
 8005ecc:	b342      	cbz	r2, 8005f20 <memchr+0x70>
 8005ece:	d1f6      	bne.n	8005ebe <memchr+0xe>
 8005ed0:	b4f0      	push	{r4, r5, r6, r7}
 8005ed2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005ed6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005eda:	f022 0407 	bic.w	r4, r2, #7
 8005ede:	f07f 0700 	mvns.w	r7, #0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005ee8:	3c08      	subs	r4, #8
 8005eea:	ea85 0501 	eor.w	r5, r5, r1
 8005eee:	ea86 0601 	eor.w	r6, r6, r1
 8005ef2:	fa85 f547 	uadd8	r5, r5, r7
 8005ef6:	faa3 f587 	sel	r5, r3, r7
 8005efa:	fa86 f647 	uadd8	r6, r6, r7
 8005efe:	faa5 f687 	sel	r6, r5, r7
 8005f02:	b98e      	cbnz	r6, 8005f28 <memchr+0x78>
 8005f04:	d1ee      	bne.n	8005ee4 <memchr+0x34>
 8005f06:	bcf0      	pop	{r4, r5, r6, r7}
 8005f08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005f0c:	f002 0207 	and.w	r2, r2, #7
 8005f10:	b132      	cbz	r2, 8005f20 <memchr+0x70>
 8005f12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005f16:	3a01      	subs	r2, #1
 8005f18:	ea83 0301 	eor.w	r3, r3, r1
 8005f1c:	b113      	cbz	r3, 8005f24 <memchr+0x74>
 8005f1e:	d1f8      	bne.n	8005f12 <memchr+0x62>
 8005f20:	2000      	movs	r0, #0
 8005f22:	4770      	bx	lr
 8005f24:	3801      	subs	r0, #1
 8005f26:	4770      	bx	lr
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	bf06      	itte	eq
 8005f2c:	4635      	moveq	r5, r6
 8005f2e:	3803      	subeq	r0, #3
 8005f30:	3807      	subne	r0, #7
 8005f32:	f015 0f01 	tst.w	r5, #1
 8005f36:	d107      	bne.n	8005f48 <memchr+0x98>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005f3e:	bf02      	ittt	eq
 8005f40:	3001      	addeq	r0, #1
 8005f42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005f46:	3001      	addeq	r0, #1
 8005f48:	bcf0      	pop	{r4, r5, r6, r7}
 8005f4a:	3801      	subs	r0, #1
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop

08005f50 <__aeabi_drsub>:
 8005f50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005f54:	e002      	b.n	8005f5c <__adddf3>
 8005f56:	bf00      	nop

08005f58 <__aeabi_dsub>:
 8005f58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005f5c <__adddf3>:
 8005f5c:	b530      	push	{r4, r5, lr}
 8005f5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005f62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005f66:	ea94 0f05 	teq	r4, r5
 8005f6a:	bf08      	it	eq
 8005f6c:	ea90 0f02 	teqeq	r0, r2
 8005f70:	bf1f      	itttt	ne
 8005f72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005f76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005f7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005f7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005f82:	f000 80e2 	beq.w	800614a <__adddf3+0x1ee>
 8005f86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005f8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005f8e:	bfb8      	it	lt
 8005f90:	426d      	neglt	r5, r5
 8005f92:	dd0c      	ble.n	8005fae <__adddf3+0x52>
 8005f94:	442c      	add	r4, r5
 8005f96:	ea80 0202 	eor.w	r2, r0, r2
 8005f9a:	ea81 0303 	eor.w	r3, r1, r3
 8005f9e:	ea82 0000 	eor.w	r0, r2, r0
 8005fa2:	ea83 0101 	eor.w	r1, r3, r1
 8005fa6:	ea80 0202 	eor.w	r2, r0, r2
 8005faa:	ea81 0303 	eor.w	r3, r1, r3
 8005fae:	2d36      	cmp	r5, #54	; 0x36
 8005fb0:	bf88      	it	hi
 8005fb2:	bd30      	pophi	{r4, r5, pc}
 8005fb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005fb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005fbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005fc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005fc4:	d002      	beq.n	8005fcc <__adddf3+0x70>
 8005fc6:	4240      	negs	r0, r0
 8005fc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005fcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005fd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005fd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005fd8:	d002      	beq.n	8005fe0 <__adddf3+0x84>
 8005fda:	4252      	negs	r2, r2
 8005fdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005fe0:	ea94 0f05 	teq	r4, r5
 8005fe4:	f000 80a7 	beq.w	8006136 <__adddf3+0x1da>
 8005fe8:	f1a4 0401 	sub.w	r4, r4, #1
 8005fec:	f1d5 0e20 	rsbs	lr, r5, #32
 8005ff0:	db0d      	blt.n	800600e <__adddf3+0xb2>
 8005ff2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005ff6:	fa22 f205 	lsr.w	r2, r2, r5
 8005ffa:	1880      	adds	r0, r0, r2
 8005ffc:	f141 0100 	adc.w	r1, r1, #0
 8006000:	fa03 f20e 	lsl.w	r2, r3, lr
 8006004:	1880      	adds	r0, r0, r2
 8006006:	fa43 f305 	asr.w	r3, r3, r5
 800600a:	4159      	adcs	r1, r3
 800600c:	e00e      	b.n	800602c <__adddf3+0xd0>
 800600e:	f1a5 0520 	sub.w	r5, r5, #32
 8006012:	f10e 0e20 	add.w	lr, lr, #32
 8006016:	2a01      	cmp	r2, #1
 8006018:	fa03 fc0e 	lsl.w	ip, r3, lr
 800601c:	bf28      	it	cs
 800601e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006022:	fa43 f305 	asr.w	r3, r3, r5
 8006026:	18c0      	adds	r0, r0, r3
 8006028:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800602c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006030:	d507      	bpl.n	8006042 <__adddf3+0xe6>
 8006032:	f04f 0e00 	mov.w	lr, #0
 8006036:	f1dc 0c00 	rsbs	ip, ip, #0
 800603a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800603e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006042:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006046:	d31b      	bcc.n	8006080 <__adddf3+0x124>
 8006048:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800604c:	d30c      	bcc.n	8006068 <__adddf3+0x10c>
 800604e:	0849      	lsrs	r1, r1, #1
 8006050:	ea5f 0030 	movs.w	r0, r0, rrx
 8006054:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006058:	f104 0401 	add.w	r4, r4, #1
 800605c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006060:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006064:	f080 809a 	bcs.w	800619c <__adddf3+0x240>
 8006068:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800606c:	bf08      	it	eq
 800606e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006072:	f150 0000 	adcs.w	r0, r0, #0
 8006076:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800607a:	ea41 0105 	orr.w	r1, r1, r5
 800607e:	bd30      	pop	{r4, r5, pc}
 8006080:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006084:	4140      	adcs	r0, r0
 8006086:	eb41 0101 	adc.w	r1, r1, r1
 800608a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800608e:	f1a4 0401 	sub.w	r4, r4, #1
 8006092:	d1e9      	bne.n	8006068 <__adddf3+0x10c>
 8006094:	f091 0f00 	teq	r1, #0
 8006098:	bf04      	itt	eq
 800609a:	4601      	moveq	r1, r0
 800609c:	2000      	moveq	r0, #0
 800609e:	fab1 f381 	clz	r3, r1
 80060a2:	bf08      	it	eq
 80060a4:	3320      	addeq	r3, #32
 80060a6:	f1a3 030b 	sub.w	r3, r3, #11
 80060aa:	f1b3 0220 	subs.w	r2, r3, #32
 80060ae:	da0c      	bge.n	80060ca <__adddf3+0x16e>
 80060b0:	320c      	adds	r2, #12
 80060b2:	dd08      	ble.n	80060c6 <__adddf3+0x16a>
 80060b4:	f102 0c14 	add.w	ip, r2, #20
 80060b8:	f1c2 020c 	rsb	r2, r2, #12
 80060bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80060c0:	fa21 f102 	lsr.w	r1, r1, r2
 80060c4:	e00c      	b.n	80060e0 <__adddf3+0x184>
 80060c6:	f102 0214 	add.w	r2, r2, #20
 80060ca:	bfd8      	it	le
 80060cc:	f1c2 0c20 	rsble	ip, r2, #32
 80060d0:	fa01 f102 	lsl.w	r1, r1, r2
 80060d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80060d8:	bfdc      	itt	le
 80060da:	ea41 010c 	orrle.w	r1, r1, ip
 80060de:	4090      	lslle	r0, r2
 80060e0:	1ae4      	subs	r4, r4, r3
 80060e2:	bfa2      	ittt	ge
 80060e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80060e8:	4329      	orrge	r1, r5
 80060ea:	bd30      	popge	{r4, r5, pc}
 80060ec:	ea6f 0404 	mvn.w	r4, r4
 80060f0:	3c1f      	subs	r4, #31
 80060f2:	da1c      	bge.n	800612e <__adddf3+0x1d2>
 80060f4:	340c      	adds	r4, #12
 80060f6:	dc0e      	bgt.n	8006116 <__adddf3+0x1ba>
 80060f8:	f104 0414 	add.w	r4, r4, #20
 80060fc:	f1c4 0220 	rsb	r2, r4, #32
 8006100:	fa20 f004 	lsr.w	r0, r0, r4
 8006104:	fa01 f302 	lsl.w	r3, r1, r2
 8006108:	ea40 0003 	orr.w	r0, r0, r3
 800610c:	fa21 f304 	lsr.w	r3, r1, r4
 8006110:	ea45 0103 	orr.w	r1, r5, r3
 8006114:	bd30      	pop	{r4, r5, pc}
 8006116:	f1c4 040c 	rsb	r4, r4, #12
 800611a:	f1c4 0220 	rsb	r2, r4, #32
 800611e:	fa20 f002 	lsr.w	r0, r0, r2
 8006122:	fa01 f304 	lsl.w	r3, r1, r4
 8006126:	ea40 0003 	orr.w	r0, r0, r3
 800612a:	4629      	mov	r1, r5
 800612c:	bd30      	pop	{r4, r5, pc}
 800612e:	fa21 f004 	lsr.w	r0, r1, r4
 8006132:	4629      	mov	r1, r5
 8006134:	bd30      	pop	{r4, r5, pc}
 8006136:	f094 0f00 	teq	r4, #0
 800613a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800613e:	bf06      	itte	eq
 8006140:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006144:	3401      	addeq	r4, #1
 8006146:	3d01      	subne	r5, #1
 8006148:	e74e      	b.n	8005fe8 <__adddf3+0x8c>
 800614a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800614e:	bf18      	it	ne
 8006150:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006154:	d029      	beq.n	80061aa <__adddf3+0x24e>
 8006156:	ea94 0f05 	teq	r4, r5
 800615a:	bf08      	it	eq
 800615c:	ea90 0f02 	teqeq	r0, r2
 8006160:	d005      	beq.n	800616e <__adddf3+0x212>
 8006162:	ea54 0c00 	orrs.w	ip, r4, r0
 8006166:	bf04      	itt	eq
 8006168:	4619      	moveq	r1, r3
 800616a:	4610      	moveq	r0, r2
 800616c:	bd30      	pop	{r4, r5, pc}
 800616e:	ea91 0f03 	teq	r1, r3
 8006172:	bf1e      	ittt	ne
 8006174:	2100      	movne	r1, #0
 8006176:	2000      	movne	r0, #0
 8006178:	bd30      	popne	{r4, r5, pc}
 800617a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800617e:	d105      	bne.n	800618c <__adddf3+0x230>
 8006180:	0040      	lsls	r0, r0, #1
 8006182:	4149      	adcs	r1, r1
 8006184:	bf28      	it	cs
 8006186:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800618a:	bd30      	pop	{r4, r5, pc}
 800618c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006190:	bf3c      	itt	cc
 8006192:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006196:	bd30      	popcc	{r4, r5, pc}
 8006198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800619c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80061a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061a4:	f04f 0000 	mov.w	r0, #0
 80061a8:	bd30      	pop	{r4, r5, pc}
 80061aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80061ae:	bf1a      	itte	ne
 80061b0:	4619      	movne	r1, r3
 80061b2:	4610      	movne	r0, r2
 80061b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80061b8:	bf1c      	itt	ne
 80061ba:	460b      	movne	r3, r1
 80061bc:	4602      	movne	r2, r0
 80061be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80061c2:	bf06      	itte	eq
 80061c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80061c8:	ea91 0f03 	teqeq	r1, r3
 80061cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80061d0:	bd30      	pop	{r4, r5, pc}
 80061d2:	bf00      	nop

080061d4 <__aeabi_ui2d>:
 80061d4:	f090 0f00 	teq	r0, #0
 80061d8:	bf04      	itt	eq
 80061da:	2100      	moveq	r1, #0
 80061dc:	4770      	bxeq	lr
 80061de:	b530      	push	{r4, r5, lr}
 80061e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80061e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	f04f 0100 	mov.w	r1, #0
 80061f0:	e750      	b.n	8006094 <__adddf3+0x138>
 80061f2:	bf00      	nop

080061f4 <__aeabi_i2d>:
 80061f4:	f090 0f00 	teq	r0, #0
 80061f8:	bf04      	itt	eq
 80061fa:	2100      	moveq	r1, #0
 80061fc:	4770      	bxeq	lr
 80061fe:	b530      	push	{r4, r5, lr}
 8006200:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006204:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006208:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800620c:	bf48      	it	mi
 800620e:	4240      	negmi	r0, r0
 8006210:	f04f 0100 	mov.w	r1, #0
 8006214:	e73e      	b.n	8006094 <__adddf3+0x138>
 8006216:	bf00      	nop

08006218 <__aeabi_f2d>:
 8006218:	0042      	lsls	r2, r0, #1
 800621a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800621e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006222:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006226:	bf1f      	itttt	ne
 8006228:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800622c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006230:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006234:	4770      	bxne	lr
 8006236:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800623a:	bf08      	it	eq
 800623c:	4770      	bxeq	lr
 800623e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006242:	bf04      	itt	eq
 8006244:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006248:	4770      	bxeq	lr
 800624a:	b530      	push	{r4, r5, lr}
 800624c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006254:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006258:	e71c      	b.n	8006094 <__adddf3+0x138>
 800625a:	bf00      	nop

0800625c <__aeabi_ul2d>:
 800625c:	ea50 0201 	orrs.w	r2, r0, r1
 8006260:	bf08      	it	eq
 8006262:	4770      	bxeq	lr
 8006264:	b530      	push	{r4, r5, lr}
 8006266:	f04f 0500 	mov.w	r5, #0
 800626a:	e00a      	b.n	8006282 <__aeabi_l2d+0x16>

0800626c <__aeabi_l2d>:
 800626c:	ea50 0201 	orrs.w	r2, r0, r1
 8006270:	bf08      	it	eq
 8006272:	4770      	bxeq	lr
 8006274:	b530      	push	{r4, r5, lr}
 8006276:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800627a:	d502      	bpl.n	8006282 <__aeabi_l2d+0x16>
 800627c:	4240      	negs	r0, r0
 800627e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006282:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006286:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800628a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800628e:	f43f aed8 	beq.w	8006042 <__adddf3+0xe6>
 8006292:	f04f 0203 	mov.w	r2, #3
 8006296:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800629a:	bf18      	it	ne
 800629c:	3203      	addne	r2, #3
 800629e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80062a2:	bf18      	it	ne
 80062a4:	3203      	addne	r2, #3
 80062a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80062aa:	f1c2 0320 	rsb	r3, r2, #32
 80062ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80062b2:	fa20 f002 	lsr.w	r0, r0, r2
 80062b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80062ba:	ea40 000e 	orr.w	r0, r0, lr
 80062be:	fa21 f102 	lsr.w	r1, r1, r2
 80062c2:	4414      	add	r4, r2
 80062c4:	e6bd      	b.n	8006042 <__adddf3+0xe6>
 80062c6:	bf00      	nop

080062c8 <__aeabi_frsub>:
 80062c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80062cc:	e002      	b.n	80062d4 <__addsf3>
 80062ce:	bf00      	nop

080062d0 <__aeabi_fsub>:
 80062d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080062d4 <__addsf3>:
 80062d4:	0042      	lsls	r2, r0, #1
 80062d6:	bf1f      	itttt	ne
 80062d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80062dc:	ea92 0f03 	teqne	r2, r3
 80062e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80062e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80062e8:	d06a      	beq.n	80063c0 <__addsf3+0xec>
 80062ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80062ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80062f2:	bfc1      	itttt	gt
 80062f4:	18d2      	addgt	r2, r2, r3
 80062f6:	4041      	eorgt	r1, r0
 80062f8:	4048      	eorgt	r0, r1
 80062fa:	4041      	eorgt	r1, r0
 80062fc:	bfb8      	it	lt
 80062fe:	425b      	neglt	r3, r3
 8006300:	2b19      	cmp	r3, #25
 8006302:	bf88      	it	hi
 8006304:	4770      	bxhi	lr
 8006306:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800630a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800630e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006312:	bf18      	it	ne
 8006314:	4240      	negne	r0, r0
 8006316:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800631a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800631e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006322:	bf18      	it	ne
 8006324:	4249      	negne	r1, r1
 8006326:	ea92 0f03 	teq	r2, r3
 800632a:	d03f      	beq.n	80063ac <__addsf3+0xd8>
 800632c:	f1a2 0201 	sub.w	r2, r2, #1
 8006330:	fa41 fc03 	asr.w	ip, r1, r3
 8006334:	eb10 000c 	adds.w	r0, r0, ip
 8006338:	f1c3 0320 	rsb	r3, r3, #32
 800633c:	fa01 f103 	lsl.w	r1, r1, r3
 8006340:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006344:	d502      	bpl.n	800634c <__addsf3+0x78>
 8006346:	4249      	negs	r1, r1
 8006348:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800634c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006350:	d313      	bcc.n	800637a <__addsf3+0xa6>
 8006352:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006356:	d306      	bcc.n	8006366 <__addsf3+0x92>
 8006358:	0840      	lsrs	r0, r0, #1
 800635a:	ea4f 0131 	mov.w	r1, r1, rrx
 800635e:	f102 0201 	add.w	r2, r2, #1
 8006362:	2afe      	cmp	r2, #254	; 0xfe
 8006364:	d251      	bcs.n	800640a <__addsf3+0x136>
 8006366:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800636a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800636e:	bf08      	it	eq
 8006370:	f020 0001 	biceq.w	r0, r0, #1
 8006374:	ea40 0003 	orr.w	r0, r0, r3
 8006378:	4770      	bx	lr
 800637a:	0049      	lsls	r1, r1, #1
 800637c:	eb40 0000 	adc.w	r0, r0, r0
 8006380:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8006384:	f1a2 0201 	sub.w	r2, r2, #1
 8006388:	d1ed      	bne.n	8006366 <__addsf3+0x92>
 800638a:	fab0 fc80 	clz	ip, r0
 800638e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006392:	ebb2 020c 	subs.w	r2, r2, ip
 8006396:	fa00 f00c 	lsl.w	r0, r0, ip
 800639a:	bfaa      	itet	ge
 800639c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80063a0:	4252      	neglt	r2, r2
 80063a2:	4318      	orrge	r0, r3
 80063a4:	bfbc      	itt	lt
 80063a6:	40d0      	lsrlt	r0, r2
 80063a8:	4318      	orrlt	r0, r3
 80063aa:	4770      	bx	lr
 80063ac:	f092 0f00 	teq	r2, #0
 80063b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80063b4:	bf06      	itte	eq
 80063b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80063ba:	3201      	addeq	r2, #1
 80063bc:	3b01      	subne	r3, #1
 80063be:	e7b5      	b.n	800632c <__addsf3+0x58>
 80063c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80063c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80063c8:	bf18      	it	ne
 80063ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80063ce:	d021      	beq.n	8006414 <__addsf3+0x140>
 80063d0:	ea92 0f03 	teq	r2, r3
 80063d4:	d004      	beq.n	80063e0 <__addsf3+0x10c>
 80063d6:	f092 0f00 	teq	r2, #0
 80063da:	bf08      	it	eq
 80063dc:	4608      	moveq	r0, r1
 80063de:	4770      	bx	lr
 80063e0:	ea90 0f01 	teq	r0, r1
 80063e4:	bf1c      	itt	ne
 80063e6:	2000      	movne	r0, #0
 80063e8:	4770      	bxne	lr
 80063ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80063ee:	d104      	bne.n	80063fa <__addsf3+0x126>
 80063f0:	0040      	lsls	r0, r0, #1
 80063f2:	bf28      	it	cs
 80063f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80063f8:	4770      	bx	lr
 80063fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80063fe:	bf3c      	itt	cc
 8006400:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006404:	4770      	bxcc	lr
 8006406:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800640a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800640e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006412:	4770      	bx	lr
 8006414:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006418:	bf16      	itet	ne
 800641a:	4608      	movne	r0, r1
 800641c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006420:	4601      	movne	r1, r0
 8006422:	0242      	lsls	r2, r0, #9
 8006424:	bf06      	itte	eq
 8006426:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800642a:	ea90 0f01 	teqeq	r0, r1
 800642e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006432:	4770      	bx	lr

08006434 <__aeabi_ui2f>:
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e004      	b.n	8006444 <__aeabi_i2f+0x8>
 800643a:	bf00      	nop

0800643c <__aeabi_i2f>:
 800643c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006440:	bf48      	it	mi
 8006442:	4240      	negmi	r0, r0
 8006444:	ea5f 0c00 	movs.w	ip, r0
 8006448:	bf08      	it	eq
 800644a:	4770      	bxeq	lr
 800644c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006450:	4601      	mov	r1, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	e01c      	b.n	8006492 <__aeabi_l2f+0x2a>

08006458 <__aeabi_ul2f>:
 8006458:	ea50 0201 	orrs.w	r2, r0, r1
 800645c:	bf08      	it	eq
 800645e:	4770      	bxeq	lr
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e00a      	b.n	800647c <__aeabi_l2f+0x14>
 8006466:	bf00      	nop

08006468 <__aeabi_l2f>:
 8006468:	ea50 0201 	orrs.w	r2, r0, r1
 800646c:	bf08      	it	eq
 800646e:	4770      	bxeq	lr
 8006470:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8006474:	d502      	bpl.n	800647c <__aeabi_l2f+0x14>
 8006476:	4240      	negs	r0, r0
 8006478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800647c:	ea5f 0c01 	movs.w	ip, r1
 8006480:	bf02      	ittt	eq
 8006482:	4684      	moveq	ip, r0
 8006484:	4601      	moveq	r1, r0
 8006486:	2000      	moveq	r0, #0
 8006488:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800648c:	bf08      	it	eq
 800648e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006492:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006496:	fabc f28c 	clz	r2, ip
 800649a:	3a08      	subs	r2, #8
 800649c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80064a0:	db10      	blt.n	80064c4 <__aeabi_l2f+0x5c>
 80064a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80064a6:	4463      	add	r3, ip
 80064a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80064ac:	f1c2 0220 	rsb	r2, r2, #32
 80064b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80064b4:	fa20 f202 	lsr.w	r2, r0, r2
 80064b8:	eb43 0002 	adc.w	r0, r3, r2
 80064bc:	bf08      	it	eq
 80064be:	f020 0001 	biceq.w	r0, r0, #1
 80064c2:	4770      	bx	lr
 80064c4:	f102 0220 	add.w	r2, r2, #32
 80064c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80064cc:	f1c2 0220 	rsb	r2, r2, #32
 80064d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80064d4:	fa21 f202 	lsr.w	r2, r1, r2
 80064d8:	eb43 0002 	adc.w	r0, r3, r2
 80064dc:	bf08      	it	eq
 80064de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80064e2:	4770      	bx	lr

080064e4 <__aeabi_uldivmod>:
 80064e4:	b953      	cbnz	r3, 80064fc <__aeabi_uldivmod+0x18>
 80064e6:	b94a      	cbnz	r2, 80064fc <__aeabi_uldivmod+0x18>
 80064e8:	2900      	cmp	r1, #0
 80064ea:	bf08      	it	eq
 80064ec:	2800      	cmpeq	r0, #0
 80064ee:	bf1c      	itt	ne
 80064f0:	f04f 31ff 	movne.w	r1, #4294967295
 80064f4:	f04f 30ff 	movne.w	r0, #4294967295
 80064f8:	f000 b972 	b.w	80067e0 <__aeabi_idiv0>
 80064fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8006500:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006504:	f000 f806 	bl	8006514 <__udivmoddi4>
 8006508:	f8dd e004 	ldr.w	lr, [sp, #4]
 800650c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006510:	b004      	add	sp, #16
 8006512:	4770      	bx	lr

08006514 <__udivmoddi4>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	9e08      	ldr	r6, [sp, #32]
 800651a:	4604      	mov	r4, r0
 800651c:	4688      	mov	r8, r1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d14b      	bne.n	80065ba <__udivmoddi4+0xa6>
 8006522:	428a      	cmp	r2, r1
 8006524:	4615      	mov	r5, r2
 8006526:	d967      	bls.n	80065f8 <__udivmoddi4+0xe4>
 8006528:	fab2 f282 	clz	r2, r2
 800652c:	b14a      	cbz	r2, 8006542 <__udivmoddi4+0x2e>
 800652e:	f1c2 0720 	rsb	r7, r2, #32
 8006532:	fa01 f302 	lsl.w	r3, r1, r2
 8006536:	fa20 f707 	lsr.w	r7, r0, r7
 800653a:	4095      	lsls	r5, r2
 800653c:	ea47 0803 	orr.w	r8, r7, r3
 8006540:	4094      	lsls	r4, r2
 8006542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006546:	0c23      	lsrs	r3, r4, #16
 8006548:	fbb8 f7fe 	udiv	r7, r8, lr
 800654c:	fa1f fc85 	uxth.w	ip, r5
 8006550:	fb0e 8817 	mls	r8, lr, r7, r8
 8006554:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006558:	fb07 f10c 	mul.w	r1, r7, ip
 800655c:	4299      	cmp	r1, r3
 800655e:	d909      	bls.n	8006574 <__udivmoddi4+0x60>
 8006560:	18eb      	adds	r3, r5, r3
 8006562:	f107 30ff 	add.w	r0, r7, #4294967295
 8006566:	f080 811b 	bcs.w	80067a0 <__udivmoddi4+0x28c>
 800656a:	4299      	cmp	r1, r3
 800656c:	f240 8118 	bls.w	80067a0 <__udivmoddi4+0x28c>
 8006570:	3f02      	subs	r7, #2
 8006572:	442b      	add	r3, r5
 8006574:	1a5b      	subs	r3, r3, r1
 8006576:	b2a4      	uxth	r4, r4
 8006578:	fbb3 f0fe 	udiv	r0, r3, lr
 800657c:	fb0e 3310 	mls	r3, lr, r0, r3
 8006580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006584:	fb00 fc0c 	mul.w	ip, r0, ip
 8006588:	45a4      	cmp	ip, r4
 800658a:	d909      	bls.n	80065a0 <__udivmoddi4+0x8c>
 800658c:	192c      	adds	r4, r5, r4
 800658e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006592:	f080 8107 	bcs.w	80067a4 <__udivmoddi4+0x290>
 8006596:	45a4      	cmp	ip, r4
 8006598:	f240 8104 	bls.w	80067a4 <__udivmoddi4+0x290>
 800659c:	3802      	subs	r0, #2
 800659e:	442c      	add	r4, r5
 80065a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80065a4:	eba4 040c 	sub.w	r4, r4, ip
 80065a8:	2700      	movs	r7, #0
 80065aa:	b11e      	cbz	r6, 80065b4 <__udivmoddi4+0xa0>
 80065ac:	40d4      	lsrs	r4, r2
 80065ae:	2300      	movs	r3, #0
 80065b0:	e9c6 4300 	strd	r4, r3, [r6]
 80065b4:	4639      	mov	r1, r7
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d909      	bls.n	80065d2 <__udivmoddi4+0xbe>
 80065be:	2e00      	cmp	r6, #0
 80065c0:	f000 80eb 	beq.w	800679a <__udivmoddi4+0x286>
 80065c4:	2700      	movs	r7, #0
 80065c6:	e9c6 0100 	strd	r0, r1, [r6]
 80065ca:	4638      	mov	r0, r7
 80065cc:	4639      	mov	r1, r7
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	fab3 f783 	clz	r7, r3
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	d147      	bne.n	800666a <__udivmoddi4+0x156>
 80065da:	428b      	cmp	r3, r1
 80065dc:	d302      	bcc.n	80065e4 <__udivmoddi4+0xd0>
 80065de:	4282      	cmp	r2, r0
 80065e0:	f200 80fa 	bhi.w	80067d8 <__udivmoddi4+0x2c4>
 80065e4:	1a84      	subs	r4, r0, r2
 80065e6:	eb61 0303 	sbc.w	r3, r1, r3
 80065ea:	2001      	movs	r0, #1
 80065ec:	4698      	mov	r8, r3
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d0e0      	beq.n	80065b4 <__udivmoddi4+0xa0>
 80065f2:	e9c6 4800 	strd	r4, r8, [r6]
 80065f6:	e7dd      	b.n	80065b4 <__udivmoddi4+0xa0>
 80065f8:	b902      	cbnz	r2, 80065fc <__udivmoddi4+0xe8>
 80065fa:	deff      	udf	#255	; 0xff
 80065fc:	fab2 f282 	clz	r2, r2
 8006600:	2a00      	cmp	r2, #0
 8006602:	f040 808f 	bne.w	8006724 <__udivmoddi4+0x210>
 8006606:	1b49      	subs	r1, r1, r5
 8006608:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800660c:	fa1f f885 	uxth.w	r8, r5
 8006610:	2701      	movs	r7, #1
 8006612:	fbb1 fcfe 	udiv	ip, r1, lr
 8006616:	0c23      	lsrs	r3, r4, #16
 8006618:	fb0e 111c 	mls	r1, lr, ip, r1
 800661c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006620:	fb08 f10c 	mul.w	r1, r8, ip
 8006624:	4299      	cmp	r1, r3
 8006626:	d907      	bls.n	8006638 <__udivmoddi4+0x124>
 8006628:	18eb      	adds	r3, r5, r3
 800662a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800662e:	d202      	bcs.n	8006636 <__udivmoddi4+0x122>
 8006630:	4299      	cmp	r1, r3
 8006632:	f200 80cd 	bhi.w	80067d0 <__udivmoddi4+0x2bc>
 8006636:	4684      	mov	ip, r0
 8006638:	1a59      	subs	r1, r3, r1
 800663a:	b2a3      	uxth	r3, r4
 800663c:	fbb1 f0fe 	udiv	r0, r1, lr
 8006640:	fb0e 1410 	mls	r4, lr, r0, r1
 8006644:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006648:	fb08 f800 	mul.w	r8, r8, r0
 800664c:	45a0      	cmp	r8, r4
 800664e:	d907      	bls.n	8006660 <__udivmoddi4+0x14c>
 8006650:	192c      	adds	r4, r5, r4
 8006652:	f100 33ff 	add.w	r3, r0, #4294967295
 8006656:	d202      	bcs.n	800665e <__udivmoddi4+0x14a>
 8006658:	45a0      	cmp	r8, r4
 800665a:	f200 80b6 	bhi.w	80067ca <__udivmoddi4+0x2b6>
 800665e:	4618      	mov	r0, r3
 8006660:	eba4 0408 	sub.w	r4, r4, r8
 8006664:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006668:	e79f      	b.n	80065aa <__udivmoddi4+0x96>
 800666a:	f1c7 0c20 	rsb	ip, r7, #32
 800666e:	40bb      	lsls	r3, r7
 8006670:	fa22 fe0c 	lsr.w	lr, r2, ip
 8006674:	ea4e 0e03 	orr.w	lr, lr, r3
 8006678:	fa01 f407 	lsl.w	r4, r1, r7
 800667c:	fa20 f50c 	lsr.w	r5, r0, ip
 8006680:	fa21 f30c 	lsr.w	r3, r1, ip
 8006684:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8006688:	4325      	orrs	r5, r4
 800668a:	fbb3 f9f8 	udiv	r9, r3, r8
 800668e:	0c2c      	lsrs	r4, r5, #16
 8006690:	fb08 3319 	mls	r3, r8, r9, r3
 8006694:	fa1f fa8e 	uxth.w	sl, lr
 8006698:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800669c:	fb09 f40a 	mul.w	r4, r9, sl
 80066a0:	429c      	cmp	r4, r3
 80066a2:	fa02 f207 	lsl.w	r2, r2, r7
 80066a6:	fa00 f107 	lsl.w	r1, r0, r7
 80066aa:	d90b      	bls.n	80066c4 <__udivmoddi4+0x1b0>
 80066ac:	eb1e 0303 	adds.w	r3, lr, r3
 80066b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80066b4:	f080 8087 	bcs.w	80067c6 <__udivmoddi4+0x2b2>
 80066b8:	429c      	cmp	r4, r3
 80066ba:	f240 8084 	bls.w	80067c6 <__udivmoddi4+0x2b2>
 80066be:	f1a9 0902 	sub.w	r9, r9, #2
 80066c2:	4473      	add	r3, lr
 80066c4:	1b1b      	subs	r3, r3, r4
 80066c6:	b2ad      	uxth	r5, r5
 80066c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80066cc:	fb08 3310 	mls	r3, r8, r0, r3
 80066d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80066d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80066d8:	45a2      	cmp	sl, r4
 80066da:	d908      	bls.n	80066ee <__udivmoddi4+0x1da>
 80066dc:	eb1e 0404 	adds.w	r4, lr, r4
 80066e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066e4:	d26b      	bcs.n	80067be <__udivmoddi4+0x2aa>
 80066e6:	45a2      	cmp	sl, r4
 80066e8:	d969      	bls.n	80067be <__udivmoddi4+0x2aa>
 80066ea:	3802      	subs	r0, #2
 80066ec:	4474      	add	r4, lr
 80066ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80066f2:	fba0 8902 	umull	r8, r9, r0, r2
 80066f6:	eba4 040a 	sub.w	r4, r4, sl
 80066fa:	454c      	cmp	r4, r9
 80066fc:	46c2      	mov	sl, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	d354      	bcc.n	80067ac <__udivmoddi4+0x298>
 8006702:	d051      	beq.n	80067a8 <__udivmoddi4+0x294>
 8006704:	2e00      	cmp	r6, #0
 8006706:	d069      	beq.n	80067dc <__udivmoddi4+0x2c8>
 8006708:	ebb1 050a 	subs.w	r5, r1, sl
 800670c:	eb64 0403 	sbc.w	r4, r4, r3
 8006710:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006714:	40fd      	lsrs	r5, r7
 8006716:	40fc      	lsrs	r4, r7
 8006718:	ea4c 0505 	orr.w	r5, ip, r5
 800671c:	e9c6 5400 	strd	r5, r4, [r6]
 8006720:	2700      	movs	r7, #0
 8006722:	e747      	b.n	80065b4 <__udivmoddi4+0xa0>
 8006724:	f1c2 0320 	rsb	r3, r2, #32
 8006728:	fa20 f703 	lsr.w	r7, r0, r3
 800672c:	4095      	lsls	r5, r2
 800672e:	fa01 f002 	lsl.w	r0, r1, r2
 8006732:	fa21 f303 	lsr.w	r3, r1, r3
 8006736:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800673a:	4338      	orrs	r0, r7
 800673c:	0c01      	lsrs	r1, r0, #16
 800673e:	fbb3 f7fe 	udiv	r7, r3, lr
 8006742:	fa1f f885 	uxth.w	r8, r5
 8006746:	fb0e 3317 	mls	r3, lr, r7, r3
 800674a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800674e:	fb07 f308 	mul.w	r3, r7, r8
 8006752:	428b      	cmp	r3, r1
 8006754:	fa04 f402 	lsl.w	r4, r4, r2
 8006758:	d907      	bls.n	800676a <__udivmoddi4+0x256>
 800675a:	1869      	adds	r1, r5, r1
 800675c:	f107 3cff 	add.w	ip, r7, #4294967295
 8006760:	d22f      	bcs.n	80067c2 <__udivmoddi4+0x2ae>
 8006762:	428b      	cmp	r3, r1
 8006764:	d92d      	bls.n	80067c2 <__udivmoddi4+0x2ae>
 8006766:	3f02      	subs	r7, #2
 8006768:	4429      	add	r1, r5
 800676a:	1acb      	subs	r3, r1, r3
 800676c:	b281      	uxth	r1, r0
 800676e:	fbb3 f0fe 	udiv	r0, r3, lr
 8006772:	fb0e 3310 	mls	r3, lr, r0, r3
 8006776:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800677a:	fb00 f308 	mul.w	r3, r0, r8
 800677e:	428b      	cmp	r3, r1
 8006780:	d907      	bls.n	8006792 <__udivmoddi4+0x27e>
 8006782:	1869      	adds	r1, r5, r1
 8006784:	f100 3cff 	add.w	ip, r0, #4294967295
 8006788:	d217      	bcs.n	80067ba <__udivmoddi4+0x2a6>
 800678a:	428b      	cmp	r3, r1
 800678c:	d915      	bls.n	80067ba <__udivmoddi4+0x2a6>
 800678e:	3802      	subs	r0, #2
 8006790:	4429      	add	r1, r5
 8006792:	1ac9      	subs	r1, r1, r3
 8006794:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8006798:	e73b      	b.n	8006612 <__udivmoddi4+0xfe>
 800679a:	4637      	mov	r7, r6
 800679c:	4630      	mov	r0, r6
 800679e:	e709      	b.n	80065b4 <__udivmoddi4+0xa0>
 80067a0:	4607      	mov	r7, r0
 80067a2:	e6e7      	b.n	8006574 <__udivmoddi4+0x60>
 80067a4:	4618      	mov	r0, r3
 80067a6:	e6fb      	b.n	80065a0 <__udivmoddi4+0x8c>
 80067a8:	4541      	cmp	r1, r8
 80067aa:	d2ab      	bcs.n	8006704 <__udivmoddi4+0x1f0>
 80067ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80067b0:	eb69 020e 	sbc.w	r2, r9, lr
 80067b4:	3801      	subs	r0, #1
 80067b6:	4613      	mov	r3, r2
 80067b8:	e7a4      	b.n	8006704 <__udivmoddi4+0x1f0>
 80067ba:	4660      	mov	r0, ip
 80067bc:	e7e9      	b.n	8006792 <__udivmoddi4+0x27e>
 80067be:	4618      	mov	r0, r3
 80067c0:	e795      	b.n	80066ee <__udivmoddi4+0x1da>
 80067c2:	4667      	mov	r7, ip
 80067c4:	e7d1      	b.n	800676a <__udivmoddi4+0x256>
 80067c6:	4681      	mov	r9, r0
 80067c8:	e77c      	b.n	80066c4 <__udivmoddi4+0x1b0>
 80067ca:	3802      	subs	r0, #2
 80067cc:	442c      	add	r4, r5
 80067ce:	e747      	b.n	8006660 <__udivmoddi4+0x14c>
 80067d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80067d4:	442b      	add	r3, r5
 80067d6:	e72f      	b.n	8006638 <__udivmoddi4+0x124>
 80067d8:	4638      	mov	r0, r7
 80067da:	e708      	b.n	80065ee <__udivmoddi4+0xda>
 80067dc:	4637      	mov	r7, r6
 80067de:	e6e9      	b.n	80065b4 <__udivmoddi4+0xa0>

080067e0 <__aeabi_idiv0>:
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80067f2:	f04f 0300 	mov.w	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80067fe:	e04a      	b.n	8006896 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1d1a      	adds	r2, r3, #4
 8006804:	60fa      	str	r2, [r7, #12]
 8006806:	ed93 7a00 	vldr	s14, [r3]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	60ba      	str	r2, [r7, #8]
 8006810:	edd3 7a00 	vldr	s15, [r3]
 8006814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006818:	ed97 7a05 	vldr	s14, [r7, #20]
 800681c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006820:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	60fa      	str	r2, [r7, #12]
 800682a:	ed93 7a00 	vldr	s14, [r3]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	60ba      	str	r2, [r7, #8]
 8006834:	edd3 7a00 	vldr	s15, [r3]
 8006838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006844:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	60fa      	str	r2, [r7, #12]
 800684e:	ed93 7a00 	vldr	s14, [r3]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	1d1a      	adds	r2, r3, #4
 8006856:	60ba      	str	r2, [r7, #8]
 8006858:	edd3 7a00 	vldr	s15, [r3]
 800685c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006860:	ed97 7a05 	vldr	s14, [r7, #20]
 8006864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006868:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	60fa      	str	r2, [r7, #12]
 8006872:	ed93 7a00 	vldr	s14, [r3]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	60ba      	str	r2, [r7, #8]
 800687c:	edd3 7a00 	vldr	s15, [r3]
 8006880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006884:	ed97 7a05 	vldr	s14, [r7, #20]
 8006888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800688c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3b01      	subs	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1b1      	bne.n	8006800 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80068a4:	e014      	b.n	80068d0 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	ed93 7a00 	vldr	s14, [r3]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	1d1a      	adds	r2, r3, #4
 80068b4:	60ba      	str	r2, [r7, #8]
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	ed97 7a05 	vldr	s14, [r7, #20]
 80068c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068c6:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e7      	bne.n	80068a6 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	601a      	str	r2, [r3, #0]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	817b      	strh	r3, [r7, #10]
 80068f6:	4613      	mov	r3, r2
 80068f8:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	897a      	ldrh	r2, [r7, #10]
 80068fe:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	893a      	ldrh	r2, [r7, #8]
 8006904:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_Init+0x34>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0a      	ldr	r2, [pc, #40]	; (800694c <HAL_Init+0x34>)
 8006922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006926:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <HAL_Init+0x34>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a07      	ldr	r2, [pc, #28]	; (800694c <HAL_Init+0x34>)
 800692e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006934:	2003      	movs	r0, #3
 8006936:	f000 f953 	bl	8006be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800693a:	2000      	movs	r0, #0
 800693c:	f000 f808 	bl	8006950 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006940:	f008 fc2e 	bl	800f1a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40023c00 	.word	0x40023c00

08006950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_InitTick+0x54>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_InitTick+0x58>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4619      	mov	r1, r3
 8006962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006966:	fbb3 f3f1 	udiv	r3, r3, r1
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f95d 	bl	8006c2e <HAL_SYSTICK_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e00e      	b.n	800699c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d80a      	bhi.n	800699a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006984:	2200      	movs	r2, #0
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	f000 f933 	bl	8006bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006990:	4a06      	ldr	r2, [pc, #24]	; (80069ac <HAL_InitTick+0x5c>)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000710 	.word	0x20000710
 80069a8:	2000000c 	.word	0x2000000c
 80069ac:	20000008 	.word	0x20000008

080069b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_IncTick+0x20>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <HAL_IncTick+0x24>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4413      	add	r3, r2
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <HAL_IncTick+0x24>)
 80069c2:	6013      	str	r3, [r2, #0]
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	2000000c 	.word	0x2000000c
 80069d4:	20006fa8 	.word	0x20006fa8

080069d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  return uwTick;
 80069dc:	4b03      	ldr	r3, [pc, #12]	; (80069ec <HAL_GetTick+0x14>)
 80069de:	681b      	ldr	r3, [r3, #0]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20006fa8 	.word	0x20006fa8

080069f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069f8:	f7ff ffee 	bl	80069d8 <HAL_GetTick>
 80069fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d005      	beq.n	8006a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <HAL_Delay+0x40>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a16:	bf00      	nop
 8006a18:	f7ff ffde 	bl	80069d8 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d8f7      	bhi.n	8006a18 <HAL_Delay+0x28>
  {
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2000000c 	.word	0x2000000c

08006a34 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8006a38:	4b02      	ldr	r3, [pc, #8]	; (8006a44 <HAL_GetHalVersion+0x10>)
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	01020700 	.word	0x01020700

08006a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_GetREVID+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	0c1b      	lsrs	r3, r3, #16
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	e0042000 	.word	0xe0042000

08006a60 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <HAL_GetDEVID+0x18>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e0042000 	.word	0xe0042000

08006a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <__NVIC_SetPriorityGrouping+0x40>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006aaa:	4a04      	ldr	r2, [pc, #16]	; (8006abc <__NVIC_SetPriorityGrouping+0x40>)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	60d3      	str	r3, [r2, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	e000ed00 	.word	0xe000ed00
 8006ac0:	05fa0000 	.word	0x05fa0000

08006ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <__NVIC_GetPriorityGrouping+0x18>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	f003 0307 	and.w	r3, r3, #7
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	e000ed00 	.word	0xe000ed00

08006ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	db0a      	blt.n	8006b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	490c      	ldr	r1, [pc, #48]	; (8006b2c <__NVIC_SetPriority+0x4c>)
 8006afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afe:	0112      	lsls	r2, r2, #4
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	440b      	add	r3, r1
 8006b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b08:	e00a      	b.n	8006b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4908      	ldr	r1, [pc, #32]	; (8006b30 <__NVIC_SetPriority+0x50>)
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	3b04      	subs	r3, #4
 8006b18:	0112      	lsls	r2, r2, #4
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	761a      	strb	r2, [r3, #24]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	e000e100 	.word	0xe000e100
 8006b30:	e000ed00 	.word	0xe000ed00

08006b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	; 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f1c3 0307 	rsb	r3, r3, #7
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	bf28      	it	cs
 8006b52:	2304      	movcs	r3, #4
 8006b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d902      	bls.n	8006b64 <NVIC_EncodePriority+0x30>
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3b03      	subs	r3, #3
 8006b62:	e000      	b.n	8006b66 <NVIC_EncodePriority+0x32>
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b68:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43da      	mvns	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	401a      	ands	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	fa01 f303 	lsl.w	r3, r1, r3
 8006b86:	43d9      	mvns	r1, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b8c:	4313      	orrs	r3, r2
         );
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3724      	adds	r7, #36	; 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bac:	d301      	bcc.n	8006bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e00f      	b.n	8006bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <SysTick_Config+0x40>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bba:	210f      	movs	r1, #15
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	f7ff ff8e 	bl	8006ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <SysTick_Config+0x40>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <SysTick_Config+0x40>)
 8006bcc:	2207      	movs	r2, #7
 8006bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	e000e010 	.word	0xe000e010

08006be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff47 	bl	8006a7c <__NVIC_SetPriorityGrouping>
}
 8006bee:	bf00      	nop
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c08:	f7ff ff5c 	bl	8006ac4 <__NVIC_GetPriorityGrouping>
 8006c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	6978      	ldr	r0, [r7, #20]
 8006c14:	f7ff ff8e 	bl	8006b34 <NVIC_EncodePriority>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff5d 	bl	8006ae0 <__NVIC_SetPriority>
}
 8006c26:	bf00      	nop
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff ffb0 	bl	8006b9c <SysTick_Config>
 8006c3c:	4603      	mov	r3, r0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e054      	b.n	8006d04 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7f5b      	ldrb	r3, [r3, #29]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f008 fabc 	bl	800f1e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10c      	bne.n	8006c98 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <HAL_CRC_Init+0xc4>)
 8006c84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0218 	bic.w	r2, r2, #24
 8006c94:	609a      	str	r2, [r3, #8]
 8006c96:	e00c      	b.n	8006cb2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6899      	ldr	r1, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f834 	bl	8006d10 <HAL_CRCEx_Polynomial_Set>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e028      	b.n	8006d04 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	795b      	ldrb	r3, [r3, #5]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	611a      	str	r2, [r3, #16]
 8006cc4:	e004      	b.n	8006cd0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6912      	ldr	r2, [r2, #16]
 8006cce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	04c11db7 	.word	0x04c11db7

08006d10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006d20:	231f      	movs	r3, #31
 8006d22:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006d24:	bf00      	nop
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1e5a      	subs	r2, r3, #1
 8006d2a:	613a      	str	r2, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_CRCEx_Polynomial_Set+0x34>
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f0      	beq.n	8006d26 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b18      	cmp	r3, #24
 8006d48:	d846      	bhi.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006ddf 	.word	0x08006ddf
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006dd9 	.word	0x08006dd9
 8006d5c:	08006dd9 	.word	0x08006dd9
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006dd9 	.word	0x08006dd9
 8006d68:	08006dd9 	.word	0x08006dd9
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006dcd 	.word	0x08006dcd
 8006d74:	08006dd9 	.word	0x08006dd9
 8006d78:	08006dd9 	.word	0x08006dd9
 8006d7c:	08006dd9 	.word	0x08006dd9
 8006d80:	08006dd9 	.word	0x08006dd9
 8006d84:	08006dd9 	.word	0x08006dd9
 8006d88:	08006dd9 	.word	0x08006dd9
 8006d8c:	08006dd9 	.word	0x08006dd9
 8006d90:	08006dc1 	.word	0x08006dc1
 8006d94:	08006dd9 	.word	0x08006dd9
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006dd9 	.word	0x08006dd9
 8006da0:	08006dd9 	.word	0x08006dd9
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006dd9 	.word	0x08006dd9
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006db5 	.word	0x08006db5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d913      	bls.n	8006de2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006dbe:	e010      	b.n	8006de2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b07      	cmp	r3, #7
 8006dc4:	d90f      	bls.n	8006de6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006dca:	e00c      	b.n	8006de6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b0f      	cmp	r3, #15
 8006dd0:	d90b      	bls.n	8006dea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006dd6:	e008      	b.n	8006dea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
      break;
 8006ddc:	e006      	b.n	8006dec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006dde:	bf00      	nop
 8006de0:	e004      	b.n	8006dec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006de2:	bf00      	nop
 8006de4:	e002      	b.n	8006dec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006dea:	bf00      	nop
  }
  if (status == HAL_OK)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10d      	bne.n	8006e0e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 0118 	bic.w	r1, r3, #24
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e175      	b.n	8007128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	f040 8164 	bne.w	8007122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d003      	beq.n	8006e6a <HAL_GPIO_Init+0x4e>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b12      	cmp	r3, #18
 8006e68:	d123      	bne.n	8006eb2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	08da      	lsrs	r2, r3, #3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3208      	adds	r2, #8
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	220f      	movs	r2, #15
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43db      	mvns	r3, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	08da      	lsrs	r2, r3, #3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3208      	adds	r2, #8
 8006eac:	69b9      	ldr	r1, [r7, #24]
 8006eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f003 0203 	and.w	r2, r3, #3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d00b      	beq.n	8006f06 <HAL_GPIO_Init+0xea>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d007      	beq.n	8006f06 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006efa:	2b11      	cmp	r3, #17
 8006efc:	d003      	beq.n	8006f06 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b12      	cmp	r3, #18
 8006f04:	d130      	bne.n	8006f68 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	2203      	movs	r2, #3
 8006f12:	fa02 f303 	lsl.w	r3, r2, r3
 8006f16:	43db      	mvns	r3, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	43db      	mvns	r3, r3
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	f003 0201 	and.w	r2, r3, #1
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	2203      	movs	r2, #3
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80be 	beq.w	8007122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fa6:	4b65      	ldr	r3, [pc, #404]	; (800713c <HAL_GPIO_Init+0x320>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	4a64      	ldr	r2, [pc, #400]	; (800713c <HAL_GPIO_Init+0x320>)
 8006fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb2:	4b62      	ldr	r3, [pc, #392]	; (800713c <HAL_GPIO_Init+0x320>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fbe:	4a60      	ldr	r2, [pc, #384]	; (8007140 <HAL_GPIO_Init+0x324>)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	220f      	movs	r2, #15
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a57      	ldr	r2, [pc, #348]	; (8007144 <HAL_GPIO_Init+0x328>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d037      	beq.n	800705a <HAL_GPIO_Init+0x23e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a56      	ldr	r2, [pc, #344]	; (8007148 <HAL_GPIO_Init+0x32c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d031      	beq.n	8007056 <HAL_GPIO_Init+0x23a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_GPIO_Init+0x330>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02b      	beq.n	8007052 <HAL_GPIO_Init+0x236>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a54      	ldr	r2, [pc, #336]	; (8007150 <HAL_GPIO_Init+0x334>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d025      	beq.n	800704e <HAL_GPIO_Init+0x232>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a53      	ldr	r2, [pc, #332]	; (8007154 <HAL_GPIO_Init+0x338>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01f      	beq.n	800704a <HAL_GPIO_Init+0x22e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a52      	ldr	r2, [pc, #328]	; (8007158 <HAL_GPIO_Init+0x33c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d019      	beq.n	8007046 <HAL_GPIO_Init+0x22a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a51      	ldr	r2, [pc, #324]	; (800715c <HAL_GPIO_Init+0x340>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_GPIO_Init+0x226>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a50      	ldr	r2, [pc, #320]	; (8007160 <HAL_GPIO_Init+0x344>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00d      	beq.n	800703e <HAL_GPIO_Init+0x222>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a4f      	ldr	r2, [pc, #316]	; (8007164 <HAL_GPIO_Init+0x348>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d007      	beq.n	800703a <HAL_GPIO_Init+0x21e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a4e      	ldr	r2, [pc, #312]	; (8007168 <HAL_GPIO_Init+0x34c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_GPIO_Init+0x21a>
 8007032:	2309      	movs	r3, #9
 8007034:	e012      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007036:	230a      	movs	r3, #10
 8007038:	e010      	b.n	800705c <HAL_GPIO_Init+0x240>
 800703a:	2308      	movs	r3, #8
 800703c:	e00e      	b.n	800705c <HAL_GPIO_Init+0x240>
 800703e:	2307      	movs	r3, #7
 8007040:	e00c      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007042:	2306      	movs	r3, #6
 8007044:	e00a      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007046:	2305      	movs	r3, #5
 8007048:	e008      	b.n	800705c <HAL_GPIO_Init+0x240>
 800704a:	2304      	movs	r3, #4
 800704c:	e006      	b.n	800705c <HAL_GPIO_Init+0x240>
 800704e:	2303      	movs	r3, #3
 8007050:	e004      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007052:	2302      	movs	r3, #2
 8007054:	e002      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <HAL_GPIO_Init+0x240>
 800705a:	2300      	movs	r3, #0
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f002 0203 	and.w	r2, r2, #3
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	4093      	lsls	r3, r2
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	4313      	orrs	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800706c:	4934      	ldr	r1, [pc, #208]	; (8007140 <HAL_GPIO_Init+0x324>)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	089b      	lsrs	r3, r3, #2
 8007072:	3302      	adds	r3, #2
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800707a:	4b3c      	ldr	r3, [pc, #240]	; (800716c <HAL_GPIO_Init+0x350>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	43db      	mvns	r3, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4013      	ands	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800709e:	4a33      	ldr	r2, [pc, #204]	; (800716c <HAL_GPIO_Init+0x350>)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070a4:	4b31      	ldr	r3, [pc, #196]	; (800716c <HAL_GPIO_Init+0x350>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070c8:	4a28      	ldr	r2, [pc, #160]	; (800716c <HAL_GPIO_Init+0x350>)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <HAL_GPIO_Init+0x350>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <HAL_GPIO_Init+0x350>)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	; (800716c <HAL_GPIO_Init+0x350>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800711c:	4a13      	ldr	r2, [pc, #76]	; (800716c <HAL_GPIO_Init+0x350>)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	f67f ae86 	bls.w	8006e3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007130:	bf00      	nop
 8007132:	3724      	adds	r7, #36	; 0x24
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40023800 	.word	0x40023800
 8007140:	40013800 	.word	0x40013800
 8007144:	40020000 	.word	0x40020000
 8007148:	40020400 	.word	0x40020400
 800714c:	40020800 	.word	0x40020800
 8007150:	40020c00 	.word	0x40020c00
 8007154:	40021000 	.word	0x40021000
 8007158:	40021400 	.word	0x40021400
 800715c:	40021800 	.word	0x40021800
 8007160:	40021c00 	.word	0x40021c00
 8007164:	40022000 	.word	0x40022000
 8007168:	40022400 	.word	0x40022400
 800716c:	40013c00 	.word	0x40013c00

08007170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e07f      	b.n	8007282 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f008 f846 	bl	800f228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2224      	movs	r2, #36	; 0x24
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0201 	bic.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d107      	bne.n	80071ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	e006      	b.n	80071f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d104      	bne.n	800720a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6859      	ldr	r1, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <HAL_I2C_Init+0x11c>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	ea42 0103 	orr.w	r1, r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69d9      	ldr	r1, [r3, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1a      	ldr	r2, [r3, #32]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	02008000 	.word	0x02008000

08007290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	461a      	mov	r2, r3
 800729c:	460b      	mov	r3, r1
 800729e:	817b      	strh	r3, [r7, #10]
 80072a0:	4613      	mov	r3, r2
 80072a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	f040 80da 	bne.w	8007466 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_I2C_Master_Transmit+0x30>
 80072bc:	2302      	movs	r3, #2
 80072be:	e0d3      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072c8:	f7ff fb86 	bl	80069d8 <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2319      	movs	r3, #25
 80072d4:	2201      	movs	r2, #1
 80072d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f9e6 	bl	80076ac <I2C_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e0be      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2221      	movs	r2, #33	; 0x21
 80072ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2210      	movs	r2, #16
 80072f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	893a      	ldrh	r2, [r7, #8]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007316:	b29b      	uxth	r3, r3
 8007318:	2bff      	cmp	r3, #255	; 0xff
 800731a:	d90e      	bls.n	800733a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	22ff      	movs	r2, #255	; 0xff
 8007320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007326:	b2da      	uxtb	r2, r3
 8007328:	8979      	ldrh	r1, [r7, #10]
 800732a:	4b51      	ldr	r3, [pc, #324]	; (8007470 <HAL_I2C_Master_Transmit+0x1e0>)
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fb48 	bl	80079c8 <I2C_TransferConfig>
 8007338:	e06c      	b.n	8007414 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007348:	b2da      	uxtb	r2, r3
 800734a:	8979      	ldrh	r1, [r7, #10]
 800734c:	4b48      	ldr	r3, [pc, #288]	; (8007470 <HAL_I2C_Master_Transmit+0x1e0>)
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fb37 	bl	80079c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800735a:	e05b      	b.n	8007414 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	6a39      	ldr	r1, [r7, #32]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f9e3 	bl	800772c <I2C_WaitOnTXISFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e07b      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d034      	beq.n	8007414 <HAL_I2C_Master_Transmit+0x184>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d130      	bne.n	8007414 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f975 	bl	80076ac <I2C_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e04d      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d90e      	bls.n	80073f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	22ff      	movs	r2, #255	; 0xff
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	8979      	ldrh	r1, [r7, #10]
 80073e4:	2300      	movs	r3, #0
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 faeb 	bl	80079c8 <I2C_TransferConfig>
 80073f2:	e00f      	b.n	8007414 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007402:	b2da      	uxtb	r2, r3
 8007404:	8979      	ldrh	r1, [r7, #10]
 8007406:	2300      	movs	r3, #0
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fada 	bl	80079c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d19e      	bne.n	800735c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	6a39      	ldr	r1, [r7, #32]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f9c2 	bl	80077ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e01a      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2220      	movs	r2, #32
 8007438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <HAL_I2C_Master_Transmit+0x1e4>)
 8007446:	400b      	ands	r3, r1
 8007448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	80002000 	.word	0x80002000
 8007474:	fe00e800 	.word	0xfe00e800

08007478 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	461a      	mov	r2, r3
 8007484:	460b      	mov	r3, r1
 8007486:	817b      	strh	r3, [r7, #10]
 8007488:	4613      	mov	r3, r2
 800748a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b20      	cmp	r3, #32
 8007496:	f040 80db 	bne.w	8007650 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_I2C_Master_Receive+0x30>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0d4      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b0:	f7ff fa92 	bl	80069d8 <HAL_GetTick>
 80074b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	2319      	movs	r3, #25
 80074bc:	2201      	movs	r2, #1
 80074be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f8f2 	bl	80076ac <I2C_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e0bf      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2222      	movs	r2, #34	; 0x22
 80074d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2210      	movs	r2, #16
 80074de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	893a      	ldrh	r2, [r7, #8]
 80074f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2bff      	cmp	r3, #255	; 0xff
 8007502:	d90e      	bls.n	8007522 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	22ff      	movs	r2, #255	; 0xff
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750e:	b2da      	uxtb	r2, r3
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	4b52      	ldr	r3, [pc, #328]	; (800765c <HAL_I2C_Master_Receive+0x1e4>)
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fa54 	bl	80079c8 <I2C_TransferConfig>
 8007520:	e06d      	b.n	80075fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007530:	b2da      	uxtb	r2, r3
 8007532:	8979      	ldrh	r1, [r7, #10]
 8007534:	4b49      	ldr	r3, [pc, #292]	; (800765c <HAL_I2C_Master_Receive+0x1e4>)
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fa43 	bl	80079c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007542:	e05c      	b.n	80075fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	6a39      	ldr	r1, [r7, #32]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f96b 	bl	8007824 <I2C_WaitOnRXNEFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e07c      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d034      	beq.n	80075fe <HAL_I2C_Master_Receive+0x186>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d130      	bne.n	80075fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f880 	bl	80076ac <I2C_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e04d      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2bff      	cmp	r3, #255	; 0xff
 80075be:	d90e      	bls.n	80075de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22ff      	movs	r2, #255	; 0xff
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	8979      	ldrh	r1, [r7, #10]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f9f6 	bl	80079c8 <I2C_TransferConfig>
 80075dc:	e00f      	b.n	80075fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	8979      	ldrh	r1, [r7, #10]
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f9e5 	bl	80079c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d19d      	bne.n	8007544 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	6a39      	ldr	r1, [r7, #32]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f8cd 	bl	80077ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e01a      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2220      	movs	r2, #32
 8007622:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <HAL_I2C_Master_Receive+0x1e8>)
 8007630:	400b      	ands	r3, r1
 8007632:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	80002400 	.word	0x80002400
 8007660:	fe00e800 	.word	0xfe00e800

08007664 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b02      	cmp	r3, #2
 8007678:	d103      	bne.n	8007682 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d007      	beq.n	80076a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	619a      	str	r2, [r3, #24]
  }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076bc:	e022      	b.n	8007704 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d01e      	beq.n	8007704 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c6:	f7ff f987 	bl	80069d8 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d302      	bcc.n	80076dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d113      	bne.n	8007704 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e0:	f043 0220 	orr.w	r2, r3, #32
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e00f      	b.n	8007724 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4013      	ands	r3, r2
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	429a      	cmp	r2, r3
 8007712:	bf0c      	ite	eq
 8007714:	2301      	moveq	r3, #1
 8007716:	2300      	movne	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	429a      	cmp	r2, r3
 8007720:	d0cd      	beq.n	80076be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007738:	e02c      	b.n	8007794 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f8dc 	bl	80078fc <I2C_IsAcknowledgeFailed>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e02a      	b.n	80077a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d01e      	beq.n	8007794 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7ff f93f 	bl	80069d8 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d113      	bne.n	8007794 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	f043 0220 	orr.w	r2, r3, #32
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e007      	b.n	80077a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d1cb      	bne.n	800773a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077b8:	e028      	b.n	800780c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f89c 	bl	80078fc <I2C_IsAcknowledgeFailed>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e026      	b.n	800781c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ce:	f7ff f903 	bl	80069d8 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d302      	bcc.n	80077e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d113      	bne.n	800780c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e8:	f043 0220 	orr.w	r2, r3, #32
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e007      	b.n	800781c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	d1cf      	bne.n	80077ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007830:	e055      	b.n	80078de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f860 	bl	80078fc <I2C_IsAcknowledgeFailed>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e053      	b.n	80078ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b20      	cmp	r3, #32
 8007852:	d129      	bne.n	80078a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b04      	cmp	r3, #4
 8007860:	d105      	bne.n	800786e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e03f      	b.n	80078ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2220      	movs	r2, #32
 8007874:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6859      	ldr	r1, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007882:	400b      	ands	r3, r1
 8007884:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e022      	b.n	80078ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a8:	f7ff f896 	bl	80069d8 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d302      	bcc.n	80078be <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	f043 0220 	orr.w	r2, r3, #32
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e007      	b.n	80078ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d1a2      	bne.n	8007832 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	fe00e800 	.word	0xfe00e800

080078fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b10      	cmp	r3, #16
 8007914:	d151      	bne.n	80079ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007916:	e022      	b.n	800795e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d01e      	beq.n	800795e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007920:	f7ff f85a 	bl	80069d8 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <I2C_IsAcknowledgeFailed+0x3a>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d113      	bne.n	800795e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2220      	movs	r2, #32
 8007946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e02e      	b.n	80079bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b20      	cmp	r3, #32
 800796a:	d1d5      	bne.n	8007918 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2210      	movs	r2, #16
 8007972:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2220      	movs	r2, #32
 800797a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fe71 	bl	8007664 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6859      	ldr	r1, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800798e:	400b      	ands	r3, r1
 8007990:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f043 0204 	orr.w	r2, r3, #4
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	fe00e800 	.word	0xfe00e800

080079c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	817b      	strh	r3, [r7, #10]
 80079d6:	4613      	mov	r3, r2
 80079d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	0d5b      	lsrs	r3, r3, #21
 80079e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <I2C_TransferConfig+0x58>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	43db      	mvns	r3, r3
 80079ee:	ea02 0103 	and.w	r1, r2, r3
 80079f2:	897b      	ldrh	r3, [r7, #10]
 80079f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079f8:	7a7b      	ldrb	r3, [r7, #9]
 80079fa:	041b      	lsls	r3, r3, #16
 80079fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	03ff63ff 	.word	0x03ff63ff

08007a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d138      	bne.n	8007aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e032      	b.n	8007aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2224      	movs	r2, #36	; 0x24
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e000      	b.n	8007aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d139      	bne.n	8007b44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e033      	b.n	8007b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2224      	movs	r2, #36	; 0x24
 8007aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0201 	bic.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	e000      	b.n	8007b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
	...

08007b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e25e      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8087 	beq.w	8007c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b78:	4b96      	ldr	r3, [pc, #600]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 030c 	and.w	r3, r3, #12
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d00c      	beq.n	8007b9e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b84:	4b93      	ldr	r3, [pc, #588]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d112      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x62>
 8007b90:	4b90      	ldr	r3, [pc, #576]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b9e:	4b8d      	ldr	r3, [pc, #564]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d06c      	beq.n	8007c84 <HAL_RCC_OscConfig+0x130>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d168      	bne.n	8007c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e238      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bbe:	d106      	bne.n	8007bce <HAL_RCC_OscConfig+0x7a>
 8007bc0:	4b84      	ldr	r3, [pc, #528]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a83      	ldr	r2, [pc, #524]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	e02e      	b.n	8007c2c <HAL_RCC_OscConfig+0xd8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x9c>
 8007bd6:	4b7f      	ldr	r3, [pc, #508]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a7e      	ldr	r2, [pc, #504]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	4b7c      	ldr	r3, [pc, #496]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a7b      	ldr	r2, [pc, #492]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	e01d      	b.n	8007c2c <HAL_RCC_OscConfig+0xd8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bf8:	d10c      	bne.n	8007c14 <HAL_RCC_OscConfig+0xc0>
 8007bfa:	4b76      	ldr	r3, [pc, #472]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a75      	ldr	r2, [pc, #468]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4b73      	ldr	r3, [pc, #460]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a72      	ldr	r2, [pc, #456]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e00b      	b.n	8007c2c <HAL_RCC_OscConfig+0xd8>
 8007c14:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a6e      	ldr	r2, [pc, #440]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b6c      	ldr	r3, [pc, #432]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6b      	ldr	r2, [pc, #428]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d013      	beq.n	8007c5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fe fed0 	bl	80069d8 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c3c:	f7fe fecc 	bl	80069d8 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b64      	cmp	r3, #100	; 0x64
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e1ec      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c4e:	4b61      	ldr	r3, [pc, #388]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0f0      	beq.n	8007c3c <HAL_RCC_OscConfig+0xe8>
 8007c5a:	e014      	b.n	8007c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fe febc 	bl	80069d8 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c64:	f7fe feb8 	bl	80069d8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b64      	cmp	r3, #100	; 0x64
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e1d8      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c76:	4b57      	ldr	r3, [pc, #348]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x110>
 8007c82:	e000      	b.n	8007c86 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d069      	beq.n	8007d66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c92:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 030c 	and.w	r3, r3, #12
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c9e:	4b4d      	ldr	r3, [pc, #308]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 030c 	and.w	r3, r3, #12
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d11c      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x190>
 8007caa:	4b4a      	ldr	r3, [pc, #296]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d116      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cb6:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_RCC_OscConfig+0x17a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d001      	beq.n	8007cce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e1ac      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cce:	4b41      	ldr	r3, [pc, #260]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	493d      	ldr	r1, [pc, #244]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ce2:	e040      	b.n	8007d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d023      	beq.n	8007d34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cec:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a38      	ldr	r2, [pc, #224]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fe fe6e 	bl	80069d8 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d00:	f7fe fe6a 	bl	80069d8 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e18a      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d12:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d1e:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4929      	ldr	r1, [pc, #164]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	600b      	str	r3, [r1, #0]
 8007d32:	e018      	b.n	8007d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d34:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fe fe4a 	bl	80069d8 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d48:	f7fe fe46 	bl	80069d8 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e166      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d038      	beq.n	8007de4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d019      	beq.n	8007dae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d7a:	4b16      	ldr	r3, [pc, #88]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7e:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d86:	f7fe fe27 	bl	80069d8 <HAL_GetTick>
 8007d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d8e:	f7fe fe23 	bl	80069d8 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e143      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCC_OscConfig+0x23a>
 8007dac:	e01a      	b.n	8007de4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dae:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db2:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <HAL_RCC_OscConfig+0x280>)
 8007db4:	f023 0301 	bic.w	r3, r3, #1
 8007db8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dba:	f7fe fe0d 	bl	80069d8 <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc0:	e00a      	b.n	8007dd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc2:	f7fe fe09 	bl	80069d8 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d903      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e129      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
 8007dd4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dd8:	4b95      	ldr	r3, [pc, #596]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1ee      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80a4 	beq.w	8007f3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007df2:	4b8f      	ldr	r3, [pc, #572]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dfe:	4b8c      	ldr	r3, [pc, #560]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	4a8b      	ldr	r2, [pc, #556]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
 8007e0a:	4b89      	ldr	r3, [pc, #548]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e1a:	4b86      	ldr	r3, [pc, #536]	; (8008034 <HAL_RCC_OscConfig+0x4e0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d118      	bne.n	8007e58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e26:	4b83      	ldr	r3, [pc, #524]	; (8008034 <HAL_RCC_OscConfig+0x4e0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a82      	ldr	r2, [pc, #520]	; (8008034 <HAL_RCC_OscConfig+0x4e0>)
 8007e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e32:	f7fe fdd1 	bl	80069d8 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e3a:	f7fe fdcd 	bl	80069d8 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b64      	cmp	r3, #100	; 0x64
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e0ed      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e4c:	4b79      	ldr	r3, [pc, #484]	; (8008034 <HAL_RCC_OscConfig+0x4e0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0f0      	beq.n	8007e3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCC_OscConfig+0x31a>
 8007e60:	4b73      	ldr	r3, [pc, #460]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	4a72      	ldr	r2, [pc, #456]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e6c:	e02d      	b.n	8007eca <HAL_RCC_OscConfig+0x376>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x33c>
 8007e76:	4b6e      	ldr	r3, [pc, #440]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7a:	4a6d      	ldr	r2, [pc, #436]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	6713      	str	r3, [r2, #112]	; 0x70
 8007e82:	4b6b      	ldr	r3, [pc, #428]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e86:	4a6a      	ldr	r2, [pc, #424]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e88:	f023 0304 	bic.w	r3, r3, #4
 8007e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8e:	e01c      	b.n	8007eca <HAL_RCC_OscConfig+0x376>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b05      	cmp	r3, #5
 8007e96:	d10c      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x35e>
 8007e98:	4b65      	ldr	r3, [pc, #404]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9c:	4a64      	ldr	r2, [pc, #400]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007e9e:	f043 0304 	orr.w	r3, r3, #4
 8007ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea4:	4b62      	ldr	r3, [pc, #392]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	4a61      	ldr	r2, [pc, #388]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb0:	e00b      	b.n	8007eca <HAL_RCC_OscConfig+0x376>
 8007eb2:	4b5f      	ldr	r3, [pc, #380]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	4a5e      	ldr	r2, [pc, #376]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebe:	4b5c      	ldr	r3, [pc, #368]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	4a5b      	ldr	r2, [pc, #364]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ec4:	f023 0304 	bic.w	r3, r3, #4
 8007ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d015      	beq.n	8007efe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed2:	f7fe fd81 	bl	80069d8 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed8:	e00a      	b.n	8007ef0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eda:	f7fe fd7d 	bl	80069d8 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e09b      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef0:	4b4f      	ldr	r3, [pc, #316]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0ee      	beq.n	8007eda <HAL_RCC_OscConfig+0x386>
 8007efc:	e014      	b.n	8007f28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efe:	f7fe fd6b 	bl	80069d8 <HAL_GetTick>
 8007f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f04:	e00a      	b.n	8007f1c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f06:	f7fe fd67 	bl	80069d8 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e085      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f1c:	4b44      	ldr	r3, [pc, #272]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1ee      	bne.n	8007f06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f2e:	4b40      	ldr	r3, [pc, #256]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	4a3f      	ldr	r2, [pc, #252]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d071      	beq.n	8008026 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f42:	4b3b      	ldr	r3, [pc, #236]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d069      	beq.n	8008022 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d14b      	bne.n	8007fee <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a35      	ldr	r2, [pc, #212]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f62:	f7fe fd39 	bl	80069d8 <HAL_GetTick>
 8007f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f6a:	f7fe fd35 	bl	80069d8 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e055      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f7c:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f0      	bne.n	8007f6a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	019b      	lsls	r3, r3, #6
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	061b      	lsls	r3, r3, #24
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	071b      	lsls	r3, r3, #28
 8007fb4:	491e      	ldr	r1, [pc, #120]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc6:	f7fe fd07 	bl	80069d8 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fce:	f7fe fd03 	bl	80069d8 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e023      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f0      	beq.n	8007fce <HAL_RCC_OscConfig+0x47a>
 8007fec:	e01b      	b.n	8008026 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fee:	4b10      	ldr	r3, [pc, #64]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8007ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffa:	f7fe fced 	bl	80069d8 <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008000:	e008      	b.n	8008014 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008002:	f7fe fce9 	bl	80069d8 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e009      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <HAL_RCC_OscConfig+0x4dc>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f0      	bne.n	8008002 <HAL_RCC_OscConfig+0x4ae>
 8008020:	e001      	b.n	8008026 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	40007000 	.word	0x40007000

08008038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0ce      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008050:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d910      	bls.n	8008080 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805e:	4b66      	ldr	r3, [pc, #408]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f023 020f 	bic.w	r2, r3, #15
 8008066:	4964      	ldr	r1, [pc, #400]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	4313      	orrs	r3, r2
 800806c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800806e:	4b62      	ldr	r3, [pc, #392]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d001      	beq.n	8008080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0b6      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d020      	beq.n	80080ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008098:	4b58      	ldr	r3, [pc, #352]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	4a57      	ldr	r2, [pc, #348]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800809e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080b0:	4b52      	ldr	r3, [pc, #328]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4a51      	ldr	r2, [pc, #324]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080bc:	4b4f      	ldr	r3, [pc, #316]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	494c      	ldr	r1, [pc, #304]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d040      	beq.n	800815c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d107      	bne.n	80080f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080e2:	4b46      	ldr	r3, [pc, #280]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d115      	bne.n	800811a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e07d      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d107      	bne.n	800810a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080fa:	4b40      	ldr	r3, [pc, #256]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e071      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800810a:	4b3c      	ldr	r3, [pc, #240]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e069      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800811a:	4b38      	ldr	r3, [pc, #224]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f023 0203 	bic.w	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4935      	ldr	r1, [pc, #212]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 8008128:	4313      	orrs	r3, r2
 800812a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812c:	f7fe fc54 	bl	80069d8 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008132:	e00a      	b.n	800814a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008134:	f7fe fc50 	bl	80069d8 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008142:	4293      	cmp	r3, r2
 8008144:	d901      	bls.n	800814a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e051      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800814a:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 020c 	and.w	r2, r3, #12
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	429a      	cmp	r2, r3
 800815a:	d1eb      	bne.n	8008134 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800815c:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d210      	bcs.n	800818c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800816a:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f023 020f 	bic.w	r2, r3, #15
 8008172:	4921      	ldr	r1, [pc, #132]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800817a:	4b1f      	ldr	r3, [pc, #124]	; (80081f8 <HAL_RCC_ClockConfig+0x1c0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e030      	b.n	80081ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008198:	4b18      	ldr	r3, [pc, #96]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4915      	ldr	r1, [pc, #84]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	490d      	ldr	r1, [pc, #52]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081ca:	f000 f81d 	bl	8008208 <HAL_RCC_GetSysClockFreq>
 80081ce:	4601      	mov	r1, r0
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <HAL_RCC_ClockConfig+0x1c4>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	4a09      	ldr	r2, [pc, #36]	; (8008200 <HAL_RCC_ClockConfig+0x1c8>)
 80081dc:	5cd3      	ldrb	r3, [r2, r3]
 80081de:	fa21 f303 	lsr.w	r3, r1, r3
 80081e2:	4a08      	ldr	r2, [pc, #32]	; (8008204 <HAL_RCC_ClockConfig+0x1cc>)
 80081e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80081e6:	2000      	movs	r0, #0
 80081e8:	f7fe fbb2 	bl	8006950 <HAL_InitTick>

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	40023c00 	.word	0x40023c00
 80081fc:	40023800 	.word	0x40023800
 8008200:	080d51dc 	.word	0x080d51dc
 8008204:	20000710 	.word	0x20000710

08008208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	2300      	movs	r3, #0
 8008218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800821e:	4b50      	ldr	r3, [pc, #320]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f003 030c 	and.w	r3, r3, #12
 8008226:	2b04      	cmp	r3, #4
 8008228:	d007      	beq.n	800823a <HAL_RCC_GetSysClockFreq+0x32>
 800822a:	2b08      	cmp	r3, #8
 800822c:	d008      	beq.n	8008240 <HAL_RCC_GetSysClockFreq+0x38>
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 808d 	bne.w	800834e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008234:	4b4b      	ldr	r3, [pc, #300]	; (8008364 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008236:	60bb      	str	r3, [r7, #8]
       break;
 8008238:	e08c      	b.n	8008354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800823a:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <HAL_RCC_GetSysClockFreq+0x160>)
 800823c:	60bb      	str	r3, [r7, #8]
      break;
 800823e:	e089      	b.n	8008354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008240:	4b47      	ldr	r3, [pc, #284]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008248:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800824a:	4b45      	ldr	r3, [pc, #276]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d023      	beq.n	800829e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008256:	4b42      	ldr	r3, [pc, #264]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	099b      	lsrs	r3, r3, #6
 800825c:	f04f 0400 	mov.w	r4, #0
 8008260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	ea03 0501 	and.w	r5, r3, r1
 800826c:	ea04 0602 	and.w	r6, r4, r2
 8008270:	4a3d      	ldr	r2, [pc, #244]	; (8008368 <HAL_RCC_GetSysClockFreq+0x160>)
 8008272:	fb02 f106 	mul.w	r1, r2, r6
 8008276:	2200      	movs	r2, #0
 8008278:	fb02 f205 	mul.w	r2, r2, r5
 800827c:	440a      	add	r2, r1
 800827e:	493a      	ldr	r1, [pc, #232]	; (8008368 <HAL_RCC_GetSysClockFreq+0x160>)
 8008280:	fba5 0101 	umull	r0, r1, r5, r1
 8008284:	1853      	adds	r3, r2, r1
 8008286:	4619      	mov	r1, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f04f 0400 	mov.w	r4, #0
 800828e:	461a      	mov	r2, r3
 8008290:	4623      	mov	r3, r4
 8008292:	f7fe f927 	bl	80064e4 <__aeabi_uldivmod>
 8008296:	4603      	mov	r3, r0
 8008298:	460c      	mov	r4, r1
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e049      	b.n	8008332 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800829e:	4b30      	ldr	r3, [pc, #192]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	099b      	lsrs	r3, r3, #6
 80082a4:	f04f 0400 	mov.w	r4, #0
 80082a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	ea03 0501 	and.w	r5, r3, r1
 80082b4:	ea04 0602 	and.w	r6, r4, r2
 80082b8:	4629      	mov	r1, r5
 80082ba:	4632      	mov	r2, r6
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	f04f 0400 	mov.w	r4, #0
 80082c4:	0154      	lsls	r4, r2, #5
 80082c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082ca:	014b      	lsls	r3, r1, #5
 80082cc:	4619      	mov	r1, r3
 80082ce:	4622      	mov	r2, r4
 80082d0:	1b49      	subs	r1, r1, r5
 80082d2:	eb62 0206 	sbc.w	r2, r2, r6
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	f04f 0400 	mov.w	r4, #0
 80082de:	0194      	lsls	r4, r2, #6
 80082e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082e4:	018b      	lsls	r3, r1, #6
 80082e6:	1a5b      	subs	r3, r3, r1
 80082e8:	eb64 0402 	sbc.w	r4, r4, r2
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	00e2      	lsls	r2, r4, #3
 80082f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082fa:	00d9      	lsls	r1, r3, #3
 80082fc:	460b      	mov	r3, r1
 80082fe:	4614      	mov	r4, r2
 8008300:	195b      	adds	r3, r3, r5
 8008302:	eb44 0406 	adc.w	r4, r4, r6
 8008306:	f04f 0100 	mov.w	r1, #0
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	02a2      	lsls	r2, r4, #10
 8008310:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008314:	0299      	lsls	r1, r3, #10
 8008316:	460b      	mov	r3, r1
 8008318:	4614      	mov	r4, r2
 800831a:	4618      	mov	r0, r3
 800831c:	4621      	mov	r1, r4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f04f 0400 	mov.w	r4, #0
 8008324:	461a      	mov	r2, r3
 8008326:	4623      	mov	r3, r4
 8008328:	f7fe f8dc 	bl	80064e4 <__aeabi_uldivmod>
 800832c:	4603      	mov	r3, r0
 800832e:	460c      	mov	r4, r1
 8008330:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008332:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <HAL_RCC_GetSysClockFreq+0x158>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	3301      	adds	r3, #1
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	fbb2 f3f3 	udiv	r3, r2, r3
 800834a:	60bb      	str	r3, [r7, #8]
      break;
 800834c:	e002      	b.n	8008354 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008350:	60bb      	str	r3, [r7, #8]
      break;
 8008352:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008354:	68bb      	ldr	r3, [r7, #8]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800
 8008364:	00f42400 	.word	0x00f42400
 8008368:	017d7840 	.word	0x017d7840

0800836c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008370:	4b03      	ldr	r3, [pc, #12]	; (8008380 <HAL_RCC_GetHCLKFreq+0x14>)
 8008372:	681b      	ldr	r3, [r3, #0]
}
 8008374:	4618      	mov	r0, r3
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000710 	.word	0x20000710

08008384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008388:	f7ff fff0 	bl	800836c <HAL_RCC_GetHCLKFreq>
 800838c:	4601      	mov	r1, r0
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	0a9b      	lsrs	r3, r3, #10
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	4a03      	ldr	r2, [pc, #12]	; (80083a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800839a:	5cd3      	ldrb	r3, [r2, r3]
 800839c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40023800 	.word	0x40023800
 80083a8:	080d51ec 	.word	0x080d51ec

080083ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083b0:	f7ff ffdc 	bl	800836c <HAL_RCC_GetHCLKFreq>
 80083b4:	4601      	mov	r1, r0
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	0b5b      	lsrs	r3, r3, #13
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	4a03      	ldr	r2, [pc, #12]	; (80083d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083c2:	5cd3      	ldrb	r3, [r2, r3]
 80083c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40023800 	.word	0x40023800
 80083d0:	080d51ec 	.word	0x080d51ec

080083d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d012      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083fc:	4b69      	ldr	r3, [pc, #420]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a68      	ldr	r2, [pc, #416]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008402:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008406:	6093      	str	r3, [r2, #8]
 8008408:	4b66      	ldr	r3, [pc, #408]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	4964      	ldr	r1, [pc, #400]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008412:	4313      	orrs	r3, r2
 8008414:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d017      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800842e:	4b5d      	ldr	r3, [pc, #372]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843c:	4959      	ldr	r1, [pc, #356]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844c:	d101      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800844e:	2301      	movs	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800845a:	2301      	movs	r3, #1
 800845c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d017      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800846a:	4b4e      	ldr	r3, [pc, #312]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	494a      	ldr	r1, [pc, #296]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008488:	d101      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800848a:	2301      	movs	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008496:	2301      	movs	r3, #1
 8008498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 808b 	beq.w	80085ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084b8:	4b3a      	ldr	r3, [pc, #232]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	4a39      	ldr	r2, [pc, #228]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c2:	6413      	str	r3, [r2, #64]	; 0x40
 80084c4:	4b37      	ldr	r3, [pc, #220]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084d0:	4b35      	ldr	r3, [pc, #212]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a34      	ldr	r2, [pc, #208]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084dc:	f7fe fa7c 	bl	80069d8 <HAL_GetTick>
 80084e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e4:	f7fe fa78 	bl	80069d8 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b64      	cmp	r3, #100	; 0x64
 80084f0:	d901      	bls.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e38d      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084f6:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008502:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d035      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	429a      	cmp	r2, r3
 800851e:	d02e      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008520:	4b20      	ldr	r3, [pc, #128]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008528:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800852a:	4b1e      	ldr	r3, [pc, #120]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852e:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008534:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008536:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853a:	4a1a      	ldr	r2, [pc, #104]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008540:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008542:	4a18      	ldr	r2, [pc, #96]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008548:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	d114      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008554:	f7fe fa40 	bl	80069d8 <HAL_GetTick>
 8008558:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855a:	e00a      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800855c:	f7fe fa3c 	bl	80069d8 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	f241 3288 	movw	r2, #5000	; 0x1388
 800856a:	4293      	cmp	r3, r2
 800856c:	d901      	bls.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e34f      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0ee      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800858a:	d111      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800859a:	400b      	ands	r3, r1
 800859c:	4901      	ldr	r1, [pc, #4]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
 80085a2:	e00b      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80085a4:	40023800 	.word	0x40023800
 80085a8:	40007000 	.word	0x40007000
 80085ac:	0ffffcff 	.word	0x0ffffcff
 80085b0:	4bb3      	ldr	r3, [pc, #716]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	4ab2      	ldr	r2, [pc, #712]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085ba:	6093      	str	r3, [r2, #8]
 80085bc:	4bb0      	ldr	r3, [pc, #704]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085c8:	49ad      	ldr	r1, [pc, #692]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0310 	and.w	r3, r3, #16
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085da:	4ba9      	ldr	r3, [pc, #676]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e0:	4aa7      	ldr	r2, [pc, #668]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80085ea:	4ba5      	ldr	r3, [pc, #660]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	49a2      	ldr	r1, [pc, #648]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008608:	4b9d      	ldr	r3, [pc, #628]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800860a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008616:	499a      	ldr	r1, [pc, #616]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800862a:	4b95      	ldr	r3, [pc, #596]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008638:	4991      	ldr	r1, [pc, #580]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800864c:	4b8c      	ldr	r3, [pc, #560]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800864e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800865a:	4989      	ldr	r1, [pc, #548]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800866e:	4b84      	ldr	r3, [pc, #528]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008674:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867c:	4980      	ldr	r1, [pc, #512]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008690:	4b7b      	ldr	r3, [pc, #492]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008696:	f023 0203 	bic.w	r2, r3, #3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	4978      	ldr	r1, [pc, #480]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086b2:	4b73      	ldr	r3, [pc, #460]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b8:	f023 020c 	bic.w	r2, r3, #12
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c0:	496f      	ldr	r1, [pc, #444]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086d4:	4b6a      	ldr	r3, [pc, #424]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	4967      	ldr	r1, [pc, #412]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086f6:	4b62      	ldr	r3, [pc, #392]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008704:	495e      	ldr	r1, [pc, #376]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00a      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008718:	4b59      	ldr	r3, [pc, #356]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800871a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008726:	4956      	ldr	r1, [pc, #344]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008728:	4313      	orrs	r3, r2
 800872a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800873a:	4b51      	ldr	r3, [pc, #324]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800873c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008748:	494d      	ldr	r1, [pc, #308]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800875c:	4b48      	ldr	r3, [pc, #288]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800876a:	4945      	ldr	r1, [pc, #276]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800876c:	4313      	orrs	r3, r2
 800876e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800877e:	4b40      	ldr	r3, [pc, #256]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878c:	493c      	ldr	r1, [pc, #240]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800878e:	4313      	orrs	r3, r2
 8008790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087a0:	4b37      	ldr	r3, [pc, #220]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ae:	4934      	ldr	r1, [pc, #208]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d011      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087c2:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087d0:	492b      	ldr	r1, [pc, #172]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e0:	d101      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087f2:	2301      	movs	r3, #1
 80087f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008802:	4b1f      	ldr	r3, [pc, #124]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008810:	491b      	ldr	r1, [pc, #108]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008824:	4b16      	ldr	r3, [pc, #88]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008834:	4912      	ldr	r1, [pc, #72]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008858:	4909      	ldr	r1, [pc, #36]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00f      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800886c:	4b04      	ldr	r3, [pc, #16]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800886e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008872:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887c:	e002      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800887e:	bf00      	nop
 8008880:	40023800 	.word	0x40023800
 8008884:	4985      	ldr	r1, [pc, #532]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008886:	4313      	orrs	r3, r2
 8008888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008898:	4b80      	ldr	r3, [pc, #512]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800889a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a8:	497c      	ldr	r1, [pc, #496]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d005      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088be:	f040 80d6 	bne.w	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088c2:	4b76      	ldr	r3, [pc, #472]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a75      	ldr	r2, [pc, #468]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ce:	f7fe f883 	bl	80069d8 <HAL_GetTick>
 80088d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088d4:	e008      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088d6:	f7fe f87f 	bl	80069d8 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b64      	cmp	r3, #100	; 0x64
 80088e2:	d901      	bls.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e194      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088e8:	4b6c      	ldr	r3, [pc, #432]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f0      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d021      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	2b00      	cmp	r3, #0
 8008906:	d11d      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008908:	4b64      	ldr	r3, [pc, #400]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800890a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008916:	4b61      	ldr	r3, [pc, #388]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	0e1b      	lsrs	r3, r3, #24
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	019a      	lsls	r2, r3, #6
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	431a      	orrs	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	061b      	lsls	r3, r3, #24
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	071b      	lsls	r3, r3, #28
 800893c:	4957      	ldr	r1, [pc, #348]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008958:	d00a      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008962:	2b00      	cmp	r3, #0
 8008964:	d02e      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800896e:	d129      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008970:	4b4a      	ldr	r3, [pc, #296]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800897e:	4b47      	ldr	r3, [pc, #284]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008984:	0f1b      	lsrs	r3, r3, #28
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	019a      	lsls	r2, r3, #6
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	431a      	orrs	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	071b      	lsls	r3, r3, #28
 80089a4:	493d      	ldr	r1, [pc, #244]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80089ac:	4b3b      	ldr	r3, [pc, #236]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089b2:	f023 021f 	bic.w	r2, r3, #31
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4937      	ldr	r1, [pc, #220]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01d      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80089d0:	4b32      	ldr	r3, [pc, #200]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	0e1b      	lsrs	r3, r3, #24
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089de:	4b2f      	ldr	r3, [pc, #188]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80089e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e4:	0f1b      	lsrs	r3, r3, #28
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	019a      	lsls	r2, r3, #6
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	431a      	orrs	r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	431a      	orrs	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	071b      	lsls	r3, r3, #28
 8008a04:	4925      	ldr	r1, [pc, #148]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d011      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	019a      	lsls	r2, r3, #6
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	061b      	lsls	r3, r3, #24
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	071b      	lsls	r3, r3, #28
 8008a34:	4919      	ldr	r1, [pc, #100]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a3c:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a16      	ldr	r2, [pc, #88]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a48:	f7fd ffc6 	bl	80069d8 <HAL_GetTick>
 8008a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a50:	f7fd ffc2 	bl	80069d8 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b64      	cmp	r3, #100	; 0x64
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e0d7      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a62:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0f0      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f040 80cd 	bne.w	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a82:	f7fd ffa9 	bl	80069d8 <HAL_GetTick>
 8008a86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a88:	e00a      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a8a:	f7fd ffa5 	bl	80069d8 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b64      	cmp	r3, #100	; 0x64
 8008a96:	d903      	bls.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e0ba      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008a9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008aa0:	4b5e      	ldr	r3, [pc, #376]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aac:	d0ed      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d02e      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d12a      	bne.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ad6:	4b51      	ldr	r3, [pc, #324]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ae4:	4b4d      	ldr	r3, [pc, #308]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aea:	0f1b      	lsrs	r3, r3, #28
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	019a      	lsls	r2, r3, #6
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	061b      	lsls	r3, r3, #24
 8008b04:	431a      	orrs	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	4944      	ldr	r1, [pc, #272]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b12:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	3b01      	subs	r3, #1
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	493d      	ldr	r1, [pc, #244]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d022      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b40:	d11d      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b42:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b48:	0e1b      	lsrs	r3, r3, #24
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b50:	4b32      	ldr	r3, [pc, #200]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b56:	0f1b      	lsrs	r3, r3, #28
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	019a      	lsls	r2, r3, #6
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	041b      	lsls	r3, r3, #16
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	061b      	lsls	r3, r3, #24
 8008b70:	431a      	orrs	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	071b      	lsls	r3, r3, #28
 8008b76:	4929      	ldr	r1, [pc, #164]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d028      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b8a:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b90:	0e1b      	lsrs	r3, r3, #24
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	019a      	lsls	r2, r3, #6
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	061b      	lsls	r3, r3, #24
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	071b      	lsls	r3, r3, #28
 8008bbe:	4917      	ldr	r1, [pc, #92]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4911      	ldr	r1, [pc, #68]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0e      	ldr	r2, [pc, #56]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008be8:	f7fd fef6 	bl	80069d8 <HAL_GetTick>
 8008bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bee:	e008      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bf0:	f7fd fef2 	bl	80069d8 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b64      	cmp	r3, #100	; 0x64
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e007      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0e:	d1ef      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	40023800 	.word	0x40023800

08008c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e040      	b.n	8008cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d106      	bne.n	8008c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f006 fb34 	bl	800f2b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f98a 	bl	8008f78 <UART_SetConfig>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d101      	bne.n	8008c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e022      	b.n	8008cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fc22 	bl	80094c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0201 	orr.w	r2, r2, #1
 8008caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fca9 	bl	8009604 <UART_CheckIdleState>
 8008cb2:	4603      	mov	r3, r0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d17f      	bne.n	8008dd4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_UART_Transmit+0x24>
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e078      	b.n	8008dd6 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Transmit+0x36>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e071      	b.n	8008dd6 <HAL_UART_Transmit+0x11a>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2221      	movs	r2, #33	; 0x21
 8008d04:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008d06:	f7fd fe67 	bl	80069d8 <HAL_GetTick>
 8008d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	88fa      	ldrh	r2, [r7, #6]
 8008d18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d24:	d108      	bne.n	8008d38 <HAL_UART_Transmit+0x7c>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d104      	bne.n	8008d38 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	e003      	b.n	8008d40 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d40:	e02c      	b.n	8008d9c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2180      	movs	r1, #128	; 0x80
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fc88 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e03c      	b.n	8008dd6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	3302      	adds	r3, #2
 8008d76:	61bb      	str	r3, [r7, #24]
 8008d78:	e007      	b.n	8008d8a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	3301      	adds	r3, #1
 8008d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1cc      	bne.n	8008d42 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2200      	movs	r2, #0
 8008db0:	2140      	movs	r1, #64	; 0x40
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 fc55 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e009      	b.n	8008dd6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e000      	b.n	8008dd6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008dd4:	2302      	movs	r3, #2
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b08a      	sub	sp, #40	; 0x28
 8008de2:	af02      	add	r7, sp, #8
 8008de4:	60f8      	str	r0, [r7, #12]
 8008de6:	60b9      	str	r1, [r7, #8]
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	f040 80ba 	bne.w	8008f6c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_UART_Receive+0x26>
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e0b2      	b.n	8008f6e <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_UART_Receive+0x38>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e0ab      	b.n	8008f6e <HAL_UART_Receive+0x190>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2222      	movs	r2, #34	; 0x22
 8008e28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e2a:	f7fd fdd5 	bl	80069d8 <HAL_GetTick>
 8008e2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e48:	d10e      	bne.n	8008e68 <HAL_UART_Receive+0x8a>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d105      	bne.n	8008e5e <HAL_UART_Receive+0x80>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e5c:	e02d      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	22ff      	movs	r2, #255	; 0xff
 8008e62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e66:	e028      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10d      	bne.n	8008e8c <HAL_UART_Receive+0xae>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <HAL_UART_Receive+0xa4>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	22ff      	movs	r2, #255	; 0xff
 8008e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e80:	e01b      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	227f      	movs	r2, #127	; 0x7f
 8008e86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e8a:	e016      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e94:	d10d      	bne.n	8008eb2 <HAL_UART_Receive+0xd4>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d104      	bne.n	8008ea8 <HAL_UART_Receive+0xca>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	227f      	movs	r2, #127	; 0x7f
 8008ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ea6:	e008      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	223f      	movs	r2, #63	; 0x3f
 8008eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008eb0:	e003      	b.n	8008eba <HAL_UART_Receive+0xdc>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eca:	d108      	bne.n	8008ede <HAL_UART_Receive+0x100>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	e003      	b.n	8008ee6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008ee6:	e032      	b.n	8008f4e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2120      	movs	r1, #32
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fbb5 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e035      	b.n	8008f6e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10c      	bne.n	8008f22 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	8a7b      	ldrh	r3, [r7, #18]
 8008f12:	4013      	ands	r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	3302      	adds	r3, #2
 8008f1e:	61bb      	str	r3, [r7, #24]
 8008f20:	e00c      	b.n	8008f3c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	8a7b      	ldrh	r3, [r7, #18]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	4013      	ands	r3, r2
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1c6      	bne.n	8008ee8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e000      	b.n	8008f6e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8008f6c:	2302      	movs	r3, #2
  }
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4bb1      	ldr	r3, [pc, #708]	; (800926c <UART_SetConfig+0x2f4>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	6939      	ldr	r1, [r7, #16]
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a9f      	ldr	r2, [pc, #636]	; (8009270 <UART_SetConfig+0x2f8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d121      	bne.n	800903c <UART_SetConfig+0xc4>
 8008ff8:	4b9e      	ldr	r3, [pc, #632]	; (8009274 <UART_SetConfig+0x2fc>)
 8008ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b03      	cmp	r3, #3
 8009004:	d816      	bhi.n	8009034 <UART_SetConfig+0xbc>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x94>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800901d 	.word	0x0800901d
 8009010:	08009029 	.word	0x08009029
 8009014:	08009023 	.word	0x08009023
 8009018:	0800902f 	.word	0x0800902f
 800901c:	2301      	movs	r3, #1
 800901e:	77fb      	strb	r3, [r7, #31]
 8009020:	e151      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009022:	2302      	movs	r3, #2
 8009024:	77fb      	strb	r3, [r7, #31]
 8009026:	e14e      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009028:	2304      	movs	r3, #4
 800902a:	77fb      	strb	r3, [r7, #31]
 800902c:	e14b      	b.n	80092c6 <UART_SetConfig+0x34e>
 800902e:	2308      	movs	r3, #8
 8009030:	77fb      	strb	r3, [r7, #31]
 8009032:	e148      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009034:	2310      	movs	r3, #16
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	bf00      	nop
 800903a:	e144      	b.n	80092c6 <UART_SetConfig+0x34e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a8d      	ldr	r2, [pc, #564]	; (8009278 <UART_SetConfig+0x300>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d134      	bne.n	80090b0 <UART_SetConfig+0x138>
 8009046:	4b8b      	ldr	r3, [pc, #556]	; (8009274 <UART_SetConfig+0x2fc>)
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b0c      	cmp	r3, #12
 8009052:	d829      	bhi.n	80090a8 <UART_SetConfig+0x130>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0xe4>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	08009091 	.word	0x08009091
 8009060:	080090a9 	.word	0x080090a9
 8009064:	080090a9 	.word	0x080090a9
 8009068:	080090a9 	.word	0x080090a9
 800906c:	0800909d 	.word	0x0800909d
 8009070:	080090a9 	.word	0x080090a9
 8009074:	080090a9 	.word	0x080090a9
 8009078:	080090a9 	.word	0x080090a9
 800907c:	08009097 	.word	0x08009097
 8009080:	080090a9 	.word	0x080090a9
 8009084:	080090a9 	.word	0x080090a9
 8009088:	080090a9 	.word	0x080090a9
 800908c:	080090a3 	.word	0x080090a3
 8009090:	2300      	movs	r3, #0
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e117      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009096:	2302      	movs	r3, #2
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e114      	b.n	80092c6 <UART_SetConfig+0x34e>
 800909c:	2304      	movs	r3, #4
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e111      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090a2:	2308      	movs	r3, #8
 80090a4:	77fb      	strb	r3, [r7, #31]
 80090a6:	e10e      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090a8:	2310      	movs	r3, #16
 80090aa:	77fb      	strb	r3, [r7, #31]
 80090ac:	bf00      	nop
 80090ae:	e10a      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a71      	ldr	r2, [pc, #452]	; (800927c <UART_SetConfig+0x304>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d120      	bne.n	80090fc <UART_SetConfig+0x184>
 80090ba:	4b6e      	ldr	r3, [pc, #440]	; (8009274 <UART_SetConfig+0x2fc>)
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d00f      	beq.n	80090e8 <UART_SetConfig+0x170>
 80090c8:	2b10      	cmp	r3, #16
 80090ca:	d802      	bhi.n	80090d2 <UART_SetConfig+0x15a>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <UART_SetConfig+0x164>
 80090d0:	e010      	b.n	80090f4 <UART_SetConfig+0x17c>
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d005      	beq.n	80090e2 <UART_SetConfig+0x16a>
 80090d6:	2b30      	cmp	r3, #48	; 0x30
 80090d8:	d009      	beq.n	80090ee <UART_SetConfig+0x176>
 80090da:	e00b      	b.n	80090f4 <UART_SetConfig+0x17c>
 80090dc:	2300      	movs	r3, #0
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e0f1      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090e2:	2302      	movs	r3, #2
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e0ee      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090e8:	2304      	movs	r3, #4
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	e0eb      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090ee:	2308      	movs	r3, #8
 80090f0:	77fb      	strb	r3, [r7, #31]
 80090f2:	e0e8      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090f4:	2310      	movs	r3, #16
 80090f6:	77fb      	strb	r3, [r7, #31]
 80090f8:	bf00      	nop
 80090fa:	e0e4      	b.n	80092c6 <UART_SetConfig+0x34e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a5f      	ldr	r2, [pc, #380]	; (8009280 <UART_SetConfig+0x308>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d120      	bne.n	8009148 <UART_SetConfig+0x1d0>
 8009106:	4b5b      	ldr	r3, [pc, #364]	; (8009274 <UART_SetConfig+0x2fc>)
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d00f      	beq.n	8009134 <UART_SetConfig+0x1bc>
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d802      	bhi.n	800911e <UART_SetConfig+0x1a6>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <UART_SetConfig+0x1b0>
 800911c:	e010      	b.n	8009140 <UART_SetConfig+0x1c8>
 800911e:	2b80      	cmp	r3, #128	; 0x80
 8009120:	d005      	beq.n	800912e <UART_SetConfig+0x1b6>
 8009122:	2bc0      	cmp	r3, #192	; 0xc0
 8009124:	d009      	beq.n	800913a <UART_SetConfig+0x1c2>
 8009126:	e00b      	b.n	8009140 <UART_SetConfig+0x1c8>
 8009128:	2300      	movs	r3, #0
 800912a:	77fb      	strb	r3, [r7, #31]
 800912c:	e0cb      	b.n	80092c6 <UART_SetConfig+0x34e>
 800912e:	2302      	movs	r3, #2
 8009130:	77fb      	strb	r3, [r7, #31]
 8009132:	e0c8      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009134:	2304      	movs	r3, #4
 8009136:	77fb      	strb	r3, [r7, #31]
 8009138:	e0c5      	b.n	80092c6 <UART_SetConfig+0x34e>
 800913a:	2308      	movs	r3, #8
 800913c:	77fb      	strb	r3, [r7, #31]
 800913e:	e0c2      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009140:	2310      	movs	r3, #16
 8009142:	77fb      	strb	r3, [r7, #31]
 8009144:	bf00      	nop
 8009146:	e0be      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a4d      	ldr	r2, [pc, #308]	; (8009284 <UART_SetConfig+0x30c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d124      	bne.n	800919c <UART_SetConfig+0x224>
 8009152:	4b48      	ldr	r3, [pc, #288]	; (8009274 <UART_SetConfig+0x2fc>)
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800915c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009160:	d012      	beq.n	8009188 <UART_SetConfig+0x210>
 8009162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009166:	d802      	bhi.n	800916e <UART_SetConfig+0x1f6>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <UART_SetConfig+0x204>
 800916c:	e012      	b.n	8009194 <UART_SetConfig+0x21c>
 800916e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009172:	d006      	beq.n	8009182 <UART_SetConfig+0x20a>
 8009174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009178:	d009      	beq.n	800918e <UART_SetConfig+0x216>
 800917a:	e00b      	b.n	8009194 <UART_SetConfig+0x21c>
 800917c:	2300      	movs	r3, #0
 800917e:	77fb      	strb	r3, [r7, #31]
 8009180:	e0a1      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009182:	2302      	movs	r3, #2
 8009184:	77fb      	strb	r3, [r7, #31]
 8009186:	e09e      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009188:	2304      	movs	r3, #4
 800918a:	77fb      	strb	r3, [r7, #31]
 800918c:	e09b      	b.n	80092c6 <UART_SetConfig+0x34e>
 800918e:	2308      	movs	r3, #8
 8009190:	77fb      	strb	r3, [r7, #31]
 8009192:	e098      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009194:	2310      	movs	r3, #16
 8009196:	77fb      	strb	r3, [r7, #31]
 8009198:	bf00      	nop
 800919a:	e094      	b.n	80092c6 <UART_SetConfig+0x34e>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a39      	ldr	r2, [pc, #228]	; (8009288 <UART_SetConfig+0x310>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d124      	bne.n	80091f0 <UART_SetConfig+0x278>
 80091a6:	4b33      	ldr	r3, [pc, #204]	; (8009274 <UART_SetConfig+0x2fc>)
 80091a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b4:	d012      	beq.n	80091dc <UART_SetConfig+0x264>
 80091b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ba:	d802      	bhi.n	80091c2 <UART_SetConfig+0x24a>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d007      	beq.n	80091d0 <UART_SetConfig+0x258>
 80091c0:	e012      	b.n	80091e8 <UART_SetConfig+0x270>
 80091c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091c6:	d006      	beq.n	80091d6 <UART_SetConfig+0x25e>
 80091c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091cc:	d009      	beq.n	80091e2 <UART_SetConfig+0x26a>
 80091ce:	e00b      	b.n	80091e8 <UART_SetConfig+0x270>
 80091d0:	2301      	movs	r3, #1
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e077      	b.n	80092c6 <UART_SetConfig+0x34e>
 80091d6:	2302      	movs	r3, #2
 80091d8:	77fb      	strb	r3, [r7, #31]
 80091da:	e074      	b.n	80092c6 <UART_SetConfig+0x34e>
 80091dc:	2304      	movs	r3, #4
 80091de:	77fb      	strb	r3, [r7, #31]
 80091e0:	e071      	b.n	80092c6 <UART_SetConfig+0x34e>
 80091e2:	2308      	movs	r3, #8
 80091e4:	77fb      	strb	r3, [r7, #31]
 80091e6:	e06e      	b.n	80092c6 <UART_SetConfig+0x34e>
 80091e8:	2310      	movs	r3, #16
 80091ea:	77fb      	strb	r3, [r7, #31]
 80091ec:	bf00      	nop
 80091ee:	e06a      	b.n	80092c6 <UART_SetConfig+0x34e>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a25      	ldr	r2, [pc, #148]	; (800928c <UART_SetConfig+0x314>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d124      	bne.n	8009244 <UART_SetConfig+0x2cc>
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <UART_SetConfig+0x2fc>)
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009208:	d012      	beq.n	8009230 <UART_SetConfig+0x2b8>
 800920a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920e:	d802      	bhi.n	8009216 <UART_SetConfig+0x29e>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <UART_SetConfig+0x2ac>
 8009214:	e012      	b.n	800923c <UART_SetConfig+0x2c4>
 8009216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921a:	d006      	beq.n	800922a <UART_SetConfig+0x2b2>
 800921c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009220:	d009      	beq.n	8009236 <UART_SetConfig+0x2be>
 8009222:	e00b      	b.n	800923c <UART_SetConfig+0x2c4>
 8009224:	2300      	movs	r3, #0
 8009226:	77fb      	strb	r3, [r7, #31]
 8009228:	e04d      	b.n	80092c6 <UART_SetConfig+0x34e>
 800922a:	2302      	movs	r3, #2
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e04a      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009230:	2304      	movs	r3, #4
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e047      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009236:	2308      	movs	r3, #8
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e044      	b.n	80092c6 <UART_SetConfig+0x34e>
 800923c:	2310      	movs	r3, #16
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	bf00      	nop
 8009242:	e040      	b.n	80092c6 <UART_SetConfig+0x34e>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a11      	ldr	r2, [pc, #68]	; (8009290 <UART_SetConfig+0x318>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d139      	bne.n	80092c2 <UART_SetConfig+0x34a>
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <UART_SetConfig+0x2fc>)
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800925c:	d027      	beq.n	80092ae <UART_SetConfig+0x336>
 800925e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009262:	d817      	bhi.n	8009294 <UART_SetConfig+0x31c>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01c      	beq.n	80092a2 <UART_SetConfig+0x32a>
 8009268:	e027      	b.n	80092ba <UART_SetConfig+0x342>
 800926a:	bf00      	nop
 800926c:	efff69f3 	.word	0xefff69f3
 8009270:	40011000 	.word	0x40011000
 8009274:	40023800 	.word	0x40023800
 8009278:	40004400 	.word	0x40004400
 800927c:	40004800 	.word	0x40004800
 8009280:	40004c00 	.word	0x40004c00
 8009284:	40005000 	.word	0x40005000
 8009288:	40011400 	.word	0x40011400
 800928c:	40007800 	.word	0x40007800
 8009290:	40007c00 	.word	0x40007c00
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009298:	d006      	beq.n	80092a8 <UART_SetConfig+0x330>
 800929a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800929e:	d009      	beq.n	80092b4 <UART_SetConfig+0x33c>
 80092a0:	e00b      	b.n	80092ba <UART_SetConfig+0x342>
 80092a2:	2300      	movs	r3, #0
 80092a4:	77fb      	strb	r3, [r7, #31]
 80092a6:	e00e      	b.n	80092c6 <UART_SetConfig+0x34e>
 80092a8:	2302      	movs	r3, #2
 80092aa:	77fb      	strb	r3, [r7, #31]
 80092ac:	e00b      	b.n	80092c6 <UART_SetConfig+0x34e>
 80092ae:	2304      	movs	r3, #4
 80092b0:	77fb      	strb	r3, [r7, #31]
 80092b2:	e008      	b.n	80092c6 <UART_SetConfig+0x34e>
 80092b4:	2308      	movs	r3, #8
 80092b6:	77fb      	strb	r3, [r7, #31]
 80092b8:	e005      	b.n	80092c6 <UART_SetConfig+0x34e>
 80092ba:	2310      	movs	r3, #16
 80092bc:	77fb      	strb	r3, [r7, #31]
 80092be:	bf00      	nop
 80092c0:	e001      	b.n	80092c6 <UART_SetConfig+0x34e>
 80092c2:	2310      	movs	r3, #16
 80092c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ce:	d17c      	bne.n	80093ca <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80092d0:	7ffb      	ldrb	r3, [r7, #31]
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d859      	bhi.n	800938a <UART_SetConfig+0x412>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0x364>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	08009301 	.word	0x08009301
 80092e0:	0800931f 	.word	0x0800931f
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	0800938b 	.word	0x0800938b
 80092ec:	08009355 	.word	0x08009355
 80092f0:	0800938b 	.word	0x0800938b
 80092f4:	0800938b 	.word	0x0800938b
 80092f8:	0800938b 	.word	0x0800938b
 80092fc:	08009373 	.word	0x08009373
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009300:	f7ff f840 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 8009304:	4603      	mov	r3, r0
 8009306:	005a      	lsls	r2, r3, #1
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	441a      	add	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	fbb2 f3f3 	udiv	r3, r2, r3
 8009318:	b29b      	uxth	r3, r3
 800931a:	61bb      	str	r3, [r7, #24]
        break;
 800931c:	e038      	b.n	8009390 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800931e:	f7ff f845 	bl	80083ac <HAL_RCC_GetPCLK2Freq>
 8009322:	4603      	mov	r3, r0
 8009324:	005a      	lsls	r2, r3, #1
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	085b      	lsrs	r3, r3, #1
 800932c:	441a      	add	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	fbb2 f3f3 	udiv	r3, r2, r3
 8009336:	b29b      	uxth	r3, r3
 8009338:	61bb      	str	r3, [r7, #24]
        break;
 800933a:	e029      	b.n	8009390 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	085a      	lsrs	r2, r3, #1
 8009342:	4b5d      	ldr	r3, [pc, #372]	; (80094b8 <UART_SetConfig+0x540>)
 8009344:	4413      	add	r3, r2
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6852      	ldr	r2, [r2, #4]
 800934a:	fbb3 f3f2 	udiv	r3, r3, r2
 800934e:	b29b      	uxth	r3, r3
 8009350:	61bb      	str	r3, [r7, #24]
        break;
 8009352:	e01d      	b.n	8009390 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009354:	f7fe ff58 	bl	8008208 <HAL_RCC_GetSysClockFreq>
 8009358:	4603      	mov	r3, r0
 800935a:	005a      	lsls	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	441a      	add	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	b29b      	uxth	r3, r3
 800936e:	61bb      	str	r3, [r7, #24]
        break;
 8009370:	e00e      	b.n	8009390 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	fbb2 f3f3 	udiv	r3, r2, r3
 8009384:	b29b      	uxth	r3, r3
 8009386:	61bb      	str	r3, [r7, #24]
        break;
 8009388:	e002      	b.n	8009390 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
        break;
 800938e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	2b0f      	cmp	r3, #15
 8009394:	d916      	bls.n	80093c4 <UART_SetConfig+0x44c>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939c:	d212      	bcs.n	80093c4 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	f023 030f 	bic.w	r3, r3, #15
 80093a6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	89fa      	ldrh	r2, [r7, #14]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	e06e      	b.n	80094a2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	e06b      	b.n	80094a2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d857      	bhi.n	8009480 <UART_SetConfig+0x508>
 80093d0:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <UART_SetConfig+0x460>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	080093fd 	.word	0x080093fd
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009435 	.word	0x08009435
 80093e4:	08009481 	.word	0x08009481
 80093e8:	0800944d 	.word	0x0800944d
 80093ec:	08009481 	.word	0x08009481
 80093f0:	08009481 	.word	0x08009481
 80093f4:	08009481 	.word	0x08009481
 80093f8:	08009469 	.word	0x08009469
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80093fc:	f7fe ffc2 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 8009400:	4602      	mov	r2, r0
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	085b      	lsrs	r3, r3, #1
 8009408:	441a      	add	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	61bb      	str	r3, [r7, #24]
        break;
 8009416:	e036      	b.n	8009486 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009418:	f7fe ffc8 	bl	80083ac <HAL_RCC_GetPCLK2Freq>
 800941c:	4602      	mov	r2, r0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	441a      	add	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	fbb2 f3f3 	udiv	r3, r2, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	61bb      	str	r3, [r7, #24]
        break;
 8009432:	e028      	b.n	8009486 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	085a      	lsrs	r2, r3, #1
 800943a:	4b20      	ldr	r3, [pc, #128]	; (80094bc <UART_SetConfig+0x544>)
 800943c:	4413      	add	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6852      	ldr	r2, [r2, #4]
 8009442:	fbb3 f3f2 	udiv	r3, r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	61bb      	str	r3, [r7, #24]
        break;
 800944a:	e01c      	b.n	8009486 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800944c:	f7fe fedc 	bl	8008208 <HAL_RCC_GetSysClockFreq>
 8009450:	4602      	mov	r2, r0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	441a      	add	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	61bb      	str	r3, [r7, #24]
        break;
 8009466:	e00e      	b.n	8009486 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	b29b      	uxth	r3, r3
 800947c:	61bb      	str	r3, [r7, #24]
        break;
 800947e:	e002      	b.n	8009486 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	75fb      	strb	r3, [r7, #23]
        break;
 8009484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b0f      	cmp	r3, #15
 800948a:	d908      	bls.n	800949e <UART_SetConfig+0x526>
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009492:	d204      	bcs.n	800949e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	60da      	str	r2, [r3, #12]
 800949c:	e001      	b.n	80094a2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	01e84800 	.word	0x01e84800
 80094bc:	00f42400 	.word	0x00f42400

080094c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00a      	beq.n	800952e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	f003 0308 	and.w	r3, r3, #8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	430a      	orrs	r2, r1
 800954e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01a      	beq.n	80095d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095be:	d10a      	bne.n	80095d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	605a      	str	r2, [r3, #4]
  }
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af02      	add	r7, sp, #8
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009612:	f7fd f9e1 	bl	80069d8 <HAL_GetTick>
 8009616:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b08      	cmp	r3, #8
 8009624:	d10e      	bne.n	8009644 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f814 	bl	8009662 <UART_WaitOnFlagUntilTimeout>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e00a      	b.n	800965a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4613      	mov	r3, r2
 8009670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009672:	e02a      	b.n	80096ca <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967a:	d026      	beq.n	80096ca <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967c:	f7fd f9ac 	bl	80069d8 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	429a      	cmp	r2, r3
 800968a:	d302      	bcc.n	8009692 <UART_WaitOnFlagUntilTimeout+0x30>
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d11b      	bne.n	80096ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2220      	movs	r2, #32
 80096bc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e00f      	b.n	80096ea <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69da      	ldr	r2, [r3, #28]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4013      	ands	r3, r2
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d0c5      	beq.n	8009674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <aiPbMgrInit>:
    const aiPbCmdFunc *funcs;
    uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 80096f4:	b5b0      	push	{r4, r5, r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6178      	str	r0, [r7, #20]
    const aiPbCmdFunc *cfunc;
    pbContextMgr.input = pb_istream_from_uart(0);
 80096fc:	4c1a      	ldr	r4, [pc, #104]	; (8009768 <aiPbMgrInit+0x74>)
 80096fe:	463b      	mov	r3, r7
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f001 f9e6 	bl	800aad4 <pb_istream_from_uart>
 8009708:	463b      	mov	r3, r7
 800970a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800970c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 8009710:	4c15      	ldr	r4, [pc, #84]	; (8009768 <aiPbMgrInit+0x74>)
 8009712:	463b      	mov	r3, r7
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f001 f9b8 	bl	800aa8c <pb_ostream_to_uart>
 800971c:	3410      	adds	r4, #16
 800971e:	463d      	mov	r5, r7
 8009720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	6023      	str	r3, [r4, #0]

    pbContextMgr.n_func = 0;
 8009728:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <aiPbMgrInit+0x74>)
 800972a:	2200      	movs	r2, #0
 800972c:	629a      	str	r2, [r3, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <aiPbMgrInit+0x74>)
 8009730:	2200      	movs	r2, #0
 8009732:	625a      	str	r2, [r3, #36]	; 0x24

    if (funcs) {
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d011      	beq.n	800975e <aiPbMgrInit+0x6a>
        cfunc = funcs;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 800973e:	e007      	b.n	8009750 <aiPbMgrInit+0x5c>
            pbContextMgr.n_func++;
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <aiPbMgrInit+0x74>)
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	3301      	adds	r3, #1
 8009746:	4a08      	ldr	r2, [pc, #32]	; (8009768 <aiPbMgrInit+0x74>)
 8009748:	6293      	str	r3, [r2, #40]	; 0x28
            cfunc++;
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	330c      	adds	r3, #12
 800974e:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f3      	bne.n	8009740 <aiPbMgrInit+0x4c>
        }
        pbContextMgr.funcs = funcs;
 8009758:	4a03      	ldr	r2, [pc, #12]	; (8009768 <aiPbMgrInit+0x74>)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 800975e:	bf00      	nop
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bdb0      	pop	{r4, r5, r7, pc}
 8009766:	bf00      	nop
 8009768:	20000928 	.word	0x20000928

0800976c <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
        EnumState state)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	4613      	mov	r3, r2
 8009778:	71fb      	strb	r3, [r7, #7]
    resp->reqid = req->reqid;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	601a      	str	r2, [r3, #0]
    resp->state = state;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	79fa      	ldrb	r2, [r7, #7]
 8009786:	711a      	strb	r2, [r3, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	4905      	ldr	r1, [pc, #20]	; (80097a0 <aiPbMgrSendResp+0x34>)
 800978c:	4805      	ldr	r0, [pc, #20]	; (80097a4 <aiPbMgrSendResp+0x38>)
 800978e:	f004 f8bb 	bl	800d908 <pb_encode>
    ioFlushWrite();
 8009792:	f001 f89b 	bl	800a8cc <ioFlushWrite>
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	080132a4 	.word	0x080132a4
 80097a4:	20000938 	.word	0x20000938

080097a8 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
        EnumState state, uint32_t param, EnumError error)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ack_tag;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	220c      	movs	r2, #12
 80097bc:	80da      	strh	r2, [r3, #6]
    resp->payload.ack.param = param;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	609a      	str	r2, [r3, #8]
    resp->payload.ack.error = error;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	7e3a      	ldrb	r2, [r7, #24]
 80097c8:	731a      	strb	r2, [r3, #12]
    aiPbMgrSendResp(req, resp, state);
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68b9      	ldr	r1, [r7, #8]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff ffcb 	bl	800976c <aiPbMgrSendResp>
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
    bool res;
    ackMsg ack = ackMsg_init_default;
 80097e6:	2300      	movs	r3, #0
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	2300      	movs	r3, #0
 80097ec:	723b      	strb	r3, [r7, #8]
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80097ee:	1d3b      	adds	r3, r7, #4
 80097f0:	461a      	mov	r2, r3
 80097f2:	4906      	ldr	r1, [pc, #24]	; (800980c <aiPbMgrWaitAck+0x2c>)
 80097f4:	4806      	ldr	r0, [pc, #24]	; (8009810 <aiPbMgrWaitAck+0x30>)
 80097f6:	f003 f83d 	bl	800c874 <pb_decode_delimited>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
    ioFlushRead();
 80097fe:	f001 f8d3 	bl	800a9a8 <ioFlushRead>
    return res;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	080131f8 	.word	0x080131f8
 8009810:	20000928 	.word	0x20000928

08009814 <aiPbAiBufferSize>:
    uint32_t err;
    void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
    if (!buffer)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <aiPbAiBufferSize+0x12>
        return 0;
 8009822:	2300      	movs	r3, #0
 8009824:	e00d      	b.n	8009842 <aiPbAiBufferSize+0x2e>
    else
        return buffer->channels * buffer->height
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	88d2      	ldrh	r2, [r2, #6]
 800982e:	fb02 f303 	mul.w	r3, r2, r3
                * buffer->width * buffer->n_batches;
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	8912      	ldrh	r2, [r2, #8]
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	8892      	ldrh	r2, [r2, #4]
 800983e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
    return (ai_buffer_format)msgFmt;
 8009856:	687b      	ldr	r3, [r7, #4]
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
    return (uint32_t)aiFmt;
 800986c:	687b      	ldr	r3, [r7, #4]
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
    return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	11db      	asrs	r3, r3, #7
 8009886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988a:	3304      	adds	r3, #4
 800988c:	10db      	asrs	r3, r3, #3
}
 800988e:	4618      	mov	r0, r3
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
        void **arg)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b08c      	sub	sp, #48	; 0x30
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
    ai_buffer_format format;
    size_t itsize;

    UNUSED(field);

    int maxr = bm->n_max;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg = (aiBufferByteMsg *)bm->msg;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	623b      	str	r3, [r7, #32]
    format = aiPbMsgFmtToAiFmt(msg->shape.format);
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ffc6 	bl	800984e <aiPbMsgFmtToAiFmt>
 80098c2:	61f8      	str	r0, [r7, #28]

    /* Check shape/format */
    bm->err = EnumError_E_NONE;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	2200      	movs	r2, #0
 80098c8:	60da      	str	r2, [r3, #12]
    if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d005      	beq.n	80098dc <aiPbBuffer_read_cb3+0x42>
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d005      	beq.n	80098e8 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	2202      	movs	r2, #2
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e020      	b.n	800992a <aiPbBuffer_read_cb3+0x90>
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d114      	bne.n	8009920 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.height != bm->buffer->height) ||
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	88d2      	ldrh	r2, [r2, #6]
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 8009900:	4293      	cmp	r3, r2
 8009902:	d10d      	bne.n	8009920 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.width != bm->buffer->width) ||
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	8912      	ldrh	r2, [r2, #8]
            (msg->shape.height != bm->buffer->height) ||
 800990e:	4293      	cmp	r3, r2
 8009910:	d106      	bne.n	8009920 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.n_batches != bm->buffer->n_batches)) {
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	8892      	ldrh	r2, [r2, #4]
            (msg->shape.width != bm->buffer->width) ||
 800991c:	4293      	cmp	r3, r2
 800991e:	d004      	beq.n	800992a <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	2205      	movs	r2, #5
 8009928:	60da      	str	r2, [r3, #12]
    }

    itsize = aiPbBufferGetItemSize(format);
 800992a:	69f8      	ldr	r0, [r7, #28]
 800992c:	f7ff ffa5 	bl	800987a <aiPbBufferGetItemSize>
 8009930:	61b8      	str	r0, [r7, #24]

    /* Read data */
    uint8_t *pw = (uint8_t *)bm->buffer->data;
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	62bb      	str	r3, [r7, #40]	; 0x28
    while (stream->bytes_left) {
 800993a:	e027      	b.n	800998c <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	4619      	mov	r1, r3
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f001 ff6d 	bl	800b824 <pb_read>
 800994a:	4603      	mov	r3, r0
 800994c:	f083 0301 	eor.w	r3, r3, #1
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <aiPbBuffer_read_cb3+0xc0>
            return false;
 8009956:	2300      	movs	r3, #0
 8009958:	e02a      	b.n	80099b0 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	2b00      	cmp	r3, #0
 800995e:	dd10      	ble.n	8009982 <aiPbBuffer_read_cb3+0xe8>
            if (pw) {
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <aiPbBuffer_read_cb3+0xe2>
                memcpy(pw, &number, itsize);
 8009966:	f107 0310 	add.w	r3, r7, #16
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	4619      	mov	r1, r3
 800996e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009970:	f005 fe3b 	bl	800f5ea <memcpy>
                pw += itsize;
 8009974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	4413      	add	r3, r2
 800997a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            maxr--;
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	3b01      	subs	r3, #1
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	609a      	str	r2, [r3, #8]
    while (stream->bytes_left) {
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1d3      	bne.n	800993c <aiPbBuffer_read_cb3+0xa2>
    }

    /* Check nb_op */
    if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d108      	bne.n	80099ae <aiPbBuffer_read_cb3+0x114>
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d002      	beq.n	80099ae <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	2201      	movs	r2, #1
 80099ac:	60da      	str	r2, [r3, #12]

    return true;
 80099ae:	2301      	movs	r3, #1
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3730      	adds	r7, #48	; 0x30
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
    size_t itsize;

    int maxw = bm->n_max;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	623b      	str	r3, [r7, #32]
    ai_buffer_format format;

    if ((maxw == 0) || (!bm->buffer))
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <aiPbBuffer_write_cb3+0x26>
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <aiPbBuffer_write_cb3+0x2a>
        return true;
 80099de:	2301      	movs	r3, #1
 80099e0:	e02c      	b.n	8009a3c <aiPbBuffer_write_cb3+0x84>

    format = bm->buffer->format;
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	61fb      	str	r3, [r7, #28]

    itsize = aiPbBufferGetItemSize(format);
 80099ea:	69f8      	ldr	r0, [r7, #28]
 80099ec:	f7ff ff45 	bl	800987a <aiPbBufferGetItemSize>
 80099f0:	61b8      	str	r0, [r7, #24]

    /* Write data */
    pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	617b      	str	r3, [r7, #20]

    if (!pb_encode_tag_for_field(stream, field))
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f004 f8f3 	bl	800dbe8 <pb_encode_tag_for_field>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f083 0301 	eor.w	r3, r3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <aiPbBuffer_write_cb3+0x5a>
        return false;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e014      	b.n	8009a3c <aiPbBuffer_write_cb3+0x84>

    if (!pb_encode_string(stream, pr, itsize * maxw))
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6979      	ldr	r1, [r7, #20]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f004 f92c 	bl	800dc7c <pb_encode_string>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f083 0301 	eor.w	r3, r3, #1
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <aiPbBuffer_write_cb3+0x7c>
        return false;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e003      	b.n	8009a3c <aiPbBuffer_write_cb3+0x84>

    bm->n_ops = maxw;
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	609a      	str	r2, [r3, #8]

    return true;
 8009a3a:	2301      	movs	r3, #1
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3728      	adds	r7, #40	; 0x28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
        EnumState state, ai_buffer *buffer)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b094      	sub	sp, #80	; 0x50
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	71fb      	strb	r3, [r7, #7]
    aiBufferByteMsg msg;
    struct aiPbMgrBuffer hdlb;
    bool res = true;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    hdlb.n_ops = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	61fb      	str	r3, [r7, #28]
    hdlb.buffer = buffer;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	617b      	str	r3, [r7, #20]
    hdlb.err = EnumError_E_NONE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	623b      	str	r3, [r7, #32]
    hdlb.n_max = aiPbAiBufferSize(buffer);
 8009a66:	6838      	ldr	r0, [r7, #0]
 8009a68:	f7ff fed4 	bl	8009814 <aiPbAiBufferSize>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	61bb      	str	r3, [r7, #24]
    hdlb.msg = &msg;
 8009a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24

    msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 8009a76:	4b1b      	ldr	r3, [pc, #108]	; (8009ae4 <aiPbMgrReceiveAiBuffer3+0xa0>)
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    msg.datas.arg = &hdlb;
 8009a7a:	f107 0314 	add.w	r3, r7, #20
 8009a7e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Waiting buffer message */
    pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8009a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a84:	461a      	mov	r2, r3
 8009a86:	4918      	ldr	r1, [pc, #96]	; (8009ae8 <aiPbMgrReceiveAiBuffer3+0xa4>)
 8009a88:	4818      	ldr	r0, [pc, #96]	; (8009aec <aiPbMgrReceiveAiBuffer3+0xa8>)
 8009a8a:	f002 fef3 	bl	800c874 <pb_decode_delimited>
    ioFlushRead();
 8009a8e:	f000 ff8b 	bl	800a9a8 <ioFlushRead>

    /* Send ACK and wait ACK (or send ACK only if error) */
    if (hdlb.err) {
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00d      	beq.n	8009ab4 <aiPbMgrReceiveAiBuffer3+0x70>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8009a98:	6a3a      	ldr	r2, [r7, #32]
                (EnumError)hdlb.err);
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff fe7e 	bl	80097a8 <aiPbMgrSendAck>
        res = false;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ab2:	e010      	b.n	8009ad6 <aiPbMgrReceiveAiBuffer3+0x92>
    } else {
        aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 8009ab4:	69f9      	ldr	r1, [r7, #28]
 8009ab6:	79fa      	ldrb	r2, [r7, #7]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	460b      	mov	r3, r1
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fe71 	bl	80097a8 <aiPbMgrSendAck>
        if ((state == EnumState_S_WAITING) ||
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d002      	beq.n	8009ad2 <aiPbMgrReceiveAiBuffer3+0x8e>
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d101      	bne.n	8009ad6 <aiPbMgrReceiveAiBuffer3+0x92>
                (state == EnumState_S_PROCESSING))
            aiPbMgrWaitAck();
 8009ad2:	f7ff fe85 	bl	80097e0 <aiPbMgrWaitAck>
    }

    return res;
 8009ad6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3748      	adds	r7, #72	; 0x48
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800989b 	.word	0x0800989b
 8009ae8:	0801314c 	.word	0x0801314c
 8009aec:	20000928 	.word	0x20000928

08009af0 <aiPbMgrSendAiBuffer3>:

bool aiPbMgrSendAiBuffer3(const reqMsg *req, respMsg *resp, EnumState state,
        uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08c      	sub	sp, #48	; 0x30
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6178      	str	r0, [r7, #20]
 8009af8:	6139      	str	r1, [r7, #16]
 8009afa:	60bb      	str	r3, [r7, #8]
 8009afc:	ed87 0a01 	vstr	s0, [r7, #4]
 8009b00:	4613      	mov	r3, r2
 8009b02:	73fb      	strb	r3, [r7, #15]
    struct aiPbMgrBuffer hdlb;

    hdlb.n_ops = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
    hdlb.buffer = (ai_buffer *)buffer;
 8009b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0a:	61fb      	str	r3, [r7, #28]
    hdlb.err = EnumError_E_NONE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    hdlb.n_max = aiPbAiBufferSize(buffer);
 8009b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b12:	f7ff fe7f 	bl	8009814 <aiPbAiBufferSize>
 8009b16:	4603      	mov	r3, r0
 8009b18:	623b      	str	r3, [r7, #32]
    hdlb.msg = NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da05      	bge.n	8009b30 <aiPbMgrSendAiBuffer3+0x40>
        hdlb.n_max  = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	623b      	str	r3, [r7, #32]
        type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b2e:	60bb      	str	r3, [r7, #8]
    }

    /* Fill Node sub-message */
    resp->which_payload = respMsg_node_tag;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	220e      	movs	r2, #14
 8009b34:	80da      	strh	r2, [r3, #6]
    resp->payload.node.type = type;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	609a      	str	r2, [r3, #8]
    resp->payload.node.id = id;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b40:	60da      	str	r2, [r3, #12]
    resp->payload.node.duration = dur_ms;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	611a      	str	r2, [r3, #16]
    resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 8009b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7ff fe89 	bl	8009864 <aiPbAiFmtToMsgFmt>
 8009b52:	4602      	mov	r2, r0
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	615a      	str	r2, [r3, #20]
    resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 8009b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5a:	889b      	ldrh	r3, [r3, #4]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	619a      	str	r2, [r3, #24]
    resp->payload.node.buffer.shape.height = buffer->height;
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	88db      	ldrh	r3, [r3, #6]
 8009b66:	461a      	mov	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	61da      	str	r2, [r3, #28]
    resp->payload.node.buffer.shape.width = buffer->width;
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6e:	891b      	ldrh	r3, [r3, #8]
 8009b70:	461a      	mov	r2, r3
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	621a      	str	r2, [r3, #32]
    resp->payload.node.buffer.shape.channels = buffer->channels;
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	625a      	str	r2, [r3, #36]	; 0x24
    resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	4a0b      	ldr	r2, [pc, #44]	; (8009bb0 <aiPbMgrSendAiBuffer3+0xc0>)
 8009b82:	629a      	str	r2, [r3, #40]	; 0x28
    resp->payload.node.buffer.datas.arg = &hdlb;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f107 021c 	add.w	r2, r7, #28
 8009b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send msg */
    aiPbMgrSendResp(req, resp, state);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6939      	ldr	r1, [r7, #16]
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f7ff fdea 	bl	800976c <aiPbMgrSendResp>

    /* Waiting ACK */
    if (state == EnumState_S_PROCESSING)
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d103      	bne.n	8009ba6 <aiPbMgrSendAiBuffer3+0xb6>
        return aiPbMgrWaitAck();
 8009b9e:	f7ff fe1f 	bl	80097e0 <aiPbMgrWaitAck>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	e000      	b.n	8009ba8 <aiPbMgrSendAiBuffer3+0xb8>
    else
        return true;
 8009ba6:	2301      	movs	r3, #1
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3730      	adds	r7, #48	; 0x30
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	080099b9 	.word	0x080099b9

08009bb4 <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
    resp->which_payload = respMsg_sync_tag;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	220a      	movs	r2, #10
 8009bc4:	80da      	strh	r2, [r3, #6]
    resp->payload.sync.version =
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bcc:	609a      	str	r2, [r3, #8]
            EnumVersion_P_VERSION_MAJOR << 8 |
            EnumVersion_P_VERSION_MINOR;

    resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
    resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

    if (param)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <aiPbCmdSync+0x32>
        resp->payload.sync.capability |= (uint32_t)param;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	431a      	orrs	r2, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	60da      	str	r2, [r3, #12]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8009be6:	2200      	movs	r2, #0
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fdbe 	bl	800976c <aiPbMgrSendResp>
}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
    UNUSED(param);
    resp->which_payload = respMsg_sinfo_tag;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	220b      	movs	r2, #11
 8009c08:	80da      	strh	r2, [r3, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 8009c0a:	f7fc ff29 	bl	8006a60 <HAL_GetDEVID>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	609a      	str	r2, [r3, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 8009c14:	f7fe faf8 	bl	8008208 <HAL_RCC_GetSysClockFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	60da      	str	r2, [r3, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 8009c1e:	f7fe fba5 	bl	800836c <HAL_RCC_GetHCLKFreq>
 8009c22:	4602      	mov	r2, r0
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	611a      	str	r2, [r3, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 8009c28:	f000 fb62 	bl	800a2f0 <getFlashCacheConf>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	615a      	str	r2, [r3, #20]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8009c32:	2200      	movs	r2, #0
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff fd98 	bl	800976c <aiPbMgrSendResp>
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
    if ((!aibuffer) || (!msg))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01e      	beq.n	8009c92 <init_aibuffer_msg+0x4e>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01b      	beq.n	8009c92 <init_aibuffer_msg+0x4e>
        return;

    msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff fe00 	bl	8009864 <aiPbAiFmtToMsgFmt>
 8009c64:	4602      	mov	r2, r0
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	601a      	str	r2, [r3, #0]
    msg->channels = aibuffer->channels;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	611a      	str	r2, [r3, #16]
    msg->height = aibuffer->height;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	461a      	mov	r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	609a      	str	r2, [r3, #8]
    msg->width = aibuffer->width;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	461a      	mov	r2, r3
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	60da      	str	r2, [r3, #12]
    msg->n_batches = aibuffer->n_batches;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	889b      	ldrh	r3, [r3, #4]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	605a      	str	r2, [r3, #4]
 8009c90:	e000      	b.n	8009c94 <init_aibuffer_msg+0x50>
        return;
 8009c92:	bf00      	nop
}
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        const ai_buffer *aibuffer, int maxw)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
    aiBufferShapeMsg msg;

    for (int i = 0; i < maxw; i++) {
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
 8009cae:	e02b      	b.n	8009d08 <nn_shape_w_cb+0x6c>
        if (!pb_encode_tag_for_field(stream, field))
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f003 ff98 	bl	800dbe8 <pb_encode_tag_for_field>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f083 0301 	eor.w	r3, r3, #1
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <nn_shape_w_cb+0x2c>
            return false;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e024      	b.n	8009d12 <nn_shape_w_cb+0x76>

        init_aibuffer_msg(&aibuffer[i], &msg);
 8009cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f107 0210 	add.w	r2, r7, #16
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff ffb0 	bl	8009c44 <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8009ce4:	f107 0310 	add.w	r3, r7, #16
 8009ce8:	461a      	mov	r2, r3
 8009cea:	490c      	ldr	r1, [pc, #48]	; (8009d1c <nn_shape_w_cb+0x80>)
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f003 ffe5 	bl	800dcbc <pb_encode_submessage>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f083 0301 	eor.w	r3, r3, #1
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <nn_shape_w_cb+0x66>
            return false;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e007      	b.n	8009d12 <nn_shape_w_cb+0x76>
    for (int i = 0; i < maxw; i++) {
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	3301      	adds	r3, #1
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	dbcf      	blt.n	8009cb0 <nn_shape_w_cb+0x14>
    }
    return true;
 8009d10:	2301      	movs	r3, #1
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3728      	adds	r7, #40	; 0x28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08012fb4 	.word	0x08012fb4

08009d20 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	617b      	str	r3, [r7, #20]

    if (!report)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <nn_inputs_w_cb+0x1c>
        return true;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e007      	b.n	8009d4c <nn_inputs_w_cb+0x2c>

    return nn_shape_w_cb(stream, field, &report->inputs[0], 1);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d40:	2301      	movs	r3, #1
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff ffa9 	bl	8009c9c <nn_shape_w_cb>
 8009d4a:	4603      	mov	r3, r0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	617b      	str	r3, [r7, #20]

    if (!report)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <nn_outputs_w_cb+0x1c>
        return true;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e007      	b.n	8009d80 <nn_outputs_w_cb+0x2c>

    return nn_shape_w_cb(stream, field, &report->outputs[0], 1);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d74:	2301      	movs	r3, #1
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ff8f 	bl	8009c9c <nn_shape_w_cb>
 8009d7e:	4603      	mov	r3, r0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
    const char undef[] = "UNDEFINED";
 8009d94:	4a19      	ldr	r2, [pc, #100]	; (8009dfc <aiPbStrCopy+0x74>)
 8009d96:	f107 0310 	add.w	r3, r7, #16
 8009d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d9c:	c303      	stmia	r3!, {r0, r1}
 8009d9e:	801a      	strh	r2, [r3, #0]
    size_t l = strlen(src);
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7fc f876 	bl	8005e92 <strlen>
 8009da6:	61f8      	str	r0, [r7, #28]

    if (l > max)
 8009da8:	69fa      	ldr	r2, [r7, #28]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d902      	bls.n	8009db6 <aiPbStrCopy+0x2e>
        l = max-1;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	61fb      	str	r3, [r7, #28]

    if (!dst)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d01b      	beq.n	8009df4 <aiPbStrCopy+0x6c>
        return;

    if (src && l)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <aiPbStrCopy+0x50>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <aiPbStrCopy+0x50>
        memcpy(dst, src, l+1);
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	68b8      	ldr	r0, [r7, #8]
 8009dd2:	f005 fc0a 	bl	800f5ea <memcpy>
 8009dd6:	e00e      	b.n	8009df6 <aiPbStrCopy+0x6e>
    else
        memcpy(dst, undef, strlen(undef)+1);
 8009dd8:	f107 0310 	add.w	r3, r7, #16
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fc f858 	bl	8005e92 <strlen>
 8009de2:	4603      	mov	r3, r0
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	f107 0310 	add.w	r3, r7, #16
 8009dea:	4619      	mov	r1, r3
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	f005 fbfc 	bl	800f5ea <memcpy>
 8009df2:	e000      	b.n	8009df6 <aiPbStrCopy+0x6e>
        return;
 8009df4:	bf00      	nop
}
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	080124b0 	.word	0x080124b0

08009e00 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    if (!ver)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <aiPbVersionToUint32+0x12>
        return 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e00d      	b.n	8009e2e <aiPbVersionToUint32+0x2e>

    return ver->major << 24 | ver->minor << 16
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	061a      	lsls	r2, r3, #24
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	041b      	lsls	r3, r3, #16
 8009e1e:	431a      	orrs	r2, r3
            | ver->micro << 8 | ver->reserved;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	789b      	ldrb	r3, [r3, #2]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	4313      	orrs	r3, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	78d2      	ldrb	r2, [r2, #3]
 8009e2c:	4313      	orrs	r3, r2
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ninfo_tag;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2214      	movs	r2, #20
 8009e50:	80da      	strh	r2, [r3, #6]

    aiPbStrCopy(nn->model_name,
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	2240      	movs	r2, #64	; 0x40
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7ff ff93 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	6858      	ldr	r0, [r3, #4]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3348      	adds	r3, #72	; 0x48
 8009e6a:	2240      	movs	r2, #64	; 0x40
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7ff ff8b 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	6898      	ldr	r0, [r3, #8]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	3388      	adds	r3, #136	; 0x88
 8009e7a:	2240      	movs	r2, #64	; 0x40
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f7ff ff83 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68d8      	ldr	r0, [r3, #12]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	33c8      	adds	r3, #200	; 0xc8
 8009e8a:	2240      	movs	r2, #64	; 0x40
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	f7ff ff7b 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6918      	ldr	r0, [r3, #16]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009e9c:	2240      	movs	r2, #64	; 0x40
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f7ff ff72 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	6998      	ldr	r0, [r3, #24]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8009eae:	2240      	movs	r2, #64	; 0x40
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f7ff ff69 	bl	8009d88 <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009eba:	461a      	mov	r2, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    resp->payload.ninfo.signature = nn->signature;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	3324      	adds	r3, #36	; 0x24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff ff85 	bl	8009e00 <aiPbVersionToUint32>
 8009ef6:	4602      	mov	r2, r0
    resp->payload.ninfo.api_version =
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	3328      	adds	r3, #40	; 0x28
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff ff7c 	bl	8009e00 <aiPbVersionToUint32>
 8009f08:	4602      	mov	r2, r0
    resp->payload.ninfo.interface_api_version =
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff ff73 	bl	8009e00 <aiPbVersionToUint32>
 8009f1a:	4602      	mov	r2, r0
    resp->payload.ninfo.runtime_version =
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	331c      	adds	r3, #28
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ff6a 	bl	8009e00 <aiPbVersionToUint32>
 8009f2c:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_version =
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	3320      	adds	r3, #32
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff ff61 	bl	8009e00 <aiPbVersionToUint32>
 8009f3e:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_api_version =
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f7ff fe75 	bl	8009c44 <init_aibuffer_msg>
    init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7ff fe6b 	bl	8009c44 <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4a0c      	ldr	r2, [pc, #48]	; (8009fa4 <aiPbMgrSendNNInfo+0x168>)
 8009f72:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    resp->payload.ninfo.inputs.arg = (void *)nn;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4a09      	ldr	r2, [pc, #36]	; (8009fa8 <aiPbMgrSendNNInfo+0x16c>)
 8009f82:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    resp->payload.ninfo.outputs.arg = (void *)nn;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    aiPbMgrSendResp(req, resp, state);
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	461a      	mov	r2, r3
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fbe9 	bl	800976c <aiPbMgrSendResp>
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	08009d21 	.word	0x08009d21
 8009fa8:	08009d55 	.word	0x08009d55

08009fac <crcIpInit>:
#error Only STM32H7, STM32F7, STM32F4, STM32L4 or STM32F3 device are supported
#endif
#endif

void crcIpInit(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#else
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <crcIpInit+0x38>)
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <crcIpInit+0x18>
        printf("W: CRC IP clock is NOT enabled\r\n");
 8009fbe:	480a      	ldr	r0, [pc, #40]	; (8009fe8 <crcIpInit+0x3c>)
 8009fc0:	f006 f87e 	bl	80100c0 <puts>

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <crcIpInit+0x38>)
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc8:	4a06      	ldr	r2, [pc, #24]	; (8009fe4 <crcIpInit+0x38>)
 8009fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fce:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd0:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <crcIpInit+0x38>)
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fd8:	607b      	str	r3, [r7, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
#endif
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	080124bc 	.word	0x080124bc

08009fec <dwtIpInit>:

void dwtIpInit(void)
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <dwtIpInit+0x34>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4a0a      	ldr	r2, [pc, #40]	; (800a020 <dwtIpInit+0x34>)
 8009ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ffa:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
 8009ffc:	4b09      	ldr	r3, [pc, #36]	; (800a024 <dwtIpInit+0x38>)
 8009ffe:	4a0a      	ldr	r2, [pc, #40]	; (800a028 <dwtIpInit+0x3c>)
 800a000:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif

    DWT->CYCCNT = 0;
 800a004:	4b07      	ldr	r3, [pc, #28]	; (800a024 <dwtIpInit+0x38>)
 800a006:	2200      	movs	r2, #0
 800a008:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800a00a:	4b06      	ldr	r3, [pc, #24]	; (800a024 <dwtIpInit+0x38>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4905      	ldr	r1, [pc, #20]	; (800a024 <dwtIpInit+0x38>)
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <dwtIpInit+0x40>)
 800a012:	4313      	orrs	r3, r2
 800a014:	600b      	str	r3, [r1, #0]
}
 800a016:	bf00      	nop
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	e000edf0 	.word	0xe000edf0
 800a024:	e0001000 	.word	0xe0001000
 800a028:	c5acce55 	.word	0xc5acce55
 800a02c:	00020001 	.word	0x00020001

0800a030 <dwtReset>:

void dwtReset(void)
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800a034:	4b03      	ldr	r3, [pc, #12]	; (800a044 <dwtReset+0x14>)
 800a036:	2200      	movs	r2, #0
 800a038:	605a      	str	r2, [r3, #4]
}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	e0001000 	.word	0xe0001000

0800a048 <dwtGetCycles>:

uint32_t dwtGetCycles(void)
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800a04c:	4b03      	ldr	r3, [pc, #12]	; (800a05c <dwtGetCycles+0x14>)
 800a04e:	685b      	ldr	r3, [r3, #4]
}
 800a050:	4618      	mov	r0, r3
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	e0001000 	.word	0xe0001000

0800a060 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
#if !defined(STM32H7)
    return HAL_RCC_GetHCLKFreq();
 800a064:	f7fe f982 	bl	800836c <HAL_RCC_GetHCLKFreq>
 800a068:	4603      	mov	r3, r0
#else
    return HAL_RCC_GetSysClockFreq();
#endif
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <dwtCyclesToFloatMs>:
    return 0;
}


float dwtCyclesToFloatMs(uint64_t clks)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	e9c7 0100 	strd	r0, r1, [r7]
    float res;
    float fcpu = (float)systemCoreClock();
 800a07a:	f7ff fff1 	bl	800a060 <systemCoreClock>
 800a07e:	ee07 0a90 	vmov	s15, r0
 800a082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a086:	edc7 7a03 	vstr	s15, [r7, #12]
    res = ((float)clks * (float)1000.0) / fcpu;
 800a08a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a08e:	f7fc f9e3 	bl	8006458 <__aeabi_ul2f>
 800a092:	ee07 0a10 	vmov	s14, r0
 800a096:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a0bc <dwtCyclesToFloatMs+0x4c>
 800a09a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a09e:	ed97 7a03 	vldr	s14, [r7, #12]
 800a0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0a6:	edc7 7a02 	vstr	s15, [r7, #8]
    return res;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	ee07 3a90 	vmov	s15, r3
}
 800a0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	447a0000 	.word	0x447a0000

0800a0c0 <devIdToStr>:


__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	80fb      	strh	r3, [r7, #6]
    const char *str;
    switch (dev_id) {
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800a0d0:	2b5b      	cmp	r3, #91	; 0x5b
 800a0d2:	f200 80d9 	bhi.w	800a288 <devIdToStr+0x1c8>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <devIdToStr+0x1c>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a271 	.word	0x0800a271
 800a0e0:	0800a289 	.word	0x0800a289
 800a0e4:	0800a289 	.word	0x0800a289
 800a0e8:	0800a289 	.word	0x0800a289
 800a0ec:	0800a289 	.word	0x0800a289
 800a0f0:	0800a289 	.word	0x0800a289
 800a0f4:	0800a289 	.word	0x0800a289
 800a0f8:	0800a289 	.word	0x0800a289
 800a0fc:	0800a289 	.word	0x0800a289
 800a100:	0800a289 	.word	0x0800a289
 800a104:	0800a289 	.word	0x0800a289
 800a108:	0800a289 	.word	0x0800a289
 800a10c:	0800a289 	.word	0x0800a289
 800a110:	0800a24d 	.word	0x0800a24d
 800a114:	0800a289 	.word	0x0800a289
 800a118:	0800a289 	.word	0x0800a289
 800a11c:	0800a289 	.word	0x0800a289
 800a120:	0800a289 	.word	0x0800a289
 800a124:	0800a289 	.word	0x0800a289
 800a128:	0800a289 	.word	0x0800a289
 800a12c:	0800a289 	.word	0x0800a289
 800a130:	0800a289 	.word	0x0800a289
 800a134:	0800a289 	.word	0x0800a289
 800a138:	0800a289 	.word	0x0800a289
 800a13c:	0800a289 	.word	0x0800a289
 800a140:	0800a289 	.word	0x0800a289
 800a144:	0800a289 	.word	0x0800a289
 800a148:	0800a289 	.word	0x0800a289
 800a14c:	0800a25f 	.word	0x0800a25f
 800a150:	0800a289 	.word	0x0800a289
 800a154:	0800a289 	.word	0x0800a289
 800a158:	0800a289 	.word	0x0800a289
 800a15c:	0800a265 	.word	0x0800a265
 800a160:	0800a289 	.word	0x0800a289
 800a164:	0800a289 	.word	0x0800a289
 800a168:	0800a253 	.word	0x0800a253
 800a16c:	0800a289 	.word	0x0800a289
 800a170:	0800a289 	.word	0x0800a289
 800a174:	0800a289 	.word	0x0800a289
 800a178:	0800a289 	.word	0x0800a289
 800a17c:	0800a289 	.word	0x0800a289
 800a180:	0800a289 	.word	0x0800a289
 800a184:	0800a289 	.word	0x0800a289
 800a188:	0800a289 	.word	0x0800a289
 800a18c:	0800a289 	.word	0x0800a289
 800a190:	0800a289 	.word	0x0800a289
 800a194:	0800a289 	.word	0x0800a289
 800a198:	0800a289 	.word	0x0800a289
 800a19c:	0800a289 	.word	0x0800a289
 800a1a0:	0800a259 	.word	0x0800a259
 800a1a4:	0800a289 	.word	0x0800a289
 800a1a8:	0800a289 	.word	0x0800a289
 800a1ac:	0800a27d 	.word	0x0800a27d
 800a1b0:	0800a289 	.word	0x0800a289
 800a1b4:	0800a289 	.word	0x0800a289
 800a1b8:	0800a289 	.word	0x0800a289
 800a1bc:	0800a289 	.word	0x0800a289
 800a1c0:	0800a289 	.word	0x0800a289
 800a1c4:	0800a289 	.word	0x0800a289
 800a1c8:	0800a283 	.word	0x0800a283
 800a1cc:	0800a289 	.word	0x0800a289
 800a1d0:	0800a289 	.word	0x0800a289
 800a1d4:	0800a289 	.word	0x0800a289
 800a1d8:	0800a289 	.word	0x0800a289
 800a1dc:	0800a289 	.word	0x0800a289
 800a1e0:	0800a289 	.word	0x0800a289
 800a1e4:	0800a289 	.word	0x0800a289
 800a1e8:	0800a289 	.word	0x0800a289
 800a1ec:	0800a289 	.word	0x0800a289
 800a1f0:	0800a289 	.word	0x0800a289
 800a1f4:	0800a289 	.word	0x0800a289
 800a1f8:	0800a289 	.word	0x0800a289
 800a1fc:	0800a289 	.word	0x0800a289
 800a200:	0800a289 	.word	0x0800a289
 800a204:	0800a289 	.word	0x0800a289
 800a208:	0800a289 	.word	0x0800a289
 800a20c:	0800a289 	.word	0x0800a289
 800a210:	0800a26b 	.word	0x0800a26b
 800a214:	0800a289 	.word	0x0800a289
 800a218:	0800a289 	.word	0x0800a289
 800a21c:	0800a289 	.word	0x0800a289
 800a220:	0800a289 	.word	0x0800a289
 800a224:	0800a289 	.word	0x0800a289
 800a228:	0800a289 	.word	0x0800a289
 800a22c:	0800a289 	.word	0x0800a289
 800a230:	0800a289 	.word	0x0800a289
 800a234:	0800a289 	.word	0x0800a289
 800a238:	0800a289 	.word	0x0800a289
 800a23c:	0800a289 	.word	0x0800a289
 800a240:	0800a289 	.word	0x0800a289
 800a244:	0800a289 	.word	0x0800a289
 800a248:	0800a277 	.word	0x0800a277
    case 0x422: str = "STM32F303xB/C"; break;
 800a24c:	4b13      	ldr	r3, [pc, #76]	; (800a29c <devIdToStr+0x1dc>)
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e01c      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x438: str = "STM32F303x6/8"; break;
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <devIdToStr+0x1e0>)
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	e019      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x446: str = "STM32F303xD/E"; break;
 800a258:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <devIdToStr+0x1e4>)
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e016      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x431: str = "STM32F411xC/E"; break;
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <devIdToStr+0x1e8>)
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e013      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x435: str = "STM32L43xxx"; break;
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <devIdToStr+0x1ec>)
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e010      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x462: str = "STM32L45xxx"; break;
 800a26a:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <devIdToStr+0x1f0>)
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e00d      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x415: str = "STM32L4x6xx"; break;
 800a270:	4b10      	ldr	r3, [pc, #64]	; (800a2b4 <devIdToStr+0x1f4>)
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	e00a      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x470: str = "STM32L4Rxxx"; break;
 800a276:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <devIdToStr+0x1f8>)
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e007      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x449: str = "STM32F74xxx"; break;
 800a27c:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <devIdToStr+0x1fc>)
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e004      	b.n	800a28c <devIdToStr+0x1cc>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 800a282:	4b0f      	ldr	r3, [pc, #60]	; (800a2c0 <devIdToStr+0x200>)
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	e001      	b.n	800a28c <devIdToStr+0x1cc>
    default:    str = "UNKNOWN";
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <devIdToStr+0x204>)
 800a28a:	60fb      	str	r3, [r7, #12]
    }
    return str;
 800a28c:	68fb      	ldr	r3, [r7, #12]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	080124dc 	.word	0x080124dc
 800a2a0:	080124ec 	.word	0x080124ec
 800a2a4:	080124fc 	.word	0x080124fc
 800a2a8:	0801250c 	.word	0x0801250c
 800a2ac:	0801251c 	.word	0x0801251c
 800a2b0:	08012528 	.word	0x08012528
 800a2b4:	08012534 	.word	0x08012534
 800a2b8:	08012540 	.word	0x08012540
 800a2bc:	0801254c 	.word	0x0801254c
 800a2c0:	08012558 	.word	0x08012558
 800a2c4:	08012574 	.word	0x08012574

0800a2c8 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
    if (val)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <bitToStr+0x12>
        return "True";
 800a2d6:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <bitToStr+0x20>)
 800a2d8:	e000      	b.n	800a2dc <bitToStr+0x14>
    else
        return "False";
 800a2da:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <bitToStr+0x24>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	0801257c 	.word	0x0801257c
 800a2ec:	08012584 	.word	0x08012584

0800a2f0 <getFlashCacheConf>:


static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
    return mconf;
 800a2f4:	4b03      	ldr	r3, [pc, #12]	; (800a304 <getFlashCacheConf+0x14>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000954 	.word	0x20000954

0800a308 <logDeviceConf>:

void logDeviceConf(void)
{
 800a308:	b5b0      	push	{r4, r5, r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af02      	add	r7, sp, #8
    uint32_t acr = FLASH->ACR ;
 800a30e:	4b53      	ldr	r3, [pc, #332]	; (800a45c <logDeviceConf+0x154>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	607b      	str	r3, [r7, #4]
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 800a314:	4852      	ldr	r0, [pc, #328]	; (800a460 <logDeviceConf+0x158>)
 800a316:	f005 fed3 	bl	80100c0 <puts>

    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
            (int)HAL_GetDEVID(),
 800a31a:	f7fc fba1 	bl	8006a60 <HAL_GetDEVID>
 800a31e:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800a320:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 800a322:	f7fc fb9d 	bl	8006a60 <HAL_GetDEVID>
 800a326:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800a328:	b29b      	uxth	r3, r3
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fec8 	bl	800a0c0 <devIdToStr>
 800a330:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 800a332:	f7fc fb89 	bl	8006a48 <HAL_GetREVID>
 800a336:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 800a338:	462a      	mov	r2, r5
 800a33a:	4621      	mov	r1, r4
 800a33c:	4849      	ldr	r0, [pc, #292]	; (800a464 <logDeviceConf+0x15c>)
 800a33e:	f005 fe4b 	bl	800ffd8 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 800a342:	4b49      	ldr	r3, [pc, #292]	; (800a468 <logDeviceConf+0x160>)
 800a344:	4a49      	ldr	r2, [pc, #292]	; (800a46c <logDeviceConf+0x164>)
 800a346:	2107      	movs	r1, #7
 800a348:	4849      	ldr	r0, [pc, #292]	; (800a470 <logDeviceConf+0x168>)
 800a34a:	f005 fe45 	bl	800ffd8 <iprintf>
            ""
#endif
    );

#if (__FPU_PRESENT == 1) && __FPU_USED
    mconf = (1 << 16);  /* FPU present and used */
 800a34e:	4b49      	ldr	r3, [pc, #292]	; (800a474 <logDeviceConf+0x16c>)
 800a350:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a354:	601a      	str	r2, [r3, #0]
#endif

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800a356:	f7fc fb6d 	bl	8006a34 <HAL_GetHalVersion>
 800a35a:	4603      	mov	r3, r0
 800a35c:	4619      	mov	r1, r3
 800a35e:	4846      	ldr	r0, [pc, #280]	; (800a478 <logDeviceConf+0x170>)
 800a360:	f005 fe3a 	bl	800ffd8 <iprintf>

    val = systemCoreClock()/1000000;
 800a364:	f7ff fe7c 	bl	800a060 <systemCoreClock>
 800a368:	4602      	mov	r2, r0
 800a36a:	4b44      	ldr	r3, [pc, #272]	; (800a47c <logDeviceConf+0x174>)
 800a36c:	fba3 2302 	umull	r2, r3, r3, r2
 800a370:	0c9b      	lsrs	r3, r3, #18
 800a372:	603b      	str	r3, [r7, #0]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	4841      	ldr	r0, [pc, #260]	; (800a480 <logDeviceConf+0x178>)
 800a37a:	f005 fe2d 	bl	800ffd8 <iprintf>
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 800a37e:	4b41      	ldr	r3, [pc, #260]	; (800a484 <logDeviceConf+0x17c>)
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	603b      	str	r3, [r7, #0]
#if !defined(STM32H7)
    mconf |= (2 << 24);  /* F7 conf. */
 800a384:	4b3b      	ldr	r3, [pc, #236]	; (800a474 <logDeviceConf+0x16c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a38c:	4a39      	ldr	r2, [pc, #228]	; (800a474 <logDeviceConf+0x16c>)
 800a38e:	6013      	str	r3, [r2, #0]
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f003 020f 	and.w	r2, r3, #15
 800a396:	4b37      	ldr	r3, [pc, #220]	; (800a474 <logDeviceConf+0x16c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	4a35      	ldr	r2, [pc, #212]	; (800a474 <logDeviceConf+0x16c>)
 800a39e:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d005      	beq.n	800a3b6 <logDeviceConf+0xae>
        mconf |= (1 << 8);
 800a3aa:	4b32      	ldr	r3, [pc, #200]	; (800a474 <logDeviceConf+0x16c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b2:	4a30      	ldr	r2, [pc, #192]	; (800a474 <logDeviceConf+0x16c>)
 800a3b4:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <logDeviceConf+0xc4>
        mconf |= (1 << 9);
 800a3c0:	4b2c      	ldr	r3, [pc, #176]	; (800a474 <logDeviceConf+0x16c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3c8:	4a2a      	ldr	r2, [pc, #168]	; (800a474 <logDeviceConf+0x16c>)
 800a3ca:	6013      	str	r3, [r2, #0]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800a3cc:	687c      	ldr	r4, [r7, #4]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff ff76 	bl	800a2c8 <bitToStr>
 800a3dc:	4605      	mov	r5, r0
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0a5b      	lsrs	r3, r3, #9
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff ff6e 	bl	800a2c8 <bitToStr>
 800a3ec:	4602      	mov	r2, r0
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800a3ee:	687b      	ldr	r3, [r7, #4]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4822      	ldr	r0, [pc, #136]	; (800a488 <logDeviceConf+0x180>)
 800a3fe:	f005 fdeb 	bl	800ffd8 <iprintf>
    mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
    if (val & SCB_CCR_IC_Msk)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <logDeviceConf+0x110>
        mconf |= (1 << 10);
 800a40c:	4b19      	ldr	r3, [pc, #100]	; (800a474 <logDeviceConf+0x16c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a414:	4a17      	ldr	r2, [pc, #92]	; (800a474 <logDeviceConf+0x16c>)
 800a416:	6013      	str	r3, [r2, #0]
    if (val & SCB_CCR_DC_Msk)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <logDeviceConf+0x126>
        mconf |= (1 << 11);
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <logDeviceConf+0x16c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a42a:	4a12      	ldr	r2, [pc, #72]	; (800a474 <logDeviceConf+0x16c>)
 800a42c:	6013      	str	r3, [r2, #0]
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff ff47 	bl	800a2c8 <bitToStr>
 800a43a:	4604      	mov	r4, r0
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ff40 	bl	800a2c8 <bitToStr>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	4621      	mov	r1, r4
 800a44e:	480f      	ldr	r0, [pc, #60]	; (800a48c <logDeviceConf+0x184>)
 800a450:	f005 fdc2 	bl	800ffd8 <iprintf>
            bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
            bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
#endif
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bdb0      	pop	{r4, r5, r7, pc}
 800a45c:	40023c00 	.word	0x40023c00
 800a460:	0801258c 	.word	0x0801258c
 800a464:	080125ac 	.word	0x080125ac
 800a468:	080125e0 	.word	0x080125e0
 800a46c:	080125ec 	.word	0x080125ec
 800a470:	080125f8 	.word	0x080125f8
 800a474:	20000954 	.word	0x20000954
 800a478:	08012618 	.word	0x08012618
 800a47c:	431bde83 	.word	0x431bde83
 800a480:	08012634 	.word	0x08012634
 800a484:	e000ed00 	.word	0xe000ed00
 800a488:	08012650 	.word	0x08012650
 800a48c:	08012690 	.word	0x08012690

0800a490 <disableInts>:

uint32_t disableInts(void)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a496:	f3ef 8310 	mrs	r3, PRIMASK
 800a49a:	603b      	str	r3, [r7, #0]
  return(result);
 800a49c:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 800a49e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4a0:	b672      	cpsid	i
    __disable_irq();

    return state;
 800a4a2:	687b      	ldr	r3, [r7, #4]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <restoreInts>:

void restoreInts(uint32_t state)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f383 8810 	msr	PRIMASK, r3
   __set_PRIMASK(state);
}
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	da0d      	bge.n	800a4fe <_write+0x2e>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d00a      	beq.n	800a4fe <_write+0x2e>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d007      	beq.n	800a4fe <_write+0x2e>
        errno = EBADF;
 800a4ee:	f005 f833 	bl	800f558 <__errno>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	2309      	movs	r3, #9
 800a4f6:	6013      	str	r3, [r2, #0]
        return -1;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	e016      	b.n	800a52c <_write+0x5c>
    }

    if (_ioWriteAllowed)
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <_write+0x64>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <_write+0x4c>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	b29a      	uxth	r2, r3
 800a50a:	f04f 33ff 	mov.w	r3, #4294967295
 800a50e:	68b9      	ldr	r1, [r7, #8]
 800a510:	4809      	ldr	r0, [pc, #36]	; (800a538 <_write+0x68>)
 800a512:	f7fe fbd3 	bl	8008cbc <HAL_UART_Transmit>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
 800a51a:	e001      	b.n	800a520 <_write+0x50>
                HAL_MAX_DELAY);
    else
        status = HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? count : 0);
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <_write+0x5a>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	e000      	b.n	800a52c <_write+0x5c>
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	2000000d 	.word	0x2000000d
 800a538:	20006fc4 	.word	0x20006fc4

0800a53c <aiLogErr>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

void aiLogErr(const ai_error err, const char *fct)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
    if (fct)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d009      	beq.n	800a560 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 800a54c:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800a54e:	461a      	mov	r2, r3
                err.type, err.code);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <aiLogErr+0x40>)
 800a55a:	f005 fd3d 	bl	800ffd8 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 800a55e:	e008      	b.n	800a572 <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 800a560:	793b      	ldrb	r3, [r7, #4]
 800a562:	4619      	mov	r1, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a56a:	461a      	mov	r2, r3
 800a56c:	4804      	ldr	r0, [pc, #16]	; (800a580 <aiLogErr+0x44>)
 800a56e:	f005 fd33 	bl	800ffd8 <iprintf>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	080126b0 	.word	0x080126b0
 800a580:	080126d8 	.word	0x080126d8

0800a584 <aiBufferSize>:

ai_u32 aiBufferSize(const ai_buffer* buffer)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
    return buffer->height * buffer->width * buffer->channels;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	88db      	ldrh	r3, [r3, #6]
 800a590:	461a      	mov	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	891b      	ldrh	r3, [r3, #8]
 800a596:	fb03 f302 	mul.w	r3, r3, r2
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	fb03 f302 	mul.w	r3, r3, r2
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	145b      	asrs	r3, r3, #17
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	617b      	str	r3, [r7, #20]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
            msg, idx, buffer->height, buffer->width, buffer->channels);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	88db      	ldrh	r3, [r3, #6]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
 800a5cc:	4619      	mov	r1, r3
            msg, idx, buffer->height, buffer->width, buffer->channels);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	891b      	ldrh	r3, [r3, #8]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	9200      	str	r2, [sp, #0]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	68f9      	ldr	r1, [r7, #12]
 800a5e2:	4835      	ldr	r0, [pc, #212]	; (800a6b8 <aiPrintLayoutBuffer+0x108>)
 800a5e4:	f005 fcf8 	bl	800ffd8 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q)
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d12d      	bne.n	800a64a <aiPrintLayoutBuffer+0x9a>
        printf("Q%d.%d (%dbits, %s)",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	11db      	asrs	r3, r3, #7
 800a5f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a602:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
                   (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	15db      	asrs	r3, r3, #23
 800a60c:	f003 0301 	and.w	r3, r3, #1
                - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800a610:	440b      	add	r3, r1
        printf("Q%d.%d (%dbits, %s)",
 800a612:	1ad1      	subs	r1, r2, r3
                AI_BUFFER_FMT_GET_FBITS(buffer->format),
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        printf("Q%d.%d (%dbits, %s)",
 800a61e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format),
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	11db      	asrs	r3, r3, #7
        printf("Q%d.%d (%dbits, %s)",
 800a628:	f003 007f 	and.w	r0, r3, #127	; 0x7f
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"signed":"unsigned");
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf("Q%d.%d (%dbits, %s)",
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <aiPrintLayoutBuffer+0x8c>
 800a638:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <aiPrintLayoutBuffer+0x10c>)
 800a63a:	e000      	b.n	800a63e <aiPrintLayoutBuffer+0x8e>
 800a63c:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <aiPrintLayoutBuffer+0x110>)
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4603      	mov	r3, r0
 800a642:	4820      	ldr	r0, [pc, #128]	; (800a6c4 <aiPrintLayoutBuffer+0x114>)
 800a644:	f005 fcc8 	bl	800ffd8 <iprintf>
 800a648:	e018      	b.n	800a67c <aiPrintLayoutBuffer+0xcc>
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d112      	bne.n	800a676 <aiPrintLayoutBuffer+0xc6>
        printf("FLOAT (%dbits, %s)",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format),
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	11db      	asrs	r3, r3, #7
        printf("FLOAT (%dbits, %s)",
 800a656:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"signed":"unsigned");
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf("FLOAT (%dbits, %s)",
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <aiPrintLayoutBuffer+0xba>
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <aiPrintLayoutBuffer+0x10c>)
 800a668:	e000      	b.n	800a66c <aiPrintLayoutBuffer+0xbc>
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <aiPrintLayoutBuffer+0x110>)
 800a66c:	461a      	mov	r2, r3
 800a66e:	4816      	ldr	r0, [pc, #88]	; (800a6c8 <aiPrintLayoutBuffer+0x118>)
 800a670:	f005 fcb2 	bl	800ffd8 <iprintf>
 800a674:	e002      	b.n	800a67c <aiPrintLayoutBuffer+0xcc>
    else
        printf("NONE");
 800a676:	4815      	ldr	r0, [pc, #84]	; (800a6cc <aiPrintLayoutBuffer+0x11c>)
 800a678:	f005 fcae 	bl	800ffd8 <iprintf>
    printf(" size=%ldbytes\r\n", AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer),
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	461a      	mov	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	88db      	ldrh	r3, [r3, #6]
 800a686:	fb03 f302 	mul.w	r3, r3, r2
 800a68a:	461a      	mov	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	fb03 f302 	mul.w	r3, r3, r2
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6812      	ldr	r2, [r2, #0]
 800a698:	11d2      	asrs	r2, r2, #7
 800a69a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	08db      	lsrs	r3, r3, #3
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4809      	ldr	r0, [pc, #36]	; (800a6d0 <aiPrintLayoutBuffer+0x120>)
 800a6aa:	f005 fc95 	bl	800ffd8 <iprintf>
            buffer->format));
}
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	080126f8 	.word	0x080126f8
 800a6bc:	0801272c 	.word	0x0801272c
 800a6c0:	08012734 	.word	0x08012734
 800a6c4:	08012740 	.word	0x08012740
 800a6c8:	08012754 	.word	0x08012754
 800a6cc:	08012768 	.word	0x08012768
 800a6d0:	08012770 	.word	0x08012770

0800a6d4 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network configuration...\r\n");
 800a6dc:	484d      	ldr	r0, [pc, #308]	; (800a814 <aiPrintNetworkInfo+0x140>)
 800a6de:	f005 fcef 	bl	80100c0 <puts>
    printf(" Model name         : %s\r\n", report->model_name);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	484b      	ldr	r0, [pc, #300]	; (800a818 <aiPrintNetworkInfo+0x144>)
 800a6ea:	f005 fc75 	bl	800ffd8 <iprintf>
    printf(" Model signature    : %s\r\n", report->model_signature);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4849      	ldr	r0, [pc, #292]	; (800a81c <aiPrintNetworkInfo+0x148>)
 800a6f6:	f005 fc6f 	bl	800ffd8 <iprintf>
    printf(" Model datetime     : %s\r\n", report->model_datetime);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4847      	ldr	r0, [pc, #284]	; (800a820 <aiPrintNetworkInfo+0x14c>)
 800a702:	f005 fc69 	bl	800ffd8 <iprintf>
    printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	4619      	mov	r1, r3
 800a70c:	4845      	ldr	r0, [pc, #276]	; (800a824 <aiPrintNetworkInfo+0x150>)
 800a70e:	f005 fc63 	bl	800ffd8 <iprintf>
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6919      	ldr	r1, [r3, #16]
            report->runtime_version.major,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800a71a:	461a      	mov	r2, r3
            report->runtime_version.minor,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7d5b      	ldrb	r3, [r3, #21]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800a720:	4618      	mov	r0, r3
            report->runtime_version.micro);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7d9b      	ldrb	r3, [r3, #22]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	4603      	mov	r3, r0
 800a72a:	483f      	ldr	r0, [pc, #252]	; (800a828 <aiPrintNetworkInfo+0x154>)
 800a72c:	f005 fc54 	bl	800ffd8 <iprintf>
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6999      	ldr	r1, [r3, #24]
            report->tool_version.major,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7f1b      	ldrb	r3, [r3, #28]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800a738:	461a      	mov	r2, r3
            report->tool_version.minor,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	7f5b      	ldrb	r3, [r3, #29]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800a73e:	4618      	mov	r0, r3
            report->tool_version.micro);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7f9b      	ldrb	r3, [r3, #30]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	4603      	mov	r3, r0
 800a748:	4838      	ldr	r0, [pc, #224]	; (800a82c <aiPrintNetworkInfo+0x158>)
 800a74a:	f005 fc45 	bl	800ffd8 <iprintf>
    printf("Network info...\r\n");
 800a74e:	4838      	ldr	r0, [pc, #224]	; (800a830 <aiPrintNetworkInfo+0x15c>)
 800a750:	f005 fcb6 	bl	80100c0 <puts>
    printf("  nodes             : %ld\r\n", report->n_nodes);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a758:	4619      	mov	r1, r3
 800a75a:	4836      	ldr	r0, [pc, #216]	; (800a834 <aiPrintNetworkInfo+0x160>)
 800a75c:	f005 fc3c 	bl	800ffd8 <iprintf>
    printf("  complexity        : %ld MACC\r\n", report->n_macc);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	4619      	mov	r1, r3
 800a766:	4834      	ldr	r0, [pc, #208]	; (800a838 <aiPrintNetworkInfo+0x164>)
 800a768:	f005 fc36 	bl	800ffd8 <iprintf>
    printf("  activation        : %ld bytes\r\n",
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	333c      	adds	r3, #60	; 0x3c
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff ff07 	bl	800a584 <aiBufferSize>
 800a776:	4603      	mov	r3, r0
 800a778:	4619      	mov	r1, r3
 800a77a:	4830      	ldr	r0, [pc, #192]	; (800a83c <aiPrintNetworkInfo+0x168>)
 800a77c:	f005 fc2c 	bl	800ffd8 <iprintf>
            aiBufferSize(&report->activations));
    printf("  params            : %ld bytes\r\n",
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3350      	adds	r3, #80	; 0x50
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fefd 	bl	800a584 <aiBufferSize>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4619      	mov	r1, r3
 800a78e:	482c      	ldr	r0, [pc, #176]	; (800a840 <aiPrintNetworkInfo+0x16c>)
 800a790:	f005 fc22 	bl	800ffd8 <iprintf>
            aiBufferSize(&report->params));
    printf("  inputs/outputs    : %u/%u\r\n",
            report->n_inputs, report->n_outputs);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    printf("  inputs/outputs    : %u/%u\r\n",
 800a798:	4619      	mov	r1, r3
            report->n_inputs, report->n_outputs);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf("  inputs/outputs    : %u/%u\r\n",
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4828      	ldr	r0, [pc, #160]	; (800a844 <aiPrintNetworkInfo+0x170>)
 800a7a2:	f005 fc19 	bl	800ffd8 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	e00f      	b.n	800a7cc <aiPrintNetworkInfo+0xf8>
        aiPrintLayoutBuffer("   IN ", i, &report->inputs[i]);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	461a      	mov	r2, r3
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	4821      	ldr	r0, [pc, #132]	; (800a848 <aiPrintNetworkInfo+0x174>)
 800a7c2:	f7ff fef5 	bl	800a5b0 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	dbe9      	blt.n	800a7ac <aiPrintNetworkInfo+0xd8>
    for (i=0; i<report->n_outputs; i++)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e00f      	b.n	800a7fe <aiPrintNetworkInfo+0x12a>
        aiPrintLayoutBuffer("   OUT", i, &report->outputs[i]);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	4816      	ldr	r0, [pc, #88]	; (800a84c <aiPrintNetworkInfo+0x178>)
 800a7f4:	f7ff fedc 	bl	800a5b0 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a802:	461a      	mov	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4293      	cmp	r3, r2
 800a808:	dbe9      	blt.n	800a7de <aiPrintNetworkInfo+0x10a>
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	08012784 	.word	0x08012784
 800a818:	080127a0 	.word	0x080127a0
 800a81c:	080127bc 	.word	0x080127bc
 800a820:	080127d8 	.word	0x080127d8
 800a824:	080127f4 	.word	0x080127f4
 800a828:	08012810 	.word	0x08012810
 800a82c:	08012838 	.word	0x08012838
 800a830:	08012860 	.word	0x08012860
 800a834:	08012874 	.word	0x08012874
 800a838:	08012890 	.word	0x08012890
 800a83c:	080128b4 	.word	0x080128b4
 800a840:	080128d8 	.word	0x080128d8
 800a844:	080128fc 	.word	0x080128fc
 800a848:	0801291c 	.word	0x0801291c
 800a84c:	08012924 	.word	0x08012924

0800a850 <aiTestHeader>:
 * Test-related functions
 * -----------------------------------------------------------------------------
 */

void aiTestHeader(const char* tname, int major, int minor)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
    printf("\r\n#\r\n");
 800a85c:	480a      	ldr	r0, [pc, #40]	; (800a888 <aiTestHeader+0x38>)
 800a85e:	f005 fc2f 	bl	80100c0 <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	4808      	ldr	r0, [pc, #32]	; (800a88c <aiTestHeader+0x3c>)
 800a86a:	f005 fbb5 	bl	800ffd8 <iprintf>
    printf("#\r\n");
 800a86e:	4808      	ldr	r0, [pc, #32]	; (800a890 <aiTestHeader+0x40>)
 800a870:	f005 fc26 	bl	80100c0 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800a874:	2301      	movs	r3, #1
 800a876:	2203      	movs	r2, #3
 800a878:	2107      	movs	r1, #7
 800a87a:	4806      	ldr	r0, [pc, #24]	; (800a894 <aiTestHeader+0x44>)
 800a87c:	f005 fbac 	bl	800ffd8 <iprintf>
            __BUILD_NUMBER__
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	0801292c 	.word	0x0801292c
 800a88c:	08012934 	.word	0x08012934
 800a890:	08012944 	.word	0x08012944
 800a894:	08012948 	.word	0x08012948

0800a898 <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a2:	2221      	movs	r2, #33	; 0x21
 800a8a4:	4907      	ldr	r1, [pc, #28]	; (800a8c4 <write_packet+0x2c>)
 800a8a6:	4808      	ldr	r0, [pc, #32]	; (800a8c8 <write_packet+0x30>)
 800a8a8:	f7fe fa08 	bl	8008cbc <HAL_UART_Transmit>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK);
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bf0c      	ite	eq
 800a8b6:	2301      	moveq	r3, #1
 800a8b8:	2300      	movne	r3, #0
 800a8ba:	b2db      	uxtb	r3, r3
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20000958 	.word	0x20000958
 800a8c8:	20006fc4 	.word	0x20006fc4

0800a8cc <ioFlushWrite>:

void ioFlushWrite(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 800a8d0:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <ioFlushWrite+0x20>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <ioFlushWrite+0x20>)
 800a8dc:	701a      	strb	r2, [r3, #0]
    write_packet();
 800a8de:	f7ff ffdb 	bl	800a898 <write_packet>
    o_packet.pw = 0;
 800a8e2:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <ioFlushWrite+0x20>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000958 	.word	0x20000958

0800a8f0 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
    bool res = true;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
    uint8_t *pr = (uint8_t *)buf;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	613b      	str	r3, [r7, #16]

    UNUSED(stream);

    while (count) {
 800a904:	e025      	b.n	800a952 <write_callback+0x62>
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
            o_packet.payload[o_packet.pw] = *pr;
 800a906:	4b17      	ldr	r3, [pc, #92]	; (800a964 <write_callback+0x74>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	4619      	mov	r1, r3
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	4b14      	ldr	r3, [pc, #80]	; (800a964 <write_callback+0x74>)
 800a912:	440b      	add	r3, r1
 800a914:	705a      	strb	r2, [r3, #1]
            pr++;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	3301      	adds	r3, #1
 800a91a:	613b      	str	r3, [r7, #16]
            count--;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3b01      	subs	r3, #1
 800a920:	607b      	str	r3, [r7, #4]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800a922:	4b10      	ldr	r3, [pc, #64]	; (800a964 <write_callback+0x74>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <write_callback+0x74>)
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <write_callback+0x74>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b1f      	cmp	r3, #31
 800a934:	d802      	bhi.n	800a93c <write_callback+0x4c>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e4      	bne.n	800a906 <write_callback+0x16>
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <write_callback+0x74>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b20      	cmp	r3, #32
 800a942:	d106      	bne.n	800a952 <write_callback+0x62>
                res = write_packet();
 800a944:	f7ff ffa8 	bl	800a898 <write_packet>
 800a948:	4603      	mov	r3, r0
 800a94a:	75fb      	strb	r3, [r7, #23]
                o_packet.pw = 0;
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <write_callback+0x74>)
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
    while (count) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1ea      	bne.n	800a92e <write_callback+0x3e>
        }
    }
    return res;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000958 	.word	0x20000958

0800a968 <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295
 800a972:	2221      	movs	r2, #33	; 0x21
 800a974:	4909      	ldr	r1, [pc, #36]	; (800a99c <read_packet+0x34>)
 800a976:	480a      	ldr	r0, [pc, #40]	; (800a9a0 <read_packet+0x38>)
 800a978:	f7fe fa31 	bl	8008dde <HAL_UART_Receive>
 800a97c:	4603      	mov	r3, r0
 800a97e:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 800a980:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <read_packet+0x3c>)
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]

    return (status == HAL_OK);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	2000097c 	.word	0x2000097c
 800a9a0:	20006fc4 	.word	0x20006fc4
 800a9a4:	200009a0 	.word	0x200009a0

0800a9a8 <ioFlushRead>:

void ioFlushRead(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
    i_packet.pr = 0xFF;
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <ioFlushRead+0x1c>)
 800a9ae:	22ff      	movs	r2, #255	; 0xff
 800a9b0:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 800a9b2:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <ioFlushRead+0x20>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
}
 800a9b8:	bf00      	nop
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	2000097c 	.word	0x2000097c
 800a9c8:	200009a0 	.word	0x200009a0

0800a9cc <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
    bool res = true;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	77fb      	strb	r3, [r7, #31]
    uint8_t *pw = (uint8_t *)buf;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	61bb      	str	r3, [r7, #24]

    UNUSED(stream);

    if (count == 0)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <read_callback+0x1e>
        return true;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e045      	b.n	800aa76 <read_callback+0xaa>

    if (i_packet.pr == 0xFF)
 800a9ea:	4b25      	ldr	r3, [pc, #148]	; (800aa80 <read_callback+0xb4>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	2bff      	cmp	r3, #255	; 0xff
 800a9f0:	d103      	bne.n	800a9fa <read_callback+0x2e>
        res = read_packet();
 800a9f2:	f7ff ffb9 	bl	800a968 <read_packet>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	77fb      	strb	r3, [r7, #31]

    if (res == false)
 800a9fa:	7ffb      	ldrb	r3, [r7, #31]
 800a9fc:	f083 0301 	eor.w	r3, r3, #1
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d033      	beq.n	800aa6e <read_callback+0xa2>
        return res;
 800aa06:	7ffb      	ldrb	r3, [r7, #31]
 800aa08:	e035      	b.n	800aa76 <read_callback+0xaa>

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 800aa0a:	4b1e      	ldr	r3, [pc, #120]	; (800aa84 <read_callback+0xb8>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a1c      	ldr	r2, [pc, #112]	; (800aa80 <read_callback+0xb4>)
 800aa10:	4413      	add	r3, r2
 800aa12:	785a      	ldrb	r2, [r3, #1]
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	701a      	strb	r2, [r3, #0]
            pw++;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	61bb      	str	r3, [r7, #24]
            count--;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	607b      	str	r3, [r7, #4]
            i_ridx++;
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <read_callback+0xb8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	4a16      	ldr	r2, [pc, #88]	; (800aa84 <read_callback+0xb8>)
 800aa2c:	6013      	str	r3, [r2, #0]
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800aa2e:	4b14      	ldr	r3, [pc, #80]	; (800aa80 <read_callback+0xb4>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	4b12      	ldr	r3, [pc, #72]	; (800aa80 <read_callback+0xb4>)
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <read_callback+0xb4>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <read_callback+0x7c>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e0      	bne.n	800aa0a <read_callback+0x3e>
        }
        if (count && i_packet.pr == 0) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00f      	beq.n	800aa6e <read_callback+0xa2>
 800aa4e:	4b0c      	ldr	r3, [pc, #48]	; (800aa80 <read_callback+0xb4>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10b      	bne.n	800aa6e <read_callback+0xa2>
            uint8_t sync = 0xAA;
 800aa56:	23aa      	movs	r3, #170	; 0xaa
 800aa58:	75fb      	strb	r3, [r7, #23]
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 800aa5a:	f107 0117 	add.w	r1, r7, #23
 800aa5e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa62:	2201      	movs	r2, #1
 800aa64:	4808      	ldr	r0, [pc, #32]	; (800aa88 <read_callback+0xbc>)
 800aa66:	f7fe f929 	bl	8008cbc <HAL_UART_Transmit>
                        HAL_MAX_DELAY);
            read_packet();
 800aa6a:	f7ff ff7d 	bl	800a968 <read_packet>
    while (count) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e2      	bne.n	800aa3a <read_callback+0x6e>
        }
    }

    return res;
 800aa74:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3720      	adds	r7, #32
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	2000097c 	.word	0x2000097c
 800aa84:	200009a0 	.word	0x200009a0
 800aa88:	20006fc4 	.word	0x20006fc4

0800aa8c <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 800aa8c:	b4b0      	push	{r4, r5, r7}
 800aa8e:	b089      	sub	sp, #36	; 0x24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	609a      	str	r2, [r3, #8]
 800aaa2:	60da      	str	r2, [r3, #12]
 800aaa4:	611a      	str	r2, [r3, #16]
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <pb_ostream_to_uart+0x44>)
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	f04f 33ff 	mov.w	r3, #4294967295
 800aab2:	617b      	str	r3, [r7, #20]
    return stream;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	461d      	mov	r5, r3
 800aab8:	f107 040c 	add.w	r4, r7, #12
 800aabc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aabe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	602b      	str	r3, [r5, #0]
}
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	3724      	adds	r7, #36	; 0x24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bcb0      	pop	{r4, r5, r7}
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	0800a8f1 	.word	0x0800a8f1

0800aad4 <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 800aad4:	b490      	push	{r4, r7}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	605a      	str	r2, [r3, #4]
 800aae8:	609a      	str	r2, [r3, #8]
 800aaea:	60da      	str	r2, [r3, #12]
 800aaec:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <pb_istream_from_uart+0x40>)
 800aaee:	60bb      	str	r3, [r7, #8]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf8:	613b      	str	r3, [r7, #16]
    return stream;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	461c      	mov	r4, r3
 800aafe:	f107 0308 	add.w	r3, r7, #8
 800ab02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc90      	pop	{r4, r7}
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	0800a9cd 	.word	0x0800a9cd

0800ab18 <aiOnExecNode_cb>:
#endif

#ifdef HAS_INSPECTOR
static void aiOnExecNode_cb(const ai_handle cookie,
        const ai_inspect_node_info* node_info,
        ai_node_exec_stage stage) {
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	b08a      	sub	sp, #40	; 0x28
 800ab1e:	af02      	add	r7, sp, #8
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	4613      	mov	r3, r2
 800ab26:	71fb      	strb	r3, [r7, #7]

    struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	61bb      	str	r3, [r7, #24]

    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d117      	bne.n	800ab62 <aiOnExecNode_cb+0x4a>
        ctx->n_cb_in++;
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        ctx->tcom += dwtGetCycles();
 800ab40:	f7ff fa82 	bl	800a048 <dwtGetCycles>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	f04f 0600 	mov.w	r6, #0
 800ab50:	186b      	adds	r3, r5, r1
 800ab52:	eb46 0402 	adc.w	r4, r6, r2
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
        dwtReset();
 800ab5c:	f7ff fa68 	bl	800a030 <dwtReset>
                type | node_info->type,
                node_info->id,
                dwtCyclesToFloatMs(dur),
                &node_info->out[0]);
    }
}
 800ab60:	e058      	b.n	800ac14 <aiOnExecNode_cb+0xfc>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d155      	bne.n	800ac14 <aiOnExecNode_cb+0xfc>
        uint32_t dur = dwtGetCycles();
 800ab68:	f7ff fa6e 	bl	800a048 <dwtGetCycles>
 800ab6c:	6178      	str	r0, [r7, #20]
        dwtReset();
 800ab6e:	f7ff fa5f 	bl	800a030 <dwtReset>
        ctx->tnodes += dur;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	e9d3 1238 	ldrd	r1, r2, [r3, #224]	; 0xe0
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	461d      	mov	r5, r3
 800ab7c:	f04f 0600 	mov.w	r6, #0
 800ab80:	186b      	adds	r3, r5, r1
 800ab82:	eb46 0402 	adc.w	r4, r6, r2
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
        ctx->n_cb_out++;
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        if (ctx->n_cb_out == ctx->report.n_nodes)
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d102      	bne.n	800abae <aiOnExecNode_cb+0x96>
            type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 800aba8:	2302      	movs	r3, #2
 800abaa:	61fb      	str	r3, [r7, #28]
 800abac:	e001      	b.n	800abb2 <aiOnExecNode_cb+0x9a>
            type = EnumLayerType_LAYER_TYPE_INTERNAL;
 800abae:	2301      	movs	r3, #1
 800abb0:	61fb      	str	r3, [r7, #28]
        type = type << 16;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	041b      	lsls	r3, r3, #16
 800abb6:	61fb      	str	r3, [r7, #28]
        if (ctx->no_data)
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <aiOnExecNode_cb+0xb2>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abc8:	61fb      	str	r3, [r7, #28]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
                type | node_info->type,
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	ea42 0803 	orr.w	r8, r2, r3
                node_info->id,
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	885b      	ldrh	r3, [r3, #2]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f04f 0400 	mov.w	r4, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	4621      	mov	r1, r4
 800abf2:	f7ff fa3d 	bl	800a070 <dwtCyclesToFloatMs>
 800abf6:	eef0 7a40 	vmov.f32	s15, s0
                &node_info->out[0]);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	695b      	ldr	r3, [r3, #20]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	eeb0 0a67 	vmov.f32	s0, s15
 800ac08:	4643      	mov	r3, r8
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f7fe ff6e 	bl	8009af0 <aiPbMgrSendAiBuffer3>
}
 800ac14:	bf00      	nop
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ac20 <aiExecCtx>:
#endif


static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
    struct ai_network_exec_ctx *cur = NULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]

    if (!nn_name)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <aiExecCtx+0x18>
        return NULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e046      	b.n	800acc6 <aiExecCtx+0xa6>

    if (!nn_name[0]) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10d      	bne.n	800ac5c <aiExecCtx+0x3c>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	db3e      	blt.n	800acc4 <aiExecCtx+0xa4>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dc3b      	bgt.n	800acc4 <aiExecCtx+0xa4>
            cur = &net_exec_ctx[pos];
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	22e8      	movs	r2, #232	; 0xe8
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <aiExecCtx+0xb0>)
 800ac56:	4413      	add	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
 800ac5a:	e033      	b.n	800acc4 <aiExecCtx+0xa4>
    } else {
        int idx;
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60bb      	str	r3, [r7, #8]
 800ac60:	e02b      	b.n	800acba <aiExecCtx+0x9a>
            cur = &net_exec_ctx[idx];
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	22e8      	movs	r2, #232	; 0xe8
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	4a19      	ldr	r2, [pc, #100]	; (800acd0 <aiExecCtx+0xb0>)
 800ac6c:	4413      	add	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
            if (cur->network &&
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01b      	beq.n	800acb0 <aiExecCtx+0x90>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fb f908 	bl	8005e92 <strlen>
 800ac82:	4604      	mov	r4, r0
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7fb f904 	bl	8005e92 <strlen>
 800ac8a:	4603      	mov	r3, r0
            if (cur->network &&
 800ac8c:	429c      	cmp	r4, r3
 800ac8e:	d10f      	bne.n	800acb0 <aiExecCtx+0x90>
                    (strncmp(cur->report.model_name, nn_name,
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	685c      	ldr	r4, [r3, #4]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fb f8fa 	bl	8005e92 <strlen>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4620      	mov	r0, r4
 800aca6:	f005 fa2b 	bl	8010100 <strncmp>
 800acaa:	4603      	mov	r3, r0
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800acac:	2b00      	cmp	r3, #0
 800acae:	d008      	beq.n	800acc2 <aiExecCtx+0xa2>
                            strlen(cur->report.model_name)) == 0)) {
                break;
            }
            cur = NULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	ddd0      	ble.n	800ac62 <aiExecCtx+0x42>
 800acc0:	e000      	b.n	800acc4 <aiExecCtx+0xa4>
                break;
 800acc2:	bf00      	nop
        }
    }
    return cur;
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	bd90      	pop	{r4, r7, pc}
 800acce:	bf00      	nop
 800acd0:	200009a8 	.word	0x200009a8

0800acd4 <aiSetPbContext>:

__STATIC_INLINE
void aiSetPbContext(struct ai_network_exec_ctx *ctx,
        const reqMsg *creq, respMsg *cresp)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d008      	beq.n	800acf8 <aiSetPbContext+0x24>
        return;

    ctx->creq = creq;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    ctx->cresp = cresp;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800acf6:	e000      	b.n	800acfa <aiSetPbContext+0x26>
        return;
 800acf8:	bf00      	nop
#endif
}
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 800ad04:	b5b0      	push	{r4, r5, r7, lr}
 800ad06:	b08e      	sub	sp, #56	; 0x38
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
    ai_error err;

    /* Creating the network */
    printf("Creating the network \"%s\"..\r\n", nn_name);
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4855      	ldr	r0, [pc, #340]	; (800ae68 <aiBootstrap+0x164>)
 800ad12:	f005 f961 	bl	800ffd8 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	22e8      	movs	r2, #232	; 0xe8
 800ad1a:	fb02 f303 	mul.w	r3, r2, r3
 800ad1e:	4a53      	ldr	r2, [pc, #332]	; (800ae6c <aiBootstrap+0x168>)
 800ad20:	4413      	add	r3, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f003 fb0a 	bl	800e340 <ai_mnetwork_create>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type) {
 800ad30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d006      	beq.n	800ad46 <aiBootstrap+0x42>
        aiLogErr(err, "ai_mnetwork_create");
 800ad38:	494d      	ldr	r1, [pc, #308]	; (800ae70 <aiBootstrap+0x16c>)
 800ad3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad3c:	f7ff fbfe 	bl	800a53c <aiLogErr>
        return -1;
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e08b      	b.n	800ae5e <aiBootstrap+0x15a>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 800ad46:	4a49      	ldr	r2, [pc, #292]	; (800ae6c <aiBootstrap+0x168>)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	21e8      	movs	r1, #232	; 0xe8
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	4413      	add	r3, r2
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	22e8      	movs	r2, #232	; 0xe8
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
 800ad5c:	4a43      	ldr	r2, [pc, #268]	; (800ae6c <aiBootstrap+0x168>)
 800ad5e:	4413      	add	r3, r2
 800ad60:	3304      	adds	r3, #4
 800ad62:	4619      	mov	r1, r3
 800ad64:	f003 fb7a 	bl	800e45c <ai_mnetwork_get_info>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d02c      	beq.n	800adc8 <aiBootstrap+0xc4>
            &net_exec_ctx[idx].report)) {
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	22e8      	movs	r2, #232	; 0xe8
 800ad72:	fb02 f303 	mul.w	r3, r2, r3
 800ad76:	4a3d      	ldr	r2, [pc, #244]	; (800ae6c <aiBootstrap+0x168>)
 800ad78:	4413      	add	r3, r2
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff fca9 	bl	800a6d4 <aiPrintNetworkInfo>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
        return -2;
    }

    /* Initialize the instance */
    printf("Initializing the network\r\n");
 800ad82:	483c      	ldr	r0, [pc, #240]	; (800ae74 <aiBootstrap+0x170>)
 800ad84:	f005 f99c 	bl	80100c0 <puts>
    /* build params structure to provide the reference of the
     * activation and weight buffers */
    const ai_network_params params = {
 800ad88:	4b3b      	ldr	r3, [pc, #236]	; (800ae78 <aiBootstrap+0x174>)
 800ad8a:	f107 040c 	add.w	r4, r7, #12
 800ad8e:	461d      	mov	r5, r3
 800ad90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ad9c:	e884 0003 	stmia.w	r4, {r0, r1}
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };

    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 800ada0:	4a32      	ldr	r2, [pc, #200]	; (800ae6c <aiBootstrap+0x168>)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	21e8      	movs	r1, #232	; 0xe8
 800ada6:	fb01 f303 	mul.w	r3, r1, r3
 800adaa:	4413      	add	r3, r2
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f107 020c 	add.w	r2, r7, #12
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f003 fb8c 	bl	800e4d2 <ai_mnetwork_init>
 800adba:	4603      	mov	r3, r0
 800adbc:	f083 0301 	eor.w	r3, r3, #1
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d04a      	beq.n	800ae5c <aiBootstrap+0x158>
 800adc6:	e024      	b.n	800ae12 <aiBootstrap+0x10e>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800adc8:	4a28      	ldr	r2, [pc, #160]	; (800ae6c <aiBootstrap+0x168>)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	21e8      	movs	r1, #232	; 0xe8
 800adce:	fb01 f303 	mul.w	r3, r1, r3
 800add2:	4413      	add	r3, r2
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f003 fb5b 	bl	800e492 <ai_mnetwork_get_error>
 800addc:	4603      	mov	r3, r0
 800adde:	637b      	str	r3, [r7, #52]	; 0x34
        aiLogErr(err, "ai_mnetwork_get_info");
 800ade0:	4926      	ldr	r1, [pc, #152]	; (800ae7c <aiBootstrap+0x178>)
 800ade2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ade4:	f7ff fbaa 	bl	800a53c <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800ade8:	4a20      	ldr	r2, [pc, #128]	; (800ae6c <aiBootstrap+0x168>)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	21e8      	movs	r1, #232	; 0xe8
 800adee:	fb01 f303 	mul.w	r3, r1, r3
 800adf2:	4413      	add	r3, r2
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f003 fb0e 	bl	800e418 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800adfc:	4a1b      	ldr	r2, [pc, #108]	; (800ae6c <aiBootstrap+0x168>)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	21e8      	movs	r1, #232	; 0xe8
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	4413      	add	r3, r2
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
        return -2;
 800ae0c:	f06f 0301 	mvn.w	r3, #1
 800ae10:	e025      	b.n	800ae5e <aiBootstrap+0x15a>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800ae12:	4a16      	ldr	r2, [pc, #88]	; (800ae6c <aiBootstrap+0x168>)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	21e8      	movs	r1, #232	; 0xe8
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	4413      	add	r3, r2
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f003 fb36 	bl	800e492 <ai_mnetwork_get_error>
 800ae26:	4603      	mov	r3, r0
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
        aiLogErr(err, "ai_mnetwork_init");
 800ae2a:	4915      	ldr	r1, [pc, #84]	; (800ae80 <aiBootstrap+0x17c>)
 800ae2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae2e:	f7ff fb85 	bl	800a53c <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 800ae32:	4a0e      	ldr	r2, [pc, #56]	; (800ae6c <aiBootstrap+0x168>)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	21e8      	movs	r1, #232	; 0xe8
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f003 fae9 	bl	800e418 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800ae46:	4a09      	ldr	r2, [pc, #36]	; (800ae6c <aiBootstrap+0x168>)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	21e8      	movs	r1, #232	; 0xe8
 800ae4c:	fb01 f303 	mul.w	r3, r1, r3
 800ae50:	4413      	add	r3, r2
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
        return -4;
 800ae56:	f06f 0303 	mvn.w	r3, #3
 800ae5a:	e000      	b.n	800ae5e <aiBootstrap+0x15a>
    }
    return 0;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3738      	adds	r7, #56	; 0x38
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bdb0      	pop	{r4, r5, r7, pc}
 800ae66:	bf00      	nop
 800ae68:	08012968 	.word	0x08012968
 800ae6c:	200009a8 	.word	0x200009a8
 800ae70:	08012988 	.word	0x08012988
 800ae74:	080129b4 	.word	0x080129b4
 800ae78:	080129e4 	.word	0x080129e4
 800ae7c:	0801299c 	.word	0x0801299c
 800ae80:	080129d0 	.word	0x080129d0

0800ae84 <aiInspectorGetReport>:

#ifdef HAS_INSPECTOR
static int aiInspectorGetReport(struct ai_network_exec_ctx *ctx)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
    int res = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
    if (!ctx)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d102      	bne.n	800ae9c <aiInspectorGetReport+0x18>
        return -1;
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	e01c      	b.n	800aed6 <aiInspectorGetReport+0x52>

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d017      	beq.n	800aed4 <aiInspectorGetReport+0x50>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d012      	beq.n	800aed4 <aiInspectorGetReport+0x50>
    {
        if (ai_inspector_get_report(ctx->inspector,
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3378      	adds	r3, #120	; 0x78
 800aebc:	461a      	mov	r2, r3
 800aebe:	f7f5 fabd 	bl	800043c <ai_inspector_get_report>
 800aec2:	4603      	mov	r3, r0
                ctx->net_id, &ctx->inspector_report) != true)
 800aec4:	f083 0301 	eor.w	r3, r3, #1
 800aec8:	b2db      	uxtb	r3, r3
        if (ai_inspector_get_report(ctx->inspector,
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <aiInspectorGetReport+0x50>
            res = -2;
 800aece:	f06f 0301 	mvn.w	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
    }
    return res;
 800aed4:	68fb      	ldr	r3, [r7, #12]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <aiInspectorSendReport>:


static void aiInspectorSendReport(const reqMsg *req, respMsg *resp,
        EnumState state, struct ai_network_exec_ctx *ctx,
        const ai_float dur_ms)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b088      	sub	sp, #32
 800aee2:	af02      	add	r7, sp, #8
 800aee4:	6178      	str	r0, [r7, #20]
 800aee6:	6139      	str	r1, [r7, #16]
 800aee8:	60bb      	str	r3, [r7, #8]
 800aeea:	ed87 0a01 	vstr	s0, [r7, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_INSPECTOR
    if (aiInspectorGetReport(ctx) == 0) {
 800aef2:	68b8      	ldr	r0, [r7, #8]
 800aef4:	f7ff ffc6 	bl	800ae84 <aiInspectorGetReport>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d120      	bne.n	800af40 <aiInspectorSendReport+0x62>
        resp->which_payload = respMsg_report_tag;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2215      	movs	r2, #21
 800af02:	80da      	strh	r2, [r3, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	609a      	str	r2, [r3, #8]
        resp->payload.report.elapsed_ms = dur_ms;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	619a      	str	r2, [r3, #24]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	615a      	str	r2, [r3, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	60da      	str	r2, [r3, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	611a      	str	r2, [r3, #16]
        aiPbMgrSendResp(req, resp, state);
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	461a      	mov	r2, r3
 800af32:	6939      	ldr	r1, [r7, #16]
 800af34:	6978      	ldr	r0, [r7, #20]
 800af36:	f7fe fc19 	bl	800976c <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 800af3a:	f7fe fc51 	bl	80097e0 <aiPbMgrWaitAck>
    } else {
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_GENERIC, EnumError_E_GENERIC);
    }
#endif
}
 800af3e:	e007      	b.n	800af50 <aiInspectorSendReport+0x72>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800af40:	230a      	movs	r3, #10
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	230a      	movs	r3, #10
 800af46:	2204      	movs	r2, #4
 800af48:	6939      	ldr	r1, [r7, #16]
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7fe fc2c 	bl	80097a8 <aiPbMgrSendAck>
}
 800af50:	bf00      	nop
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <aiInspectorUnBind>:


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d016      	beq.n	800af94 <aiInspectorUnBind+0x3c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <aiInspectorUnBind+0x32>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <aiInspectorUnBind+0x32>
        ai_inspector_unbind_network(ctx->inspector,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7f5 fa0f 	bl	80003a8 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800af92:	e000      	b.n	800af96 <aiInspectorUnBind+0x3e>
        return;
 800af94:	bf00      	nop
#endif
}
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <aiInspectorBind>:

static int aiInspectorBind(struct ai_network_exec_ctx *ctx)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
    int res = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]
#ifdef HAS_INSPECTOR
    if (!ctx)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <aiInspectorBind+0x16>
        return 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	e024      	b.n	800affc <aiInspectorBind+0x60>

    aiInspectorUnBind(ctx);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff ffd0 	bl	800af58 <aiInspectorUnBind>

    ctx->n_cb_in  = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    ctx->n_cb_out = 0;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    if (ctx->inspector) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d014      	beq.n	800affa <aiInspectorBind+0x5e>
        ctx->net_id = ai_inspector_bind_network(
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                ctx->inspector,
                &ctx->entry);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3390      	adds	r3, #144	; 0x90
        ctx->net_id = ai_inspector_bind_network(
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7f5 f9a3 	bl	8000326 <ai_inspector_bind_network>
 800afe0:	4603      	mov	r3, r0
 800afe2:	461a      	mov	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        if (ctx->net_id == AI_INSPECTOR_NETWORK_BIND_FAILED)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <aiInspectorBind+0x5e>
            res = -1;
 800aff4:	f04f 33ff 	mov.w	r3, #4294967295
 800aff8:	60fb      	str	r3, [r7, #12]
    }

#endif
    return res;
 800affa:	68fb      	ldr	r3, [r7, #12]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <aiInspectorInitAndBind>:

static int aiInspectorInitAndBind(struct ai_network_exec_ctx *ctx)
{
 800b004:	b5b0      	push	{r4, r5, r7, lr}
 800b006:	b092      	sub	sp, #72	; 0x48
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    ctx->n_cb_in  = 0;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    ctx->n_cb_out = 0;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    ai_inspector_config cfg = ai_inspector_default_config();
 800b01c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b020:	4618      	mov	r0, r3
 800b022:	f7f5 f90d 	bl	8000240 <ai_inspector_default_config>

    cfg.log_level = LOG_SUDO;
 800b026:	2300      	movs	r3, #0
 800b028:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    cfg.log_quiet = false;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    cfg.on_report_destroy = NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	63fb      	str	r3, [r7, #60]	; 0x3c
    cfg.on_exec_node = &aiOnExecNode_cb;
 800b036:	4b1d      	ldr	r3, [pc, #116]	; (800b0ac <aiInspectorInitAndBind+0xa8>)
 800b038:	643b      	str	r3, [r7, #64]	; 0x40
    cfg.cookie = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    ai_handle phandle;
    ai_network_params pparams;

    if (ctx->network == AI_HANDLE_NULL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <aiInspectorInitAndBind+0x48>
        return -1;
 800b046:	f04f 33ff 	mov.w	r3, #4294967295
 800b04a:	e02a      	b.n	800b0a2 <aiInspectorInitAndBind+0x9e>

    ai_mnetwork_get_private_handle(ctx->network,
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f107 020c 	add.w	r2, r7, #12
 800b054:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b058:	4618      	mov	r0, r3
 800b05a:	f003 faa3 	bl	800e5a4 <ai_mnetwork_get_private_handle>
            &phandle,
            &pparams);

    cfg.cookie = (ai_handle)ctx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	647b      	str	r3, [r7, #68]	; 0x44

    if (ai_inspector_create(&ctx->inspector, &cfg) )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3370      	adds	r3, #112	; 0x70
 800b066:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f5 f8fd 	bl	800026c <ai_inspector_create>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d013      	beq.n	800b0a0 <aiInspectorInitAndBind+0x9c>
    {
        ctx->entry.handle = phandle;
 800b078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->entry.params = pparams;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800b086:	f107 050c 	add.w	r5, r7, #12
 800b08a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b08c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b08e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b092:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b096:	e884 0003 	stmia.w	r4, {r0, r1}
        aiInspectorBind(ctx);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff ff7e 	bl	800af9c <aiInspectorBind>
    }


#endif
    return 0;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3748      	adds	r7, #72	; 0x48
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	0800ab19 	.word	0x0800ab19

0800b0b0 <aiInspectorUnbindAndDestroy>:

static int aiInspectorUnbindAndDestroy(struct ai_network_exec_ctx *ctx)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    aiInspectorUnBind(ctx);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff ff4d 	bl	800af58 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <aiInspectorUnbindAndDestroy+0x20>
        ai_inspector_destroy(ctx->inspector);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f5 f900 	bl	80002d0 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    return 0;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <aiInit>:


static int aiInit(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af04      	add	r7, sp, #16
    int res = -1;
 800b0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ea:	60fb      	str	r3, [r7, #12]
    const char *nn_name;
    int idx;

    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2304      	movs	r3, #4
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4824      	ldr	r0, [pc, #144]	; (800b190 <aiInit+0xb0>)
 800b100:	f004 ff6a 	bl	800ffd8 <iprintf>
            AI_PLATFORM_RUNTIME_MAJOR,
            AI_PLATFORM_RUNTIME_MINOR,
            AI_PLATFORM_RUNTIME_MICRO);

    /* Clean all network exec context */
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800b104:	2300      	movs	r3, #0
 800b106:	607b      	str	r3, [r7, #4]
 800b108:	e01c      	b.n	800b144 <aiInit+0x64>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 800b10a:	4a22      	ldr	r2, [pc, #136]	; (800b194 <aiInit+0xb4>)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	21e8      	movs	r1, #232	; 0xe8
 800b110:	fb01 f303 	mul.w	r3, r1, r3
 800b114:	4413      	add	r3, r2
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
#ifdef HAS_INSPECTOR
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 800b11a:	4a1e      	ldr	r2, [pc, #120]	; (800b194 <aiInit+0xb4>)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	21e8      	movs	r1, #232	; 0xe8
 800b120:	fb01 f303 	mul.w	r3, r1, r3
 800b124:	4413      	add	r3, r2
 800b126:	3370      	adds	r3, #112	; 0x70
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 800b12c:	4a19      	ldr	r2, [pc, #100]	; (800b194 <aiInit+0xb4>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	21e8      	movs	r1, #232	; 0xe8
 800b132:	fb01 f303 	mul.w	r3, r1, r3
 800b136:	4413      	add	r3, r2
 800b138:	3374      	adds	r3, #116	; 0x74
 800b13a:	2200      	movs	r2, #0
 800b13c:	801a      	strh	r2, [r3, #0]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3301      	adds	r3, #1
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	dddf      	ble.n	800b10a <aiInit+0x2a>
#endif
    }

    /* Discover and init the embedded network */
    idx = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	2000      	movs	r0, #0
 800b152:	f003 f8c5 	bl	800e2e0 <ai_mnetwork_find>
 800b156:	60b8      	str	r0, [r7, #8]
        if (nn_name) {
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00d      	beq.n	800b17a <aiInit+0x9a>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <aiInit+0xb8>)
 800b162:	f004 ff39 	bl	800ffd8 <iprintf>
            res = aiBootstrap(nn_name, idx);
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	68b8      	ldr	r0, [r7, #8]
 800b16a:	f7ff fdcb 	bl	800ad04 <aiBootstrap>
 800b16e:	60f8      	str	r0, [r7, #12]
            if (res)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <aiInit+0x9a>
                nn_name = NULL;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
        }
        idx++;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3301      	adds	r3, #1
 800b17e:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e3      	bne.n	800b14e <aiInit+0x6e>

    return res;
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	08012a0c 	.word	0x08012a0c
 800b194:	200009a8 	.word	0x200009a8
 800b198:	08012a40 	.word	0x08012a40

0800b19c <aiPbCmdNNInfo>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
    struct ai_network_exec_ctx *ctx;

    UNUSED(param);

    ctx = aiExecCtx(req->name, req->param);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f103 020c 	add.w	r2, r3, #12
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7ff fd33 	bl	800ac20 <aiExecCtx>
 800b1ba:	6178      	str	r0, [r7, #20]
    if (ctx)
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d007      	beq.n	800b1d2 <aiPbCmdNNInfo+0x36>
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
                &ctx->report);
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	3304      	adds	r3, #4
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	68b9      	ldr	r1, [r7, #8]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7fe fe36 	bl	8009e3c <aiPbMgrSendNNInfo>
    else
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800b1d0:	e007      	b.n	800b1e2 <aiPbCmdNNInfo+0x46>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800b1d2:	2304      	movs	r3, #4
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2304      	movs	r3, #4
 800b1d8:	2204      	movs	r2, #4
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7fe fae3 	bl	80097a8 <aiPbMgrSendAck>
}
 800b1e2:	bf00      	nop
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 800b1ec:	b5b0      	push	{r4, r5, r7, lr}
 800b1ee:	b096      	sub	sp, #88	; 0x58
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
    ai_i32 batch;
    uint32_t tend;
    bool res;
    struct ai_network_exec_ctx *ctx;
    bool inspector_mode = false;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    ai_buffer ai_input[1];
    ai_buffer ai_output[1];

    UNUSED(param);

    ctx = aiExecCtx(req->name, -1);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	330c      	adds	r3, #12
 800b202:	f04f 31ff 	mov.w	r1, #4294967295
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff fd0a 	bl	800ac20 <aiExecCtx>
 800b20c:	64b8      	str	r0, [r7, #72]	; 0x48
    if (!ctx) {
 800b20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b210:	2b00      	cmp	r3, #0
 800b212:	d108      	bne.n	800b226 <aiPbCmdNNRun+0x3a>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800b214:	2304      	movs	r3, #4
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	2304      	movs	r3, #4
 800b21a:	2204      	movs	r2, #4
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7fe fac2 	bl	80097a8 <aiPbMgrSendAck>
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        return;
 800b224:	e0d6      	b.n	800b3d4 <aiPbCmdNNRun+0x1e8>
    }

#ifdef HAS_INSPECTOR
    ctx->no_data = false;
 800b226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <aiPbCmdNNRun+0x54>
            EnumRunParam_P_RUN_MODE_INSPECTOR)
        inspector_mode = true;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <aiPbCmdNNRun+0x6e>
            EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
        inspector_mode = true;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        ctx->no_data = true;
 800b252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b254:	2201      	movs	r2, #1
 800b256:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    }

    ctx->tcom = 0ULL;
 800b25a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	f04f 0400 	mov.w	r4, #0
 800b264:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    ctx->tnodes = 0ULL;
 800b268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	f04f 0400 	mov.w	r4, #0
 800b272:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
#endif

    ai_input[0] = ctx->report.inputs[0];
 800b276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800b27e:	461d      	mov	r5, r3
 800b280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	6023      	str	r3, [r4, #0]
    ai_output[0] = ctx->report.outputs[0];
 800b288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28c:	f107 0410 	add.w	r4, r7, #16
 800b290:	461d      	mov	r5, r3
 800b292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	6023      	str	r3, [r4, #0]

    ai_input[0].n_batches  = 1;
 800b29a:	2301      	movs	r3, #1
 800b29c:	853b      	strh	r3, [r7, #40]	; 0x28
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800b29e:	4b4f      	ldr	r3, [pc, #316]	; (800b3dc <aiPbCmdNNRun+0x1f0>)
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34
    ai_output[0].n_batches = 1;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	82bb      	strh	r3, [r7, #20]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800b2a6:	4b4e      	ldr	r3, [pc, #312]	; (800b3e0 <aiPbCmdNNRun+0x1f4>)
 800b2a8:	623b      	str	r3, [r7, #32]

    /* 1 Send a ACK (ready to receive a buffer) */
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 800b2aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fab0 	bl	8009814 <aiPbAiBufferSize>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	2201      	movs	r2, #1
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fe fa71 	bl	80097a8 <aiPbMgrSendAck>
            aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

    /* 2 Read buffer */
    res = aiPbMgrReceiveAiBuffer3(req, resp, EnumState_S_PROCESSING,
 800b2c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7fe fbb8 	bl	8009a44 <aiPbMgrReceiveAiBuffer3>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            &ai_input[0]);
    if (res != true)
 800b2da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b2de:	f083 0301 	eor.w	r3, r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d174      	bne.n	800b3d2 <aiPbCmdNNRun+0x1e6>
        return;

    ints = disableInts();
 800b2e8:	f7ff f8d2 	bl	800a490 <disableInts>
 800b2ec:	6438      	str	r0, [r7, #64]	; 0x40

    /* Update the PN context for inspector callbacks */
    aiSetPbContext(ctx, req, resp);
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b2f4:	f7ff fcee 	bl	800acd4 <aiSetPbContext>

    if (inspector_mode)
 800b2f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <aiPbCmdNNRun+0x11a>
        aiInspectorInitAndBind(ctx);
 800b300:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b302:	f7ff fe7f 	bl	800b004 <aiInspectorInitAndBind>

    /* Processing */
    dwtReset();
 800b306:	f7fe fe93 	bl	800a030 <dwtReset>

    batch = ai_mnetwork_run(ctx->network,
 800b30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f107 0210 	add.w	r2, r7, #16
 800b312:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b316:	4618      	mov	r0, r3
 800b318:	f003 f928 	bl	800e56c <ai_mnetwork_run>
 800b31c:	63f8      	str	r0, [r7, #60]	; 0x3c
            &ai_input[0], &ai_output[0]);
    if (batch != 1) {
 800b31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b320:	2b01      	cmp	r3, #1
 800b322:	d012      	beq.n	800b34a <aiPbCmdNNRun+0x15e>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 800b324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f003 f8b2 	bl	800e492 <ai_mnetwork_get_error>
 800b32e:	4603      	mov	r3, r0
 800b330:	492c      	ldr	r1, [pc, #176]	; (800b3e4 <aiPbCmdNNRun+0x1f8>)
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff f902 	bl	800a53c <aiLogErr>
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800b338:	230a      	movs	r3, #10
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	230a      	movs	r3, #10
 800b33e:	2204      	movs	r2, #4
 800b340:	68b9      	ldr	r1, [r7, #8]
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7fe fa30 	bl	80097a8 <aiPbMgrSendAck>
                EnumError_E_GENERIC, EnumError_E_GENERIC);
        return;
 800b348:	e044      	b.n	800b3d4 <aiPbCmdNNRun+0x1e8>
    }
    tend = dwtGetCycles();
 800b34a:	f7fe fe7d 	bl	800a048 <dwtGetCycles>
 800b34e:	63b8      	str	r0, [r7, #56]	; 0x38

#ifdef HAS_INSPECTOR
    tend = ctx->tcom + ctx->tnodes + tend;
 800b350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b352:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 800b356:	461a      	mov	r2, r3
 800b358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b35a:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 800b35e:	4413      	add	r3, r2
 800b360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b362:	4413      	add	r3, r2
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
#endif

    if (inspector_mode)
 800b366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d010      	beq.n	800b390 <aiPbCmdNNRun+0x1a4>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	f04f 0400 	mov.w	r4, #0
 800b374:	4618      	mov	r0, r3
 800b376:	4621      	mov	r1, r4
 800b378:	f7fe fe7a 	bl	800a070 <dwtCyclesToFloatMs>
 800b37c:	eef0 7a40 	vmov.f32	s15, s0
 800b380:	eeb0 0a67 	vmov.f32	s0, s15
 800b384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b386:	2202      	movs	r2, #2
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff fda7 	bl	800aede <aiInspectorSendReport>
                dwtCyclesToFloatMs(tend));

    /* 3 Write buffer */
    aiPbMgrSendAiBuffer3(req, resp, EnumState_S_DONE,
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	f04f 0400 	mov.w	r4, #0
 800b396:	4618      	mov	r0, r3
 800b398:	4621      	mov	r1, r4
 800b39a:	f7fe fe69 	bl	800a070 <dwtCyclesToFloatMs>
 800b39e:	eef0 7a40 	vmov.f32	s15, s0
 800b3a2:	f107 0310 	add.w	r3, r7, #16
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	eeb0 0a67 	vmov.f32	s0, s15
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7fe fb9a 	bl	8009af0 <aiPbMgrSendAiBuffer3>
            EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
            0, dwtCyclesToFloatMs(tend),
            &ai_output[0]);

    if (inspector_mode)
 800b3bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <aiPbCmdNNRun+0x1de>
        aiInspectorUnbindAndDestroy(ctx);
 800b3c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b3c6:	f7ff fe73 	bl	800b0b0 <aiInspectorUnbindAndDestroy>

    restoreInts(ints);
 800b3ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b3cc:	f7ff f870 	bl	800a4b0 <restoreInts>
 800b3d0:	e000      	b.n	800b3d4 <aiPbCmdNNRun+0x1e8>
        return;
 800b3d2:	bf00      	nop
}
 800b3d4:	3750      	adds	r7, #80	; 0x50
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20006a90 	.word	0x20006a90
 800b3e0:	20006ec8 	.word	0x20006ec8
 800b3e4:	08012a8c 	.word	0x08012a8c

0800b3e8 <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
    aiPbMgrInit(pbCmdFuncTab);
 800b3ee:	4813      	ldr	r0, [pc, #76]	; (800b43c <aiValidationInit+0x54>)
 800b3f0:	f7fe f980 	bl	80096f4 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2102      	movs	r1, #2
 800b3f8:	4811      	ldr	r0, [pc, #68]	; (800b440 <aiValidationInit+0x58>)
 800b3fa:	f7ff fa29 	bl	800a850 <aiTestHeader>

    dwtIpInit();
 800b3fe:	f7fe fdf5 	bl	8009fec <dwtIpInit>
    crcIpInit();
 800b402:	f7fe fdd3 	bl	8009fac <crcIpInit>
    logDeviceConf();
 800b406:	f7fe ff7f 	bl	800a308 <logDeviceConf>

    int r = aiInit();
 800b40a:	f7ff fe69 	bl	800b0e0 <aiInit>
 800b40e:	6078      	str	r0, [r7, #4]
	if (r) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d009      	beq.n	800b42a <aiValidationInit+0x42>
		printf("\r\nError During Init:  aiInit() r=%d\r\n", r);
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	480a      	ldr	r0, [pc, #40]	; (800b444 <aiValidationInit+0x5c>)
 800b41a:	f004 fddd 	bl	800ffd8 <iprintf>
		HAL_Delay(2000);
 800b41e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b422:	f7fb fae5 	bl	80069f0 <HAL_Delay>
		return r;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	e003      	b.n	800b432 <aiValidationInit+0x4a>
	} else {
		printf("\r\n Network Initialized and system is ready");
 800b42a:	4807      	ldr	r0, [pc, #28]	; (800b448 <aiValidationInit+0x60>)
 800b42c:	f004 fdd4 	bl	800ffd8 <iprintf>
	}

    return r;
 800b430:	687b      	ldr	r3, [r7, #4]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000010 	.word	0x20000010
 800b440:	08012a9c 	.word	0x08012a9c
 800b444:	08012aac 	.word	0x08012aac
 800b448:	08012ad4 	.word	0x08012ad4

0800b44c <aiValidationProcess>:

    return r;
}*/

int aiValidationProcess(float *inputArr)
{
 800b44c:	b5b0      	push	{r4, r5, r7, lr}
 800b44e:	b090      	sub	sp, #64	; 0x40
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	uint32_t ints;

	ai_buffer ai_input[1];
	ai_buffer ai_output[1];

	ctx = aiExecCtx("network", -1);
 800b454:	f04f 31ff 	mov.w	r1, #4294967295
 800b458:	4837      	ldr	r0, [pc, #220]	; (800b538 <aiValidationProcess+0xec>)
 800b45a:	f7ff fbe1 	bl	800ac20 <aiExecCtx>
 800b45e:	63b8      	str	r0, [r7, #56]	; 0x38

	ai_input[0] = ctx->report.inputs[0];
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	f107 041c 	add.w	r4, r7, #28
 800b468:	461d      	mov	r5, r3
 800b46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46e:	682b      	ldr	r3, [r5, #0]
 800b470:	6023      	str	r3, [r4, #0]
	ai_output[0] = ctx->report.outputs[0];
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	f107 0408 	add.w	r4, r7, #8
 800b47a:	461d      	mov	r5, r3
 800b47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	6023      	str	r3, [r4, #0]

	ai_input[0].n_batches  = 1;
 800b484:	2301      	movs	r3, #1
 800b486:	843b      	strh	r3, [r7, #32]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800b488:	4b2c      	ldr	r3, [pc, #176]	; (800b53c <aiValidationProcess+0xf0>)
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c
	ai_output[0].n_batches = 1;
 800b48c:	2301      	movs	r3, #1
 800b48e:	81bb      	strh	r3, [r7, #12]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800b490:	4b2b      	ldr	r3, [pc, #172]	; (800b540 <aiValidationProcess+0xf4>)
 800b492:	61bb      	str	r3, [r7, #24]

	printf("\r\n");
 800b494:	482b      	ldr	r0, [pc, #172]	; (800b544 <aiValidationProcess+0xf8>)
 800b496:	f004 fe13 	bl	80100c0 <puts>
	int i;
	for(i=0;i<270;i++){
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49e:	e00f      	b.n	800b4c0 <aiValidationProcess+0x74>
		printf("%.15f,",inputArr[i]);
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	edd3 7a00 	vldr	s15, [r3]
 800b4ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b4b0:	ec53 2b17 	vmov	r2, r3, d7
 800b4b4:	4824      	ldr	r0, [pc, #144]	; (800b548 <aiValidationProcess+0xfc>)
 800b4b6:	f004 fd8f 	bl	800ffd8 <iprintf>
	for(i=0;i<270;i++){
 800b4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4bc:	3301      	adds	r3, #1
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b4c6:	dbeb      	blt.n	800b4a0 <aiValidationProcess+0x54>
	}
	printf("\r\n");
 800b4c8:	481e      	ldr	r0, [pc, #120]	; (800b544 <aiValidationProcess+0xf8>)
 800b4ca:	f004 fdf9 	bl	80100c0 <puts>

	/* 2 Read buffer */
	//memcpy(ai_input[0].data,data1,sizeof(data1));
	memcpy(ai_input[0].data,inputArr,1080);
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f004 f887 	bl	800f5ea <memcpy>
	ints = disableInts();
 800b4dc:	f7fe ffd8 	bl	800a490 <disableInts>
 800b4e0:	6378      	str	r0, [r7, #52]	; 0x34

	batch = ai_mnetwork_run(ctx->network,
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f107 0208 	add.w	r2, r7, #8
 800b4ea:	f107 011c 	add.w	r1, r7, #28
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f003 f83c 	bl	800e56c <ai_mnetwork_run>
 800b4f4:	6338      	str	r0, [r7, #48]	; 0x30
			&ai_input[0], &ai_output[0]);
	if (batch != 1) {
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d00b      	beq.n	800b514 <aiValidationProcess+0xc8>
		aiLogErr(ai_mnetwork_get_error(ctx->network),
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f002 ffc6 	bl	800e492 <ai_mnetwork_get_error>
 800b506:	4603      	mov	r3, r0
 800b508:	4910      	ldr	r1, [pc, #64]	; (800b54c <aiValidationProcess+0x100>)
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff f816 	bl	800a53c <aiLogErr>
				"ai_mnetwork_run");
		return 0;
 800b510:	2300      	movs	r3, #0
 800b512:	e00c      	b.n	800b52e <aiValidationProcess+0xe2>
	}

	memcpy(result,ai_output[0].data,sizeof(result));
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2218      	movs	r2, #24
 800b518:	4619      	mov	r1, r3
 800b51a:	480d      	ldr	r0, [pc, #52]	; (800b550 <aiValidationProcess+0x104>)
 800b51c:	f004 f865 	bl	800f5ea <memcpy>

	printLabel(result);
 800b520:	480b      	ldr	r0, [pc, #44]	; (800b550 <aiValidationProcess+0x104>)
 800b522:	f000 f817 	bl	800b554 <printLabel>
//	for(int i=0;i<6;i++){
//		printf("%.15f,",result[i]);
//	}
//	printf("\r\n");

	restoreInts(ints);
 800b526:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b528:	f7fe ffc2 	bl	800a4b0 <restoreInts>

	return batch;
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3740      	adds	r7, #64	; 0x40
 800b532:	46bd      	mov	sp, r7
 800b534:	bdb0      	pop	{r4, r5, r7, pc}
 800b536:	bf00      	nop
 800b538:	08012b00 	.word	0x08012b00
 800b53c:	20006a90 	.word	0x20006a90
 800b540:	20006ec8 	.word	0x20006ec8
 800b544:	08012b08 	.word	0x08012b08
 800b548:	08012b0c 	.word	0x08012b0c
 800b54c:	08012a8c 	.word	0x08012a8c
 800b550:	20006fac 	.word	0x20006fac

0800b554 <printLabel>:
    printf("\r\n");
    aiDeInit();
    printf("bye bye ...\r\n");
}

void printLabel(float * result){
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	int tmp = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
	for(int i=1;i<6;i++){
 800b560:	2301      	movs	r3, #1
 800b562:	60bb      	str	r3, [r7, #8]
 800b564:	e015      	b.n	800b592 <printLabel+0x3e>
		if(result[tmp]<result[i]){
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	4413      	add	r3, r2
 800b56e:	ed93 7a00 	vldr	s14, [r3]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	4413      	add	r3, r2
 800b57a:	edd3 7a00 	vldr	s15, [r3]
 800b57e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	d501      	bpl.n	800b58c <printLabel+0x38>
			tmp = i;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	60fb      	str	r3, [r7, #12]
	for(int i=1;i<6;i++){
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	3301      	adds	r3, #1
 800b590:	60bb      	str	r3, [r7, #8]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2b05      	cmp	r3, #5
 800b596:	dde6      	ble.n	800b566 <printLabel+0x12>
		}
	}
	switch(tmp){
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	d826      	bhi.n	800b5ec <printLabel+0x98>
 800b59e:	a201      	add	r2, pc, #4	; (adr r2, 800b5a4 <printLabel+0x50>)
 800b5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a4:	0800b5bd 	.word	0x0800b5bd
 800b5a8:	0800b5c5 	.word	0x0800b5c5
 800b5ac:	0800b5cd 	.word	0x0800b5cd
 800b5b0:	0800b5d5 	.word	0x0800b5d5
 800b5b4:	0800b5dd 	.word	0x0800b5dd
 800b5b8:	0800b5e5 	.word	0x0800b5e5
	case 0:
		printf("\r\nDownstairs\r\n");
 800b5bc:	480d      	ldr	r0, [pc, #52]	; (800b5f4 <printLabel+0xa0>)
 800b5be:	f004 fd7f 	bl	80100c0 <puts>
		break;
 800b5c2:	e013      	b.n	800b5ec <printLabel+0x98>

	case 1:
		printf("\r\nJogging\r\n");
 800b5c4:	480c      	ldr	r0, [pc, #48]	; (800b5f8 <printLabel+0xa4>)
 800b5c6:	f004 fd7b 	bl	80100c0 <puts>
		break;
 800b5ca:	e00f      	b.n	800b5ec <printLabel+0x98>

	case 2:
		printf("\r\nSitting\r\n");
 800b5cc:	480b      	ldr	r0, [pc, #44]	; (800b5fc <printLabel+0xa8>)
 800b5ce:	f004 fd77 	bl	80100c0 <puts>
		break;
 800b5d2:	e00b      	b.n	800b5ec <printLabel+0x98>

	case 3:
		printf("\r\nStanding\r\n");
 800b5d4:	480a      	ldr	r0, [pc, #40]	; (800b600 <printLabel+0xac>)
 800b5d6:	f004 fd73 	bl	80100c0 <puts>
		break;
 800b5da:	e007      	b.n	800b5ec <printLabel+0x98>

	case 4:
		printf("\r\nUpstairs\r\n");
 800b5dc:	4809      	ldr	r0, [pc, #36]	; (800b604 <printLabel+0xb0>)
 800b5de:	f004 fd6f 	bl	80100c0 <puts>
		break;
 800b5e2:	e003      	b.n	800b5ec <printLabel+0x98>

	case 5:
		printf("\r\nWalking\r\n");
 800b5e4:	4808      	ldr	r0, [pc, #32]	; (800b608 <printLabel+0xb4>)
 800b5e6:	f004 fd6b 	bl	80100c0 <puts>
		break;
 800b5ea:	bf00      	nop
	}
}
 800b5ec:	bf00      	nop
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08012b24 	.word	0x08012b24
 800b5f8:	08012b34 	.word	0x08012b34
 800b5fc:	08012b40 	.word	0x08012b40
 800b600:	08012b4c 	.word	0x08012b4c
 800b604:	08012b58 	.word	0x08012b58
 800b608:	08012b64 	.word	0x08012b64

0800b60c <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	441a      	add	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	6852      	ldr	r2, [r2, #4]
 800b64c:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800b650:	b212      	sxth	r2, r2
 800b652:	441a      	add	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	bf14      	ite	ne
 800b664:	2301      	movne	r3, #1
 800b666:	2300      	moveq	r3, #0
 800b668:	b2db      	uxtb	r3, r3
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	881b      	ldrh	r3, [r3, #0]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 800b68e:	2300      	movs	r3, #0
 800b690:	e073      	b.n	800b77a <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f103 020f 	add.w	r2, r3, #15
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6819      	ldr	r1, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff ffa9 	bl	800b60c <pb_field_iter_begin>
        return false;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e05d      	b.n	800b77a <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	789b      	ldrb	r3, [r3, #2]
 800b6cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6d0:	2b30      	cmp	r3, #48	; 0x30
 800b6d2:	d111      	bne.n	800b6f8 <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	789b      	ldrb	r3, [r3, #2]
 800b6da:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800b6de:	2b30      	cmp	r3, #48	; 0x30
 800b6e0:	d10a      	bne.n	800b6f8 <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b6ea:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800b6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d101      	bne.n	800b6f8 <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e040      	b.n	800b77a <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	789b      	ldrb	r3, [r3, #2]
 800b6fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10f      	bne.n	800b724 <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	789b      	ldrb	r3, [r3, #2]
 800b708:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800b70c:	2b20      	cmp	r3, #32
 800b70e:	d109      	bne.n	800b724 <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800b716:	b29b      	uxth	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	fb02 f303 	mul.w	r3, r2, r3
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	e007      	b.n	800b734 <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	789b      	ldrb	r3, [r3, #2]
 800b728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b72c:	2b80      	cmp	r3, #128	; 0x80
 800b72e:	d101      	bne.n	800b734 <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 800b730:	2304      	movs	r3, #4
 800b732:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	789b      	ldrb	r3, [r3, #2]
 800b738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d104      	bne.n	800b74a <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	691a      	ldr	r2, [r3, #16]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b756:	b29b      	uxth	r3, r3
 800b758:	4619      	mov	r1, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	440b      	add	r3, r1
 800b75e:	441a      	add	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6852      	ldr	r2, [r2, #4]
 800b76c:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 800b770:	b212      	sxth	r2, r2
 800b772:	441a      	add	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	615a      	str	r2, [r3, #20]
        return true;
 800b778:	2301      	movs	r3, #1
    }
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d108      	bne.n	800b7b4 <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	789b      	ldrb	r3, [r3, #2]
 800b7a8:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d001      	beq.n	800b7b4 <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e008      	b.n	800b7c6 <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ff5e 	bl	800b676 <pb_field_iter_next>
    } while (iter->pos != start);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d1e6      	bne.n	800b792 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b087      	sub	sp, #28
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	441a      	add	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d011      	beq.n	800b816 <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e00a      	b.n	800b80e <buf_read+0x40>
            buf[i] = source[i];
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	441a      	add	r2, r3
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	440b      	add	r3, r1
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	3301      	adds	r3, #1
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	697a      	ldr	r2, [r7, #20]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d3f0      	bcc.n	800b7f8 <buf_read+0x2a>
    }
    
    return true;
 800b816:	2301      	movs	r3, #1
}
 800b818:	4618      	mov	r0, r3
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d123      	bne.n	800b87e <pb_read+0x5a>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a2b      	ldr	r2, [pc, #172]	; (800b8e8 <pb_read+0xc4>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d01e      	beq.n	800b87e <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800b840:	e011      	b.n	800b866 <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 800b842:	f107 0310 	add.w	r3, r7, #16
 800b846:	2210      	movs	r2, #16
 800b848:	4619      	mov	r1, r3
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f7ff ffea 	bl	800b824 <pb_read>
 800b850:	4603      	mov	r3, r0
 800b852:	f083 0301 	eor.w	r3, r3, #1
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <pb_read+0x3c>
				return false;
 800b85c:	2300      	movs	r3, #0
 800b85e:	e03e      	b.n	800b8de <pb_read+0xba>
			
			count -= 16;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3b10      	subs	r3, #16
 800b864:	607b      	str	r3, [r7, #4]
		while (count > 16)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b10      	cmp	r3, #16
 800b86a:	d8ea      	bhi.n	800b842 <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 800b86c:	f107 0310 	add.w	r3, r7, #16
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	4619      	mov	r1, r3
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff ffd5 	bl	800b824 <pb_read>
 800b87a:	4603      	mov	r3, r0
 800b87c:	e02f      	b.n	800b8de <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	429a      	cmp	r2, r3
 800b886:	d90b      	bls.n	800b8a0 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <pb_read+0x72>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	e000      	b.n	800b898 <pb_read+0x74>
 800b896:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <pb_read+0xc8>)
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	60d3      	str	r3, [r2, #12]
 800b89c:	2300      	movs	r3, #0
 800b89e:	e01e      	b.n	800b8de <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	4798      	blx	r3
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f083 0301 	eor.w	r3, r3, #1
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00b      	beq.n	800b8d0 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <pb_read+0xa2>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	e000      	b.n	800b8c8 <pb_read+0xa4>
 800b8c6:	4b0a      	ldr	r3, [pc, #40]	; (800b8f0 <pb_read+0xcc>)
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	60d3      	str	r3, [r2, #12]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e006      	b.n	800b8de <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	1ad2      	subs	r2, r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	609a      	str	r2, [r3, #8]
    return true;
 800b8dc:	2301      	movs	r3, #1
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3720      	adds	r7, #32
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800b7cf 	.word	0x0800b7cf
 800b8ec:	08012b70 	.word	0x08012b70
 800b8f0:	08012b80 	.word	0x08012b80

0800b8f4 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <pb_readbyte+0x20>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	e000      	b.n	800b916 <pb_readbyte+0x22>
 800b914:	4b13      	ldr	r3, [pc, #76]	; (800b964 <pb_readbyte+0x70>)
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	60d3      	str	r3, [r2, #12]
 800b91a:	2300      	movs	r3, #0
 800b91c:	e01d      	b.n	800b95a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2201      	movs	r2, #1
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	4798      	blx	r3
 800b92a:	4603      	mov	r3, r0
 800b92c:	f083 0301 	eor.w	r3, r3, #1
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <pb_readbyte+0x50>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	e000      	b.n	800b946 <pb_readbyte+0x52>
 800b944:	4b08      	ldr	r3, [pc, #32]	; (800b968 <pb_readbyte+0x74>)
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	60d3      	str	r3, [r2, #12]
 800b94a:	2300      	movs	r3, #0
 800b94c:	e005      	b.n	800b95a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	1e5a      	subs	r2, r3, #1
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	609a      	str	r2, [r3, #8]
    
    return true;    
 800b958:	2301      	movs	r3, #1
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	08012b70 	.word	0x08012b70
 800b968:	08012b80 	.word	0x08012b80

0800b96c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 800b96c:	b490      	push	{r4, r7}
 800b96e:	b08a      	sub	sp, #40	; 0x28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800b978:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <pb_istream_from_buffer+0x38>)
 800b97a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800b988:	2300      	movs	r3, #0
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	461c      	mov	r4, r3
 800b990:	f107 0318 	add.w	r3, r7, #24
 800b994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bc90      	pop	{r4, r7}
 800b9a2:	4770      	bx	lr
 800b9a4:	0800b7cf 	.word	0x0800b7cf

0800b9a8 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b088      	sub	sp, #32
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800b9b4:	f107 0316 	add.w	r3, r7, #22
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff ff9a 	bl	800b8f4 <pb_readbyte>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f083 0301 	eor.w	r3, r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e064      	b.n	800baae <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	b25b      	sxtb	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db02      	blt.n	800b9f2 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800b9ec:	7dbb      	ldrb	r3, [r7, #22]
 800b9ee:	61fb      	str	r3, [r7, #28]
 800b9f0:	e059      	b.n	800baa6 <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800b9f2:	2307      	movs	r3, #7
 800b9f4:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800b9f6:	7dbb      	ldrb	r3, [r7, #22]
 800b9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fc:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800b9fe:	f107 0316 	add.w	r3, r7, #22
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff ff75 	bl	800b8f4 <pb_readbyte>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f083 0301 	eor.w	r3, r3, #1
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <pb_decode_varint32_eof+0x72>
                return false;
 800ba16:	2300      	movs	r3, #0
 800ba18:	e049      	b.n	800baae <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	2b1f      	cmp	r3, #31
 800ba1e:	d91e      	bls.n	800ba5e <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b3e      	cmp	r3, #62	; 0x3e
 800ba24:	d801      	bhi.n	800ba2a <pb_decode_varint32_eof+0x82>
 800ba26:	23ff      	movs	r3, #255	; 0xff
 800ba28:	e000      	b.n	800ba2c <pb_decode_varint32_eof+0x84>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800ba2e:	7dbb      	ldrb	r3, [r7, #22]
 800ba30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d01b      	beq.n	800ba70 <pb_decode_varint32_eof+0xc8>
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	da03      	bge.n	800ba46 <pb_decode_varint32_eof+0x9e>
 800ba3e:	7dbb      	ldrb	r3, [r7, #22]
 800ba40:	7dfa      	ldrb	r2, [r7, #23]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d014      	beq.n	800ba70 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <pb_decode_varint32_eof+0xac>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	e000      	b.n	800ba56 <pb_decode_varint32_eof+0xae>
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <pb_decode_varint32_eof+0x110>)
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	60d3      	str	r3, [r2, #12]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e027      	b.n	800baae <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800ba5e:	7dbb      	ldrb	r3, [r7, #22]
 800ba60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	fa02 f303 	lsl.w	r3, r2, r3
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	3307      	adds	r3, #7
 800ba74:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800ba76:	7dbb      	ldrb	r3, [r7, #22]
 800ba78:	b25b      	sxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dbbf      	blt.n	800b9fe <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b23      	cmp	r3, #35	; 0x23
 800ba82:	d110      	bne.n	800baa6 <pb_decode_varint32_eof+0xfe>
 800ba84:	7dbb      	ldrb	r3, [r7, #22]
 800ba86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00b      	beq.n	800baa6 <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <pb_decode_varint32_eof+0xf4>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	e000      	b.n	800ba9e <pb_decode_varint32_eof+0xf6>
 800ba9c:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <pb_decode_varint32_eof+0x110>)
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	60d3      	str	r3, [r2, #12]
 800baa2:	2300      	movs	r3, #0
 800baa4:	e003      	b.n	800baae <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	601a      	str	r2, [r3, #0]
   return true;
 800baac:	2301      	movs	r3, #1
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	08012b8c 	.word	0x08012b8c

0800babc <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800bac6:	2200      	movs	r2, #0
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff ff6c 	bl	800b9a8 <pb_decode_varint32_eof>
 800bad0:	4603      	mov	r3, r0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800badc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bae0:	b088      	sub	sp, #32
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 800baec:	f04f 0200 	mov.w	r2, #0
 800baf0:	f04f 0300 	mov.w	r3, #0
 800baf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	2b3f      	cmp	r3, #63	; 0x3f
 800bafc:	d90b      	bls.n	800bb16 <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <pb_decode_varint+0x30>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	e000      	b.n	800bb0e <pb_decode_varint+0x32>
 800bb0c:	4b23      	ldr	r3, [pc, #140]	; (800bb9c <pb_decode_varint+0xc0>)
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	60d3      	str	r3, [r2, #12]
 800bb12:	2300      	movs	r3, #0
 800bb14:	e03d      	b.n	800bb92 <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 800bb16:	f107 030f 	add.w	r3, r7, #15
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fee9 	bl	800b8f4 <pb_readbyte>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f083 0301 	eor.w	r3, r3, #1
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <pb_decode_varint+0x56>
            return false;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e02f      	b.n	800bb92 <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800bb3e:	f04f 0100 	mov.w	r1, #0
 800bb42:	ea02 0b00 	and.w	fp, r2, r0
 800bb46:	ea03 0c01 	and.w	ip, r3, r1
 800bb4a:	69f9      	ldr	r1, [r7, #28]
 800bb4c:	f1a1 0620 	sub.w	r6, r1, #32
 800bb50:	f1c1 0020 	rsb	r0, r1, #32
 800bb54:	fa0c f501 	lsl.w	r5, ip, r1
 800bb58:	fa0b f606 	lsl.w	r6, fp, r6
 800bb5c:	4335      	orrs	r5, r6
 800bb5e:	fa2b f000 	lsr.w	r0, fp, r0
 800bb62:	4305      	orrs	r5, r0
 800bb64:	fa0b f401 	lsl.w	r4, fp, r1
 800bb68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb6c:	ea42 0004 	orr.w	r0, r2, r4
 800bb70:	ea43 0105 	orr.w	r1, r3, r5
 800bb74:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	b25b      	sxtb	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dbb8      	blt.n	800baf8 <pb_decode_varint+0x1c>
    
    *dest = result;
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bb8c:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 800bb90:	2301      	movs	r3, #1
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3720      	adds	r7, #32
 800bb96:	46bd      	mov	sp, r7
 800bb98:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800bb9c:	08012b8c 	.word	0x08012b8c

0800bba0 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800bba8:	f107 030f 	add.w	r3, r7, #15
 800bbac:	2201      	movs	r2, #1
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff fe37 	bl	800b824 <pb_read>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f083 0301 	eor.w	r3, r3, #1
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <pb_skip_varint+0x26>
            return false;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e004      	b.n	800bbd0 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	b25b      	sxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dbec      	blt.n	800bba8 <pb_skip_varint+0x8>
    return true;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff ff68 	bl	800babc <pb_decode_varint32>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f083 0301 	eor.w	r3, r3, #1
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <pb_skip_string+0x24>
        return false;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e006      	b.n	800bc0a <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	2100      	movs	r1, #0
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff fe0e 	bl	800b824 <pb_read>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b086      	sub	sp, #24
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	607a      	str	r2, [r7, #4]
 800bc1e:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800bc32:	f107 0314 	add.w	r3, r7, #20
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7ff feb4 	bl	800b9a8 <pb_decode_varint32_eof>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f083 0301 	eor.w	r3, r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <pb_decode_tag+0x3e>
    {
        return false;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e013      	b.n	800bc78 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]
        return false;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e00b      	b.n	800bc78 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	08da      	lsrs	r2, r3, #3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	701a      	strb	r2, [r3, #0]
    return true;
 800bc76:	2301      	movs	r3, #1
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	2b05      	cmp	r3, #5
 800bc90:	d826      	bhi.n	800bce0 <pb_skip_field+0x60>
 800bc92:	a201      	add	r2, pc, #4	; (adr r2, 800bc98 <pb_skip_field+0x18>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bcb1 	.word	0x0800bcb1
 800bc9c:	0800bcbb 	.word	0x0800bcbb
 800bca0:	0800bcc9 	.word	0x0800bcc9
 800bca4:	0800bce1 	.word	0x0800bce1
 800bca8:	0800bce1 	.word	0x0800bce1
 800bcac:	0800bcd3 	.word	0x0800bcd3
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff ff75 	bl	800bba0 <pb_skip_varint>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	e01d      	b.n	800bcf6 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800bcba:	2208      	movs	r2, #8
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fdb0 	bl	800b824 <pb_read>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	e016      	b.n	800bcf6 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff85 	bl	800bbd8 <pb_skip_string>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	e011      	b.n	800bcf6 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7ff fda4 	bl	800b824 <pb_read>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	e00a      	b.n	800bcf6 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <pb_skip_field+0x6e>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	e000      	b.n	800bcf0 <pb_skip_field+0x70>
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <pb_skip_field+0x80>)
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	60d3      	str	r3, [r2, #12]
 800bcf4:	2300      	movs	r3, #0
    }
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	08012b9c 	.word	0x08012b9c

0800bd04 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	607a      	str	r2, [r7, #4]
 800bd0e:	603b      	str	r3, [r7, #0]
 800bd10:	460b      	mov	r3, r1
 800bd12:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800bd1a:	7afb      	ldrb	r3, [r7, #11]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d028      	beq.n	800bd72 <read_raw_value+0x6e>
 800bd20:	2b05      	cmp	r3, #5
 800bd22:	d030      	beq.n	800bd86 <read_raw_value+0x82>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d138      	bne.n	800bd9a <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d201      	bcs.n	800bd46 <read_raw_value+0x42>
 800bd42:	2300      	movs	r3, #0
 800bd44:	e034      	b.n	800bdb0 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800bd46:	2201      	movs	r2, #1
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fd6a 	bl	800b824 <pb_read>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f083 0301 	eor.w	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <read_raw_value+0x5c>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e027      	b.n	800bdb0 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dbdf      	blt.n	800bd2e <read_raw_value+0x2a>
            return true;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e01e      	b.n	800bdb0 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2208      	movs	r2, #8
 800bd76:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800bd78:	2208      	movs	r2, #8
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7ff fd51 	bl	800b824 <pb_read>
 800bd82:	4603      	mov	r3, r0
 800bd84:	e014      	b.n	800bdb0 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2204      	movs	r2, #4
 800bd8a:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff fd47 	bl	800b824 <pb_read>
 800bd96:	4603      	mov	r3, r0
 800bd98:	e00a      	b.n	800bdb0 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <read_raw_value+0xa4>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	e000      	b.n	800bdaa <read_raw_value+0xa6>
 800bda8:	4b03      	ldr	r3, [pc, #12]	; (800bdb8 <read_raw_value+0xb4>)
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	60d3      	str	r3, [r2, #12]
 800bdae:	2300      	movs	r3, #0
    }
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	08012b9c 	.word	0x08012b9c

0800bdbc <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800bdc6:	f107 030c 	add.w	r3, r7, #12
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fe75 	bl	800babc <pb_decode_varint32>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	f083 0301 	eor.w	r3, r3, #1
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <pb_make_string_substream+0x26>
        return false;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e020      	b.n	800be24 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4614      	mov	r4, r2
 800bde8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	689a      	ldr	r2, [r3, #8]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d20b      	bcs.n	800be10 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <pb_make_string_substream+0x4a>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	e000      	b.n	800be08 <pb_make_string_substream+0x4c>
 800be06:	4b09      	ldr	r3, [pc, #36]	; (800be2c <pb_make_string_substream+0x70>)
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	60d3      	str	r3, [r2, #12]
 800be0c:	2300      	movs	r3, #0
 800be0e:	e009      	b.n	800be24 <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	609a      	str	r2, [r3, #8]
    return true;
 800be22:	2301      	movs	r3, #1
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd90      	pop	{r4, r7, pc}
 800be2c:	08012bb0 	.word	0x08012bb0

0800be30 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	461a      	mov	r2, r3
 800be48:	2100      	movs	r1, #0
 800be4a:	6838      	ldr	r0, [r7, #0]
 800be4c:	f7ff fcea 	bl	800b824 <pb_read>
 800be50:	4603      	mov	r3, r0
 800be52:	f083 0301 	eor.w	r3, r3, #1
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <pb_close_string_substream+0x30>
            return false;
 800be5c:	2300      	movs	r3, #0
 800be5e:	e008      	b.n	800be72 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800be70:	2301      	movs	r3, #1
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	460b      	mov	r3, r1
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	789b      	ldrb	r3, [r3, #2]
 800be90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800be94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be98:	f003 030f 	and.w	r3, r3, #15
 800be9c:	4a85      	ldr	r2, [pc, #532]	; (800c0b4 <decode_static_field+0x238>)
 800be9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800bea4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bea8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800beac:	2b10      	cmp	r3, #16
 800beae:	d013      	beq.n	800bed8 <decode_static_field+0x5c>
 800beb0:	2b10      	cmp	r3, #16
 800beb2:	dc02      	bgt.n	800beba <decode_static_field+0x3e>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <decode_static_field+0x4a>
 800beb8:	e0ec      	b.n	800c094 <decode_static_field+0x218>
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d01f      	beq.n	800befe <decode_static_field+0x82>
 800bebe:	2b30      	cmp	r3, #48	; 0x30
 800bec0:	f000 80bd 	beq.w	800c03e <decode_static_field+0x1c2>
 800bec4:	e0e6      	b.n	800c094 <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6859      	ldr	r1, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691a      	ldr	r2, [r3, #16]
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	4798      	blx	r3
 800bed4:	4603      	mov	r3, r0
 800bed6:	e0e8      	b.n	800c0aa <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	695a      	ldr	r2, [r3, #20]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d003      	beq.n	800beec <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	2201      	movs	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6859      	ldr	r1, [r3, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	691a      	ldr	r2, [r3, #16]
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	4798      	blx	r3
 800befa:	4603      	mov	r3, r0
 800befc:	e0d5      	b.n	800c0aa <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800befe:	7afb      	ldrb	r3, [r7, #11]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d16a      	bne.n	800bfda <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800bf04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	dc64      	bgt.n	800bfda <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	4619      	mov	r1, r3
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f7ff ff4a 	bl	800bdbc <pb_make_string_substream>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f083 0301 	eor.w	r3, r3, #1
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d026      	beq.n	800bf82 <decode_static_field+0x106>
                    return false;
 800bf34:	2300      	movs	r3, #0
 800bf36:	e0b8      	b.n	800c0aa <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	6852      	ldr	r2, [r2, #4]
 800bf40:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800bf44:	b292      	uxth	r2, r2
 800bf46:	4611      	mov	r1, r2
 800bf48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf4a:	8812      	ldrh	r2, [r2, #0]
 800bf4c:	fb02 f201 	mul.w	r2, r2, r1
 800bf50:	4413      	add	r3, r2
 800bf52:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6859      	ldr	r1, [r3, #4]
 800bf58:	f107 0010 	add.w	r0, r7, #16
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf60:	4798      	blx	r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	f083 0301 	eor.w	r3, r3, #1
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <decode_static_field+0xfa>
                    {
                        status = false;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800bf74:	e011      	b.n	800bf9a <decode_static_field+0x11e>
                    }
                    (*size)++;
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d008      	beq.n	800bf9a <decode_static_field+0x11e>
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	881a      	ldrh	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d3ce      	bcc.n	800bf38 <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00b      	beq.n	800bfb8 <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <decode_static_field+0x132>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	e000      	b.n	800bfb0 <decode_static_field+0x134>
 800bfae:	4b42      	ldr	r3, [pc, #264]	; (800c0b8 <decode_static_field+0x23c>)
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	60d3      	str	r3, [r2, #12]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e078      	b.n	800c0aa <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 800bfb8:	f107 0310 	add.w	r3, r7, #16
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff ff36 	bl	800be30 <pb_close_string_substream>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f083 0301 	eor.w	r3, r3, #1
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <decode_static_field+0x158>
                    return false;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e06a      	b.n	800c0aa <decode_static_field+0x22e>

                return status;
 800bfd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfd8:	e067      	b.n	800c0aa <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6852      	ldr	r2, [r2, #4]
 800bfe8:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800bfec:	b292      	uxth	r2, r2
 800bfee:	4611      	mov	r1, r2
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	8812      	ldrh	r2, [r2, #0]
 800bff4:	fb02 f201 	mul.w	r2, r2, r1
 800bff8:	4413      	add	r3, r2
 800bffa:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	b291      	uxth	r1, r2
 800c004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c006:	8011      	strh	r1, [r2, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6852      	ldr	r2, [r2, #4]
 800c00c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800c010:	b292      	uxth	r2, r2
 800c012:	4293      	cmp	r3, r2
 800c014:	d30b      	bcc.n	800c02e <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <decode_static_field+0x1a8>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	e000      	b.n	800c026 <decode_static_field+0x1aa>
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <decode_static_field+0x23c>)
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	60d3      	str	r3, [r2, #12]
 800c02a:	2300      	movs	r3, #0
 800c02c:	e03d      	b.n	800c0aa <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6859      	ldr	r1, [r3, #4]
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	6a3a      	ldr	r2, [r7, #32]
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	e035      	b.n	800c0aa <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	8812      	ldrh	r2, [r2, #0]
 800c048:	b292      	uxth	r2, r2
 800c04a:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800c04c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	2b07      	cmp	r3, #7
 800c056:	d114      	bne.n	800c082 <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6918      	ldr	r0, [r3, #16]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c064:	b29b      	uxth	r3, r3
 800c066:	461a      	mov	r2, r3
 800c068:	2100      	movs	r1, #0
 800c06a:	f003 fac9 	bl	800f600 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f000 fa55 	bl	800c52c <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6859      	ldr	r1, [r3, #4]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691a      	ldr	r2, [r3, #16]
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	4798      	blx	r3
 800c090:	4603      	mov	r3, r0
 800c092:	e00a      	b.n	800c0aa <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d002      	beq.n	800c0a2 <decode_static_field+0x226>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	e000      	b.n	800c0a4 <decode_static_field+0x228>
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <decode_static_field+0x240>)
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	60d3      	str	r3, [r2, #12]
 800c0a8:	2300      	movs	r3, #0
    }
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3738      	adds	r7, #56	; 0x38
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	08012ef4 	.word	0x08012ef4
 800c0b8:	08012bc8 	.word	0x08012bc8
 800c0bc:	08012bd8 	.word	0x08012bd8

0800c0c0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <decode_pointer_field+0x1c>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	e000      	b.n	800c0de <decode_pointer_field+0x1e>
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <decode_pointer_field+0x30>)
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	60d3      	str	r3, [r2, #12]
 800c0e2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	08012bec 	.word	0x08012bec

0800c0f4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800c0f4:	b590      	push	{r4, r7, lr}
 800c0f6:	b097      	sub	sp, #92	; 0x5c
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	61f8      	str	r0, [r7, #28]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	617a      	str	r2, [r7, #20]
 800c100:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800c108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c10a:	3304      	adds	r3, #4
 800c10c:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800c10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c110:	2b00      	cmp	r3, #0
 800c112:	d003      	beq.n	800c11c <decode_callback_field+0x28>
 800c114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d106      	bne.n	800c12a <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 800c11c:	7efb      	ldrb	r3, [r7, #27]
 800c11e:	4619      	mov	r1, r3
 800c120:	69f8      	ldr	r0, [r7, #28]
 800c122:	f7ff fdad 	bl	800bc80 <pb_skip_field>
 800c126:	4603      	mov	r3, r0
 800c128:	e065      	b.n	800c1f6 <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800c12a:	7efb      	ldrb	r3, [r7, #27]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d13a      	bne.n	800c1a6 <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 800c130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c134:	4619      	mov	r1, r3
 800c136:	69f8      	ldr	r0, [r7, #28]
 800c138:	f7ff fe40 	bl	800bdbc <pb_make_string_substream>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f083 0301 	eor.w	r3, r3, #1
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <decode_callback_field+0x58>
            return false;
 800c148:	2300      	movs	r3, #0
 800c14a:	e054      	b.n	800c1f6 <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800c14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	6851      	ldr	r1, [r2, #4]
 800c154:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800c158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c15a:	4798      	blx	r3
 800c15c:	4603      	mov	r3, r0
 800c15e:	f083 0301 	eor.w	r3, r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <decode_callback_field+0x82>
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	e000      	b.n	800c178 <decode_callback_field+0x84>
 800c176:	4b22      	ldr	r3, [pc, #136]	; (800c200 <decode_callback_field+0x10c>)
 800c178:	69fa      	ldr	r2, [r7, #28]
 800c17a:	60d3      	str	r3, [r2, #12]
 800c17c:	2300      	movs	r3, #0
 800c17e:	e03a      	b.n	800c1f6 <decode_callback_field+0x102>
        } while (substream.bytes_left);
 800c180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e2      	bne.n	800c14c <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800c186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c18a:	4619      	mov	r1, r3
 800c18c:	69f8      	ldr	r0, [r7, #28]
 800c18e:	f7ff fe4f 	bl	800be30 <pb_close_string_substream>
 800c192:	4603      	mov	r3, r0
 800c194:	f083 0301 	eor.w	r3, r3, #1
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <decode_callback_field+0xae>
            return false;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e029      	b.n	800c1f6 <decode_callback_field+0x102>

        return true;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e027      	b.n	800c1f6 <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800c1a6:	230a      	movs	r3, #10
 800c1a8:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800c1aa:	f107 0320 	add.w	r3, r7, #32
 800c1ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c1b2:	7ef9      	ldrb	r1, [r7, #27]
 800c1b4:	69f8      	ldr	r0, [r7, #28]
 800c1b6:	f7ff fda5 	bl	800bd04 <read_raw_value>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f083 0301 	eor.w	r3, r3, #1
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <decode_callback_field+0xd6>
            return false;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	e015      	b.n	800c1f6 <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 800c1ca:	6a3a      	ldr	r2, [r7, #32]
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff fbca 	bl	800b96c <pb_istream_from_buffer>
 800c1d8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c1dc:	463b      	mov	r3, r7
 800c1de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c1e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800c1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	6851      	ldr	r1, [r2, #4]
 800c1ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c1f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1f2:	4798      	blx	r3
 800c1f4:	4603      	mov	r3, r0
    }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	375c      	adds	r7, #92	; 0x5c
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd90      	pop	{r4, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	08012c00 	.word	0x08012c00

0800c204 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	460b      	mov	r3, r1
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	789b      	ldrb	r3, [r3, #2]
 800c218:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c21c:	2b40      	cmp	r3, #64	; 0x40
 800c21e:	d013      	beq.n	800c248 <decode_field+0x44>
 800c220:	2b80      	cmp	r3, #128	; 0x80
 800c222:	d009      	beq.n	800c238 <decode_field+0x34>
 800c224:	2b00      	cmp	r3, #0
 800c226:	d117      	bne.n	800c258 <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800c228:	7afb      	ldrb	r3, [r7, #11]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4619      	mov	r1, r3
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff fe24 	bl	800be7c <decode_static_field>
 800c234:	4603      	mov	r3, r0
 800c236:	e01a      	b.n	800c26e <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800c238:	7afb      	ldrb	r3, [r7, #11]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	4619      	mov	r1, r3
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7ff ff3e 	bl	800c0c0 <decode_pointer_field>
 800c244:	4603      	mov	r3, r0
 800c246:	e012      	b.n	800c26e <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	4619      	mov	r1, r3
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff ff50 	bl	800c0f4 <decode_callback_field>
 800c254:	4603      	mov	r3, r0
 800c256:	e00a      	b.n	800c26e <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <decode_field+0x62>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	e000      	b.n	800c268 <decode_field+0x64>
 800c266:	4b04      	ldr	r3, [pc, #16]	; (800c278 <decode_field+0x74>)
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	60d3      	str	r3, [r2, #12]
 800c26c:	2300      	movs	r3, #0
    }
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	08012bd8 	.word	0x08012bd8

0800c27c <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	461a      	mov	r2, r3
 800c294:	68f9      	ldr	r1, [r7, #12]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff f9b8 	bl	800b60c <pb_field_iter_begin>
    iter->pData = extension->dest;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	f103 020c 	add.w	r2, r3, #12
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	789b      	ldrb	r3, [r3, #2]
 800c2b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2b6:	2b80      	cmp	r3, #128	; 0x80
 800c2b8:	d103      	bne.n	800c2c2 <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	1d1a      	adds	r2, r3, #4
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	611a      	str	r2, [r3, #16]
    }
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b08c      	sub	sp, #48	; 0x30
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
 800c2d6:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d001      	beq.n	800c2f2 <default_extension_decoder+0x28>
        return true;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e010      	b.n	800c314 <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 800c2f2:	f107 0314 	add.w	r3, r7, #20
 800c2f6:	68b9      	ldr	r1, [r7, #8]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff ffbf 	bl	800c27c <iter_from_extension>
    extension->found = true;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2201      	movs	r2, #1
 800c302:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800c304:	f107 0214 	add.w	r2, r7, #20
 800c308:	78fb      	ldrb	r3, [r7, #3]
 800c30a:	4619      	mov	r1, r3
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f7ff ff79 	bl	800c204 <decode_field>
 800c312:	4603      	mov	r3, r0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3730      	adds	r7, #48	; 0x30
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b089      	sub	sp, #36	; 0x24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 800c33a:	e022      	b.n	800c382 <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681c      	ldr	r4, [r3, #0]
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	69f9      	ldr	r1, [r7, #28]
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	47a0      	blx	r4
 800c356:	4603      	mov	r3, r0
 800c358:	76fb      	strb	r3, [r7, #27]
 800c35a:	e007      	b.n	800c36c <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	69f9      	ldr	r1, [r7, #28]
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7ff ffb1 	bl	800c2ca <default_extension_decoder>
 800c368:	4603      	mov	r3, r0
 800c36a:	76fb      	strb	r3, [r7, #27]

        if (!status)
 800c36c:	7efb      	ldrb	r3, [r7, #27]
 800c36e:	f083 0301 	eor.w	r3, r3, #1
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <decode_extension+0x60>
            return false;
 800c378:	2300      	movs	r3, #0
 800c37a:	e00b      	b.n	800c394 <decode_extension+0x78>
        
        extension = extension->next;
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <decode_extension+0x76>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d0d4      	beq.n	800c33c <decode_extension+0x20>
    }
    
    return true;
 800c392:	2301      	movs	r3, #1
}
 800c394:	4618      	mov	r0, r3
 800c396:	3724      	adds	r7, #36	; 0x24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd90      	pop	{r4, r7, pc}

0800c39c <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	789b      	ldrb	r3, [r3, #2]
 800c3b0:	f003 030f 	and.w	r3, r3, #15
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d101      	bne.n	800c3bc <find_extension_field+0x20>
            return true;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e008      	b.n	800c3ce <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7ff f95a 	bl	800b676 <pb_field_iter_next>
    } while (iter->pos != start);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d1ee      	bne.n	800c3aa <find_extension_field+0xe>
    
    return false;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b08a      	sub	sp, #40	; 0x28
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	789b      	ldrb	r3, [r3, #2]
 800c3e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800c3e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c3ec:	f003 030f 	and.w	r3, r3, #15
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d119      	bne.n	800c428 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800c3fc:	e010      	b.n	800c420 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c400:	2200      	movs	r2, #0
 800c402:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 800c404:	f107 0308 	add.w	r3, r7, #8
 800c408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7ff ff36 	bl	800c27c <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 800c410:	f107 0308 	add.w	r3, r7, #8
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffde 	bl	800c3d6 <pb_field_set_to_default>
            ext = ext->next;
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1eb      	bne.n	800c3fe <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800c426:	e07d      	b.n	800c524 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800c428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c42c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d15d      	bne.n	800c4f0 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800c43a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c43e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c442:	2b10      	cmp	r3, #16
 800c444:	d10a      	bne.n	800c45c <pb_field_set_to_default+0x86>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	695a      	ldr	r2, [r3, #20]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d004      	beq.n	800c45c <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	2200      	movs	r2, #0
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	e012      	b.n	800c482 <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800c45c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c460:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c464:	2b20      	cmp	r3, #32
 800c466:	d005      	beq.n	800c474 <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800c468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c46c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800c470:	2b30      	cmp	r3, #48	; 0x30
 800c472:	d106      	bne.n	800c482 <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	2200      	movs	r2, #0
 800c47a:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800c47c:	2300      	movs	r3, #0
 800c47e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800c482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c486:	2b00      	cmp	r3, #0
 800c488:	d04c      	beq.n	800c524 <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	789b      	ldrb	r3, [r3, #2]
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	2b07      	cmp	r3, #7
 800c496:	d10a      	bne.n	800c4ae <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f000 f840 	bl	800c52c <pb_message_set_to_defaults>
}
 800c4ac:	e03a      	b.n	800c524 <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00e      	beq.n	800c4d8 <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6918      	ldr	r0, [r3, #16]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f003 f88a 	bl	800f5ea <memcpy>
}
 800c4d6:	e025      	b.n	800c524 <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6918      	ldr	r0, [r3, #16]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f003 f889 	bl	800f600 <memset>
}
 800c4ee:	e019      	b.n	800c524 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800c4f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c4f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c4f8:	2b80      	cmp	r3, #128	; 0x80
 800c4fa:	d113      	bne.n	800c524 <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800c504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c508:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	d005      	beq.n	800c51c <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800c510:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c514:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800c518:	2b30      	cmp	r3, #48	; 0x30
 800c51a:	d103      	bne.n	800c524 <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	695b      	ldr	r3, [r3, #20]
 800c520:	2200      	movs	r2, #0
 800c522:	801a      	strh	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	3728      	adds	r7, #40	; 0x28
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800c536:	f107 0308 	add.w	r3, r7, #8
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff f864 	bl	800b60c <pb_field_iter_begin>
 800c544:	4603      	mov	r3, r0
 800c546:	f083 0301 	eor.w	r3, r3, #1
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10d      	bne.n	800c56c <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff ff3e 	bl	800c3d6 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800c55a:	f107 0308 	add.w	r3, r7, #8
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff f889 	bl	800b676 <pb_field_iter_next>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1f2      	bne.n	800c550 <pb_message_set_to_defaults+0x24>
 800c56a:	e000      	b.n	800c56e <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 800c56c:	bf00      	nop
}
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b098      	sub	sp, #96	; 0x60
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800c580:	2300      	movs	r3, #0
 800c582:	63bb      	str	r3, [r7, #56]	; 0x38
 800c584:	2300      	movs	r3, #0
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 800c588:	f04f 33ff 	mov.w	r3, #4294967295
 800c58c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800c59a:	f107 0320 	add.w	r3, r7, #32
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff f832 	bl	800b60c <pb_field_iter_begin>

    while (stream->bytes_left)
 800c5a8:	e0bf      	b.n	800c72a <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800c5aa:	f107 0316 	add.w	r3, r7, #22
 800c5ae:	f107 0218 	add.w	r2, r7, #24
 800c5b2:	f107 0117 	add.w	r1, r7, #23
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7ff fb2b 	bl	800bc12 <pb_decode_tag>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f083 0301 	eor.w	r3, r3, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d005      	beq.n	800c5d4 <pb_decode_noinit+0x60>
        {
            if (eof)
 800c5c8:	7dbb      	ldrb	r3, [r7, #22]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f040 80b3 	bne.w	800c736 <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e130      	b.n	800c836 <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	f107 0320 	add.w	r3, r7, #32
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff f8d0 	bl	800b782 <pb_field_iter_find>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f083 0301 	eor.w	r3, r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d03e      	beq.n	800c66c <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d82d      	bhi.n	800c652 <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 800c5f6:	f107 0320 	add.w	r3, r7, #32
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff fece 	bl	800c39c <find_extension_field>
 800c600:	4603      	mov	r3, r0
 800c602:	f083 0301 	eor.w	r3, r3, #1
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c612:	e003      	b.n	800c61c <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c620:	429a      	cmp	r2, r3
 800c622:	d816      	bhi.n	800c652 <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 800c62a:	69b9      	ldr	r1, [r7, #24]
 800c62c:	7dfa      	ldrb	r2, [r7, #23]
 800c62e:	f107 0320 	add.w	r3, r7, #32
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff fe72 	bl	800c31c <decode_extension>
 800c638:	4603      	mov	r3, r0
 800c63a:	f083 0301 	eor.w	r3, r3, #1
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <pb_decode_noinit+0xd4>
                        return false;
 800c644:	2300      	movs	r3, #0
 800c646:	e0f6      	b.n	800c836 <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c64e:	429a      	cmp	r2, r3
 800c650:	d168      	bne.n	800c724 <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	4619      	mov	r1, r3
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7ff fb12 	bl	800bc80 <pb_skip_field>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f083 0301 	eor.w	r3, r3, #1
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d05f      	beq.n	800c728 <pb_decode_noinit+0x1b4>
                return false;
 800c668:	2300      	movs	r3, #0
 800c66a:	e0e4      	b.n	800c836 <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	789b      	ldrb	r3, [r3, #2]
 800c670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c674:	2b20      	cmp	r3, #32
 800c676:	d124      	bne.n	800c6c2 <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 800c678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d120      	bne.n	800c6c2 <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c684:	429a      	cmp	r2, r3
 800c686:	d019      	beq.n	800c6bc <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 800c688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d012      	beq.n	800c6b4 <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 800c68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c690:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800c694:	b29a      	uxth	r2, r3
 800c696:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 800c698:	429a      	cmp	r2, r3
 800c69a:	d00b      	beq.n	800c6b4 <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <pb_decode_noinit+0x136>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	e000      	b.n	800c6ac <pb_decode_noinit+0x138>
 800c6aa:	4b65      	ldr	r3, [pc, #404]	; (800c840 <pb_decode_noinit+0x2cc>)
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	60d3      	str	r3, [r2, #12]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e0c0      	b.n	800c836 <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 800c6bc:	f107 031e 	add.w	r3, r7, #30
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	789b      	ldrb	r3, [r3, #2]
 800c6c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d11b      	bne.n	800c706 <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b3f      	cmp	r3, #63	; 0x3f
 800c6d2:	d818      	bhi.n	800c706 <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2201      	movs	r2, #1
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	095b      	lsrs	r3, r3, #5
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f853 1c28 	ldr.w	r1, [r3, #-40]
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	095b      	lsrs	r3, r3, #5
 800c6f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c700:	440b      	add	r3, r1
 800c702:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	f107 0220 	add.w	r2, r7, #32
 800c70c:	4619      	mov	r1, r3
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7ff fd78 	bl	800c204 <decode_field>
 800c714:	4603      	mov	r3, r0
 800c716:	f083 0301 	eor.w	r3, r3, #1
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d004      	beq.n	800c72a <pb_decode_noinit+0x1b6>
            return false;
 800c720:	2300      	movs	r3, #0
 800c722:	e088      	b.n	800c836 <pb_decode_noinit+0x2c2>
                        continue;
 800c724:	bf00      	nop
 800c726:	e000      	b.n	800c72a <pb_decode_noinit+0x1b6>
            continue;
 800c728:	bf00      	nop
    while (stream->bytes_left)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f47f af3b 	bne.w	800c5aa <pb_decode_noinit+0x36>
 800c734:	e000      	b.n	800c738 <pb_decode_noinit+0x1c4>
                break;
 800c736:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 800c738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d012      	beq.n	800c764 <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 800c73e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c740:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800c744:	b29a      	uxth	r2, r3
 800c746:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 800c748:	429a      	cmp	r2, r3
 800c74a:	d00b      	beq.n	800c764 <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <pb_decode_noinit+0x1e6>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	e000      	b.n	800c75c <pb_decode_noinit+0x1e8>
 800c75a:	4b39      	ldr	r3, [pc, #228]	; (800c840 <pb_decode_noinit+0x2cc>)
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	60d3      	str	r3, [r2, #12]
 800c760:	2300      	movs	r3, #0
 800c762:	e068      	b.n	800c836 <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 800c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76a:	789b      	ldrb	r3, [r3, #2]
 800c76c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 800c770:	f107 0320 	add.w	r3, r7, #32
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe ff7e 	bl	800b676 <pb_field_iter_next>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f1      	bne.n	800c764 <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800c780:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c784:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d107      	bne.n	800c79c <pb_decode_noinit+0x228>
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	b29b      	uxth	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <pb_decode_noinit+0x228>
            req_field_count++;
 800c796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c798:	3301      	adds	r3, #1
 800c79a:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800c79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c79e:	2b40      	cmp	r3, #64	; 0x40
 800c7a0:	d901      	bls.n	800c7a6 <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800c7a2:	2340      	movs	r3, #64	; 0x40
 800c7a4:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 800c7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d043      	beq.n	800c834 <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	653b      	str	r3, [r7, #80]	; 0x50
 800c7b0:	e018      	b.n	800c7e4 <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 800c7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800c7c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d00b      	beq.n	800c7de <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <pb_decode_noinit+0x260>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	e000      	b.n	800c7d6 <pb_decode_noinit+0x262>
 800c7d4:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <pb_decode_noinit+0x2d0>)
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	60d3      	str	r3, [r2, #12]
 800c7da:	2300      	movs	r3, #0
 800c7dc:	e02b      	b.n	800c836 <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 800c7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	653b      	str	r3, [r7, #80]	; 0x50
 800c7e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d3e1      	bcc.n	800c7b2 <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800c7ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7f0:	f003 031f 	and.w	r3, r3, #31
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01d      	beq.n	800c834 <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 800c7f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7fa:	095b      	lsrs	r3, r3, #5
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c802:	4413      	add	r3, r2
 800c804:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 800c808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80a:	f003 031f 	and.w	r3, r3, #31
 800c80e:	f1c3 0320 	rsb	r3, r3, #32
 800c812:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c814:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 800c818:	429a      	cmp	r2, r3
 800c81a:	d00b      	beq.n	800c834 <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <pb_decode_noinit+0x2b6>
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	e000      	b.n	800c82c <pb_decode_noinit+0x2b8>
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <pb_decode_noinit+0x2d0>)
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	60d3      	str	r3, [r2, #12]
 800c830:	2300      	movs	r3, #0
 800c832:	e000      	b.n	800c836 <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 800c834:	2301      	movs	r3, #1
}
 800c836:	4618      	mov	r0, r3
 800c838:	3760      	adds	r7, #96	; 0x60
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	08012c10 	.word	0x08012c10
 800c844:	08012c34 	.word	0x08012c34

0800c848 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	68b8      	ldr	r0, [r7, #8]
 800c858:	f7ff fe68 	bl	800c52c <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	68b9      	ldr	r1, [r7, #8]
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7ff fe87 	bl	800c574 <pb_decode_noinit>
 800c866:	4603      	mov	r3, r0
 800c868:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 800c880:	f107 0314 	add.w	r3, r7, #20
 800c884:	4619      	mov	r1, r3
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f7ff fa98 	bl	800bdbc <pb_make_string_substream>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f083 0301 	eor.w	r3, r3, #1
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <pb_decode_delimited+0x28>
        return false;
 800c898:	2300      	movs	r3, #0
 800c89a:	e019      	b.n	800c8d0 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 800c89c:	f107 0314 	add.w	r3, r7, #20
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7ff ffcf 	bl	800c848 <pb_decode>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 800c8b0:	f107 0314 	add.w	r3, r7, #20
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff faba 	bl	800be30 <pb_close_string_substream>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f083 0301 	eor.w	r3, r3, #1
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <pb_decode_delimited+0x58>
        return false;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e001      	b.n	800c8d0 <pb_decode_delimited+0x5c>
    return status;
 800c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3728      	adds	r7, #40	; 0x28
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800c8d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800c8e4:	f107 0308 	add.w	r3, r7, #8
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff f8f6 	bl	800badc <pb_decode_varint>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	f083 0301 	eor.w	r3, r3, #1
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <pb_decode_svarint+0x28>
        return false;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	e021      	b.n	800c944 <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800c900:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800c904:	f04f 0101 	mov.w	r1, #1
 800c908:	f04f 0200 	mov.w	r2, #0
 800c90c:	ea0b 0301 	and.w	r3, fp, r1
 800c910:	ea0c 0402 	and.w	r4, ip, r2
 800c914:	4323      	orrs	r3, r4
 800c916:	d00c      	beq.n	800c932 <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800c918:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c91c:	0862      	lsrs	r2, r4, #1
 800c91e:	ea4f 0133 	mov.w	r1, r3, rrx
 800c922:	ea6f 0301 	mvn.w	r3, r1
 800c926:	ea6f 0402 	mvn.w	r4, r2
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	e9c2 3400 	strd	r3, r4, [r2]
 800c930:	e007      	b.n	800c942 <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800c932:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c936:	0864      	lsrs	r4, r4, #1
 800c938:	ea4f 0333 	mov.w	r3, r3, rrx
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800c942:	2301      	movs	r3, #1
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c94e <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800c958:	f107 030c 	add.w	r3, r7, #12
 800c95c:	2204      	movs	r2, #4
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7fe ff5f 	bl	800b824 <pb_read>
 800c966:	4603      	mov	r3, r0
 800c968:	f083 0301 	eor.w	r3, r3, #1
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <pb_decode_fixed32+0x28>
        return false;
 800c972:	2300      	movs	r3, #0
 800c974:	e00d      	b.n	800c992 <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800c976:	7b3b      	ldrb	r3, [r7, #12]
 800c978:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800c97a:	7b7b      	ldrb	r3, [r7, #13]
 800c97c:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800c97e:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800c980:	7bbb      	ldrb	r3, [r7, #14]
 800c982:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800c984:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800c986:	7bfb      	ldrb	r3, [r7, #15]
 800c988:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800c98a:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	601a      	str	r2, [r3, #0]
    return true;
 800c990:	2301      	movs	r3, #1
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800c99a:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fe ff38 	bl	800b824 <pb_read>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	f083 0301 	eor.w	r3, r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <pb_decode_fixed64+0x2a>
        return false;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e06c      	b.n	800ca9e <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800c9c4:	7a3b      	ldrb	r3, [r7, #8]
 800c9c6:	fa5f fb83 	uxtb.w	fp, r3
 800c9ca:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800c9ce:	7a7b      	ldrb	r3, [r7, #9]
 800c9d0:	b2d9      	uxtb	r1, r3
 800c9d2:	f04f 0200 	mov.w	r2, #0
 800c9d6:	f04f 0300 	mov.w	r3, #0
 800c9da:	f04f 0400 	mov.w	r4, #0
 800c9de:	0214      	lsls	r4, r2, #8
 800c9e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c9e4:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800c9e6:	ea4b 0803 	orr.w	r8, fp, r3
 800c9ea:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800c9ee:	7abb      	ldrb	r3, [r7, #10]
 800c9f0:	b2d9      	uxtb	r1, r3
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	f04f 0300 	mov.w	r3, #0
 800c9fa:	f04f 0400 	mov.w	r4, #0
 800c9fe:	0414      	lsls	r4, r2, #16
 800ca00:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800ca04:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800ca06:	ea48 0103 	orr.w	r1, r8, r3
 800ca0a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800ca0e:	7afb      	ldrb	r3, [r7, #11]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	f04f 0400 	mov.w	r4, #0
 800ca16:	0a1e      	lsrs	r6, r3, #8
 800ca18:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800ca1a:	ea41 0805 	orr.w	r8, r1, r5
 800ca1e:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800ca22:	7b3b      	ldrb	r3, [r7, #12]
 800ca24:	b2dd      	uxtb	r5, r3
 800ca26:	f04f 0600 	mov.w	r6, #0
 800ca2a:	f04f 0300 	mov.w	r3, #0
 800ca2e:	f04f 0400 	mov.w	r4, #0
 800ca32:	002c      	movs	r4, r5
 800ca34:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800ca36:	ea48 0103 	orr.w	r1, r8, r3
 800ca3a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800ca3e:	7b7b      	ldrb	r3, [r7, #13]
 800ca40:	b2dd      	uxtb	r5, r3
 800ca42:	f04f 0600 	mov.w	r6, #0
 800ca46:	f04f 0300 	mov.w	r3, #0
 800ca4a:	f04f 0400 	mov.w	r4, #0
 800ca4e:	022c      	lsls	r4, r5, #8
 800ca50:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800ca52:	ea41 0803 	orr.w	r8, r1, r3
 800ca56:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	b2dd      	uxtb	r5, r3
 800ca5e:	f04f 0600 	mov.w	r6, #0
 800ca62:	f04f 0300 	mov.w	r3, #0
 800ca66:	f04f 0400 	mov.w	r4, #0
 800ca6a:	042c      	lsls	r4, r5, #16
 800ca6c:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800ca6e:	ea48 0103 	orr.w	r1, r8, r3
 800ca72:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	b2dd      	uxtb	r5, r3
 800ca7a:	f04f 0600 	mov.w	r6, #0
 800ca7e:	f04f 0800 	mov.w	r8, #0
 800ca82:	f04f 0900 	mov.w	r9, #0
 800ca86:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800ca8a:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800ca8e:	ea48 0301 	orr.w	r3, r8, r1
 800ca92:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800ca9c:	2301      	movs	r3, #1
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800caa8 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800caa8:	b590      	push	{r4, r7, lr}
 800caaa:	b08b      	sub	sp, #44	; 0x2c
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800cab4:	f107 0310 	add.w	r3, r7, #16
 800cab8:	4619      	mov	r1, r3
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7ff f80e 	bl	800badc <pb_decode_varint>
 800cac0:	4603      	mov	r3, r0
 800cac2:	f083 0301 	eor.w	r3, r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <pb_dec_varint+0x28>
        return false;
 800cacc:	2300      	movs	r3, #0
 800cace:	e078      	b.n	800cbc2 <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	2b08      	cmp	r3, #8
 800cada:	d104      	bne.n	800cae6 <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800cadc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cae0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800cae4:	e005      	b.n	800caf2 <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800cae6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800caea:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800caee:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	2b08      	cmp	r3, #8
 800cafc:	d10a      	bne.n	800cb14 <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cb04:	e9c2 3400 	strd	r3, r4, [r2]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb0e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cb12:	e041      	b.n	800cb98 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d109      	bne.n	800cb34 <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800cb20:	6a3a      	ldr	r2, [r7, #32]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cb2e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cb32:	e031      	b.n	800cb98 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d10c      	bne.n	800cb5a <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800cb40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	801a      	strh	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb4e:	b21b      	sxth	r3, r3
 800cb50:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cb54:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cb58:	e01e      	b.n	800cb98 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d10c      	bne.n	800cb80 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800cb66:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	701a      	strb	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f993 3000 	ldrsb.w	r3, [r3]
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cb7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cb7e:	e00b      	b.n	800cb98 <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <pb_dec_varint+0xe6>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	e000      	b.n	800cb90 <pb_dec_varint+0xe8>
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <pb_dec_varint+0x124>)
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	60d3      	str	r3, [r2, #12]
 800cb94:	2300      	movs	r3, #0
 800cb96:	e014      	b.n	800cbc2 <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800cb98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cba0:	42a2      	cmp	r2, r4
 800cba2:	bf08      	it	eq
 800cba4:	4299      	cmpeq	r1, r3
 800cba6:	d00b      	beq.n	800cbc0 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <pb_dec_varint+0x10e>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	e000      	b.n	800cbb8 <pb_dec_varint+0x110>
 800cbb6:	4b06      	ldr	r3, [pc, #24]	; (800cbd0 <pb_dec_varint+0x128>)
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	60d3      	str	r3, [r2, #12]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e000      	b.n	800cbc2 <pb_dec_varint+0x11a>
    
    return true;
 800cbc0:	2301      	movs	r3, #1
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	372c      	adds	r7, #44	; 0x2c
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd90      	pop	{r4, r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	08012c4c 	.word	0x08012c4c
 800cbd0:	08012c60 	.word	0x08012c60

0800cbd4 <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b089      	sub	sp, #36	; 0x24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7fe ff78 	bl	800badc <pb_decode_varint>
 800cbec:	4603      	mov	r3, r0
 800cbee:	f083 0301 	eor.w	r3, r3, #1
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <pb_dec_uvarint+0x28>
        return false;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e069      	b.n	800ccd0 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d10a      	bne.n	800cc1e <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800cc08:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	e9c2 3400 	strd	r3, r4, [r2]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc18:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cc1c:	e043      	b.n	800cca6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	d10b      	bne.n	800cc42 <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800cc2a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f04f 0400 	mov.w	r4, #0
 800cc3c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cc40:	e031      	b.n	800cca6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d10c      	bne.n	800cc68 <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800cc4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	801a      	strh	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	f04f 0400 	mov.w	r4, #0
 800cc62:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cc66:	e01e      	b.n	800cca6 <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d10c      	bne.n	800cc8e <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800cc74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f04f 0400 	mov.w	r4, #0
 800cc88:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cc8c:	e00b      	b.n	800cca6 <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <pb_dec_uvarint+0xc8>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	e000      	b.n	800cc9e <pb_dec_uvarint+0xca>
 800cc9c:	4b0e      	ldr	r3, [pc, #56]	; (800ccd8 <pb_dec_uvarint+0x104>)
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	60d3      	str	r3, [r2, #12]
 800cca2:	2300      	movs	r3, #0
 800cca4:	e014      	b.n	800ccd0 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800cca6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ccaa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ccae:	42a2      	cmp	r2, r4
 800ccb0:	bf08      	it	eq
 800ccb2:	4299      	cmpeq	r1, r3
 800ccb4:	d00b      	beq.n	800ccce <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <pb_dec_uvarint+0xf0>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	e000      	b.n	800ccc6 <pb_dec_uvarint+0xf2>
 800ccc4:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <pb_dec_uvarint+0x108>)
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	60d3      	str	r3, [r2, #12]
 800ccca:	2300      	movs	r3, #0
 800cccc:	e000      	b.n	800ccd0 <pb_dec_uvarint+0xfc>

    return true;
 800ccce:	2301      	movs	r3, #1
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3724      	adds	r7, #36	; 0x24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd90      	pop	{r4, r7, pc}
 800ccd8:	08012c4c 	.word	0x08012c4c
 800ccdc:	08012c60 	.word	0x08012c60

0800cce0 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800cce0:	b590      	push	{r4, r7, lr}
 800cce2:	b089      	sub	sp, #36	; 0x24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800ccec:	f107 0310 	add.w	r3, r7, #16
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fdf0 	bl	800c8d8 <pb_decode_svarint>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f083 0301 	eor.w	r3, r3, #1
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <pb_dec_svarint+0x28>
        return false;
 800cd04:	2300      	movs	r3, #0
 800cd06:	e06b      	b.n	800cde0 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	2b08      	cmp	r3, #8
 800cd12:	d10a      	bne.n	800cd2a <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800cd14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	e9c2 3400 	strd	r3, r4, [r2]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cd24:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cd28:	e045      	b.n	800cdb6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d10b      	bne.n	800cd4e <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800cd36:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cd48:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cd4c:	e033      	b.n	800cdb6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d10d      	bne.n	800cd76 <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800cd5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd5e:	b21a      	sxth	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	801a      	strh	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd6a:	b21b      	sxth	r3, r3
 800cd6c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cd70:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cd74:	e01f      	b.n	800cdb6 <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d10d      	bne.n	800cd9e <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800cd82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd86:	b25a      	sxtb	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f993 3000 	ldrsb.w	r3, [r3]
 800cd92:	b25b      	sxtb	r3, r3
 800cd94:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800cd98:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800cd9c:	e00b      	b.n	800cdb6 <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <pb_dec_svarint+0xcc>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	e000      	b.n	800cdae <pb_dec_svarint+0xce>
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <pb_dec_svarint+0x108>)
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	60d3      	str	r3, [r2, #12]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e014      	b.n	800cde0 <pb_dec_svarint+0x100>

    if (clamped != value)
 800cdb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cdba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cdbe:	42a2      	cmp	r2, r4
 800cdc0:	bf08      	it	eq
 800cdc2:	4299      	cmpeq	r1, r3
 800cdc4:	d00b      	beq.n	800cdde <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <pb_dec_svarint+0xf4>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	e000      	b.n	800cdd6 <pb_dec_svarint+0xf6>
 800cdd4:	4b05      	ldr	r3, [pc, #20]	; (800cdec <pb_dec_svarint+0x10c>)
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	60d3      	str	r3, [r2, #12]
 800cdda:	2300      	movs	r3, #0
 800cddc:	e000      	b.n	800cde0 <pb_dec_svarint+0x100>
    
    return true;
 800cdde:	2301      	movs	r3, #1
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3724      	adds	r7, #36	; 0x24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd90      	pop	{r4, r7, pc}
 800cde8:	08012c4c 	.word	0x08012c4c
 800cdec:	08012c60 	.word	0x08012c60

0800cdf0 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7ff fda5 	bl	800c94e <pb_decode_fixed32>
 800ce04:	4603      	mov	r3, r0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	60f8      	str	r0, [r7, #12]
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800ce1a:	6879      	ldr	r1, [r7, #4]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff fdbc 	bl	800c99a <pb_decode_fixed64>
 800ce22:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b088      	sub	sp, #32
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800ce38:	f107 0314 	add.w	r3, r7, #20
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7fe fe3c 	bl	800babc <pb_decode_varint32>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f083 0301 	eor.w	r3, r3, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <pb_dec_bytes+0x28>
        return false;
 800ce50:	2300      	movs	r3, #0
 800ce52:	e056      	b.n	800cf02 <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce5a:	d30b      	bcc.n	800ce74 <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <pb_dec_bytes+0x3e>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	e000      	b.n	800ce6c <pb_dec_bytes+0x40>
 800ce6a:	4b28      	ldr	r3, [pc, #160]	; (800cf0c <pb_dec_bytes+0xe0>)
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	60d3      	str	r3, [r2, #12]
 800ce70:	2300      	movs	r3, #0
 800ce72:	e046      	b.n	800cf02 <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	3302      	adds	r3, #2
 800ce78:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	69fa      	ldr	r2, [r7, #28]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d20b      	bcs.n	800ce9a <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <pb_dec_bytes+0x64>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	e000      	b.n	800ce92 <pb_dec_bytes+0x66>
 800ce90:	4b1f      	ldr	r3, [pc, #124]	; (800cf10 <pb_dec_bytes+0xe4>)
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	60d3      	str	r3, [r2, #12]
 800ce96:	2300      	movs	r3, #0
 800ce98:	e033      	b.n	800cf02 <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	789b      	ldrb	r3, [r3, #2]
 800ce9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cea2:	2b80      	cmp	r3, #128	; 0x80
 800cea4:	d10b      	bne.n	800cebe <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <pb_dec_bytes+0x88>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	e000      	b.n	800ceb6 <pb_dec_bytes+0x8a>
 800ceb4:	4b17      	ldr	r3, [pc, #92]	; (800cf14 <pb_dec_bytes+0xe8>)
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	60d3      	str	r3, [r2, #12]
 800ceba:	2300      	movs	r3, #0
 800cebc:	e021      	b.n	800cf02 <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	461a      	mov	r2, r3
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d90b      	bls.n	800cee6 <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <pb_dec_bytes+0xb0>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	e000      	b.n	800cede <pb_dec_bytes+0xb2>
 800cedc:	4b0b      	ldr	r3, [pc, #44]	; (800cf0c <pb_dec_bytes+0xe0>)
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	60d3      	str	r3, [r2, #12]
 800cee2:	2300      	movs	r3, #0
 800cee4:	e00d      	b.n	800cf02 <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	3302      	adds	r3, #2
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	4619      	mov	r1, r3
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7fe fc92 	bl	800b824 <pb_read>
 800cf00:	4603      	mov	r3, r0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3720      	adds	r7, #32
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	08012c74 	.word	0x08012c74
 800cf10:	08012c84 	.word	0x08012c84
 800cf14:	08012bec 	.word	0x08012bec

0800cf18 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b088      	sub	sp, #32
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800cf24:	f107 0314 	add.w	r3, r7, #20
 800cf28:	4619      	mov	r1, r3
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7fe fdc6 	bl	800babc <pb_decode_varint32>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f083 0301 	eor.w	r3, r3, #1
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d001      	beq.n	800cf40 <pb_dec_string+0x28>
        return false;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e046      	b.n	800cfce <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	3301      	adds	r3, #1
 800cf44:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d20b      	bcs.n	800cf66 <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <pb_dec_string+0x44>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	e000      	b.n	800cf5e <pb_dec_string+0x46>
 800cf5c:	4b1e      	ldr	r3, [pc, #120]	; (800cfd8 <pb_dec_string+0xc0>)
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	60d3      	str	r3, [r2, #12]
 800cf62:	2300      	movs	r3, #0
 800cf64:	e033      	b.n	800cfce <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	789b      	ldrb	r3, [r3, #2]
 800cf6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cf6e:	2b80      	cmp	r3, #128	; 0x80
 800cf70:	d10b      	bne.n	800cf8a <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <pb_dec_string+0x68>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	e000      	b.n	800cf82 <pb_dec_string+0x6a>
 800cf80:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <pb_dec_string+0xc4>)
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	60d3      	str	r3, [r2, #12]
 800cf86:	2300      	movs	r3, #0
 800cf88:	e021      	b.n	800cfce <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	461a      	mov	r2, r3
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d90b      	bls.n	800cfb2 <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <pb_dec_string+0x90>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	e000      	b.n	800cfaa <pb_dec_string+0x92>
 800cfa8:	4b0d      	ldr	r3, [pc, #52]	; (800cfe0 <pb_dec_string+0xc8>)
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	60d3      	str	r3, [r2, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e00d      	b.n	800cfce <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7fe fc33 	bl	800b824 <pb_read>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	2200      	movs	r2, #0
 800cfca:	701a      	strb	r2, [r3, #0]
    return status;
 800cfcc:	7efb      	ldrb	r3, [r7, #27]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	08012c84 	.word	0x08012c84
 800cfdc:	08012bec 	.word	0x08012bec
 800cfe0:	08012c94 	.word	0x08012c94

0800cfe4 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08a      	sub	sp, #40	; 0x28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800cff6:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800cff8:	f107 0310 	add.w	r3, r7, #16
 800cffc:	4619      	mov	r1, r3
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7fe fedc 	bl	800bdbc <pb_make_string_substream>
 800d004:	4603      	mov	r3, r0
 800d006:	f083 0301 	eor.w	r3, r3, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <pb_dec_submessage+0x30>
        return false;
 800d010:	2300      	movs	r3, #0
 800d012:	e03b      	b.n	800d08c <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10b      	bne.n	800d036 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <pb_dec_submessage+0x48>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	e000      	b.n	800d02e <pb_dec_submessage+0x4a>
 800d02c:	4b19      	ldr	r3, [pc, #100]	; (800d094 <pb_dec_submessage+0xb0>)
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	60d3      	str	r3, [r2, #12]
 800d032:	2300      	movs	r3, #0
 800d034:	e02a      	b.n	800d08c <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	789b      	ldrb	r3, [r3, #2]
 800d03a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d03e:	2b20      	cmp	r3, #32
 800d040:	d10a      	bne.n	800d058 <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800d042:	f107 0310 	add.w	r3, r7, #16
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	6a39      	ldr	r1, [r7, #32]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff fbfc 	bl	800c848 <pb_decode>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d056:	e009      	b.n	800d06c <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800d058:	f107 0310 	add.w	r3, r7, #16
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6a39      	ldr	r1, [r7, #32]
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff fa87 	bl	800c574 <pb_decode_noinit>
 800d066:	4603      	mov	r3, r0
 800d068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800d06c:	f107 0310 	add.w	r3, r7, #16
 800d070:	4619      	mov	r1, r3
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7fe fedc 	bl	800be30 <pb_close_string_substream>
 800d078:	4603      	mov	r3, r0
 800d07a:	f083 0301 	eor.w	r3, r3, #1
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <pb_dec_submessage+0xa4>
        return false;
 800d084:	2300      	movs	r3, #0
 800d086:	e001      	b.n	800d08c <pb_dec_submessage+0xa8>
    return status;
 800d088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3728      	adds	r7, #40	; 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	08012ca4 	.word	0x08012ca4

0800d098 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f7fe fd06 	bl	800babc <pb_decode_varint32>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f083 0301 	eor.w	r3, r3, #1
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e03b      	b.n	800d138 <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0c6:	d30b      	bcc.n	800d0e0 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <pb_dec_fixed_length_bytes+0x3e>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	e000      	b.n	800d0d8 <pb_dec_fixed_length_bytes+0x40>
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <pb_dec_fixed_length_bytes+0xa8>)
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	60d3      	str	r3, [r2, #12]
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e02b      	b.n	800d138 <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10a      	bne.n	800d0fc <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f002 fa84 	bl	800f600 <memset>
        return true;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e01d      	b.n	800d138 <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d102:	b29b      	uxth	r3, r3
 800d104:	461a      	mov	r2, r3
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d00b      	beq.n	800d124 <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <pb_dec_fixed_length_bytes+0x82>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	e000      	b.n	800d11c <pb_dec_fixed_length_bytes+0x84>
 800d11a:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <pb_dec_fixed_length_bytes+0xac>)
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	60d3      	str	r3, [r2, #12]
 800d120:	2300      	movs	r3, #0
 800d122:	e009      	b.n	800d138 <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	461a      	mov	r2, r3
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7fe fb77 	bl	800b824 <pb_read>
 800d136:	4603      	mov	r3, r0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	08012c74 	.word	0x08012c74
 800d144:	08012cc0 	.word	0x08012cc0

0800d148 <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d02b      	beq.n	800d1b4 <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	68da      	ldr	r2, [r3, #12]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	441a      	add	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d90b      	bls.n	800d184 <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <pb_write+0x32>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	e000      	b.n	800d17c <pb_write+0x34>
 800d17a:	4b14      	ldr	r3, [pc, #80]	; (800d1cc <pb_write+0x84>)
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	6113      	str	r3, [r2, #16]
 800d180:	2300      	movs	r3, #0
 800d182:	e01e      	b.n	800d1c2 <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	4798      	blx	r3
 800d190:	4603      	mov	r3, r0
 800d192:	f083 0301 	eor.w	r3, r3, #1
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <pb_write+0x62>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	e000      	b.n	800d1ac <pb_write+0x64>
 800d1aa:	4b09      	ldr	r3, [pc, #36]	; (800d1d0 <pb_write+0x88>)
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	6113      	str	r3, [r2, #16]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e006      	b.n	800d1c2 <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	68da      	ldr	r2, [r3, #12]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	60da      	str	r2, [r3, #12]
    return true;
 800d1c0:	2301      	movs	r3, #1
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	08012ce4 	.word	0x08012ce4
 800d1d0:	08012cf0 	.word	0x08012cf0

0800d1d4 <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800d1d4:	b590      	push	{r4, r7, lr}
 800d1d6:	b08d      	sub	sp, #52	; 0x34
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <encode_array+0x18>
        return true;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0fb      	b.n	800d3e4 <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	789b      	ldrb	r3, [r3, #2]
 800d1f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d1f4:	2b80      	cmp	r3, #128	; 0x80
 800d1f6:	d013      	beq.n	800d220 <encode_array+0x4c>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	461a      	mov	r2, r3
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	4293      	cmp	r3, r2
 800d206:	d90b      	bls.n	800d220 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <encode_array+0x42>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	e000      	b.n	800d218 <encode_array+0x44>
 800d216:	4b75      	ldr	r3, [pc, #468]	; (800d3ec <encode_array+0x218>)
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	6113      	str	r3, [r2, #16]
 800d21c:	2300      	movs	r3, #0
 800d21e:	e0e1      	b.n	800d3e4 <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	789b      	ldrb	r3, [r3, #2]
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	2b04      	cmp	r3, #4
 800d22a:	f300 808d 	bgt.w	800d348 <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	b29b      	uxth	r3, r3
 800d234:	461a      	mov	r2, r3
 800d236:	2102      	movs	r1, #2
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 fcb1 	bl	800dba0 <pb_encode_tag>
 800d23e:	4603      	mov	r3, r0
 800d240:	f083 0301 	eor.w	r3, r3, #1
 800d244:	b2db      	uxtb	r3, r3
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <encode_array+0x7a>
            return false;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e0ca      	b.n	800d3e4 <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	789b      	ldrb	r3, [r3, #2]
 800d252:	f003 030f 	and.w	r3, r3, #15
 800d256:	2b03      	cmp	r3, #3
 800d258:	d103      	bne.n	800d262 <encode_array+0x8e>
        {
            size = 4 * count;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
 800d260:	e035      	b.n	800d2ce <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	789b      	ldrb	r3, [r3, #2]
 800d266:	f003 030f 	and.w	r3, r3, #15
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d103      	bne.n	800d276 <encode_array+0xa2>
        {
            size = 8 * count;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	00db      	lsls	r3, r3, #3
 800d272:	627b      	str	r3, [r7, #36]	; 0x24
 800d274:	e02b      	b.n	800d2ce <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800d276:	f107 0310 	add.w	r3, r7, #16
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	605a      	str	r2, [r3, #4]
 800d280:	609a      	str	r2, [r3, #8]
 800d282:	60da      	str	r2, [r3, #12]
 800d284:	611a      	str	r2, [r3, #16]
            p = pData;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800d28a:	2300      	movs	r3, #0
 800d28c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d28e:	e018      	b.n	800d2c2 <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800d290:	f107 0010 	add.w	r0, r7, #16
 800d294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	4798      	blx	r3
 800d29c:	4603      	mov	r3, r0
 800d29e:	f083 0301 	eor.w	r3, r3, #1
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <encode_array+0xd8>
                    return false;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	e09b      	b.n	800d3e4 <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b8:	4413      	add	r3, r2
 800d2ba:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	3301      	adds	r3, #1
 800d2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d3e2      	bcc.n	800d290 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	f04f 0400 	mov.w	r4, #0
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4623      	mov	r3, r4
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 fb5c 	bl	800d996 <pb_encode_varint>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f083 0301 	eor.w	r3, r3, #1
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <encode_array+0x11a>
            return false;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e07a      	b.n	800d3e4 <encode_array+0x210>
        
        if (stream->callback == NULL)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800d2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7ff ff24 	bl	800d148 <pb_write>
 800d300:	4603      	mov	r3, r0
 800d302:	e06f      	b.n	800d3e4 <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800d308:	2300      	movs	r3, #0
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d30c:	e017      	b.n	800d33e <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800d30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	4798      	blx	r3
 800d318:	4603      	mov	r3, r0
 800d31a:	f083 0301 	eor.w	r3, r3, #1
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <encode_array+0x154>
                return false;
 800d324:	2300      	movs	r3, #0
 800d326:	e05d      	b.n	800d3e4 <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	461a      	mov	r2, r3
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	4413      	add	r3, r2
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	3301      	adds	r3, #1
 800d33c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d3e3      	bcc.n	800d30e <encode_array+0x13a>
 800d346:	e04c      	b.n	800d3e2 <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800d34c:	2300      	movs	r3, #0
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d350:	e043      	b.n	800d3da <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 fc47 	bl	800dbe8 <pb_encode_tag_for_field>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f083 0301 	eor.w	r3, r3, #1
 800d360:	b2db      	uxtb	r3, r3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <encode_array+0x196>
                return false;
 800d366:	2300      	movs	r3, #0
 800d368:	e03c      	b.n	800d3e4 <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	789b      	ldrb	r3, [r3, #2]
 800d36e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d372:	2b80      	cmp	r3, #128	; 0x80
 800d374:	d119      	bne.n	800d3aa <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	789b      	ldrb	r3, [r3, #2]
 800d37a:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800d37e:	2b06      	cmp	r3, #6
 800d380:	d005      	beq.n	800d38e <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	789b      	ldrb	r3, [r3, #2]
 800d386:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800d38a:	2b05      	cmp	r3, #5
 800d38c:	d10d      	bne.n	800d3aa <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	4798      	blx	r3
 800d39a:	4603      	mov	r3, r0
 800d39c:	f083 0301 	eor.w	r3, r3, #1
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00e      	beq.n	800d3c4 <encode_array+0x1f0>
                    return false;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e01c      	b.n	800d3e4 <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800d3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	4798      	blx	r3
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	f083 0301 	eor.w	r3, r3, #1
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <encode_array+0x1f0>
                    return false;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e00f      	b.n	800d3e4 <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	4413      	add	r3, r2
 800d3d2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d3b7      	bcc.n	800d352 <encode_array+0x17e>
        }
    }
    
    return true;
 800d3e2:	2301      	movs	r3, #1
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3734      	adds	r7, #52	; 0x34
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd90      	pop	{r4, r7, pc}
 800d3ec:	08012cfc 	.word	0x08012cfc

0800d3f0 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800d3f0:	b590      	push	{r4, r7, lr}
 800d3f2:	b08d      	sub	sp, #52	; 0x34
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	789b      	ldrb	r3, [r3, #2]
 800d3fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800d408:	b21b      	sxth	r3, r3
 800d40a:	461a      	mov	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	4413      	add	r3, r2
 800d410:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800d412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d416:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 800d41e:	2300      	movs	r3, #0
 800d420:	e0af      	b.n	800d582 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800d422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d42a:	2b20      	cmp	r3, #32
 800d42c:	d107      	bne.n	800d43e <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	bf0c      	ite	eq
 800d436:	2301      	moveq	r3, #1
 800d438:	2300      	movne	r3, #0
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	e0a1      	b.n	800d582 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800d43e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d446:	2b30      	cmp	r3, #48	; 0x30
 800d448:	d107      	bne.n	800d45a <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bf0c      	ite	eq
 800d452:	2301      	moveq	r3, #1
 800d454:	2300      	movne	r3, #0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	e093      	b.n	800d582 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800d45a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d45e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d462:	2b10      	cmp	r3, #16
 800d464:	d113      	bne.n	800d48e <pb_check_proto3_default_value+0x9e>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800d46c:	b21b      	sxth	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00d      	beq.n	800d48e <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f083 0301 	eor.w	r3, r3, #1
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	e079      	b.n	800d582 <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800d48e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d15b      	bne.n	800d552 <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800d49a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d49e:	f003 030f 	and.w	r3, r3, #15
 800d4a2:	2b05      	cmp	r3, #5
 800d4a4:	d109      	bne.n	800d4ba <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf0c      	ite	eq
 800d4b2:	2301      	moveq	r3, #1
 800d4b4:	2300      	movne	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	e063      	b.n	800d582 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800d4ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d4be:	f003 030f 	and.w	r3, r3, #15
 800d4c2:	2b06      	cmp	r3, #6
 800d4c4:	d107      	bne.n	800d4d6 <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bf0c      	ite	eq
 800d4ce:	2301      	moveq	r3, #1
 800d4d0:	2300      	movne	r3, #0
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	e055      	b.n	800d582 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800d4d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	2b09      	cmp	r3, #9
 800d4e0:	d109      	bne.n	800d4f6 <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bf0c      	ite	eq
 800d4ee:	2301      	moveq	r3, #1
 800d4f0:	2300      	movne	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	e045      	b.n	800d582 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800d4f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d4fa:	f003 030f 	and.w	r3, r3, #15
 800d4fe:	2b07      	cmp	r3, #7
 800d500:	d127      	bne.n	800d552 <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 400b 	ldr.w	r4, [r3, #11]
 800d508:	6838      	ldr	r0, [r7, #0]
 800d50a:	f000 f9f0 	bl	800d8ee <pb_const_cast>
 800d50e:	4602      	mov	r2, r0
 800d510:	f107 0308 	add.w	r3, r7, #8
 800d514:	4621      	mov	r1, r4
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe f878 	bl	800b60c <pb_field_iter_begin>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d015      	beq.n	800d54e <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f7ff ff61 	bl	800d3f0 <pb_check_proto3_default_value>
 800d52e:	4603      	mov	r3, r0
 800d530:	f083 0301 	eor.w	r3, r3, #1
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e021      	b.n	800d582 <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe f897 	bl	800b676 <pb_field_iter_next>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1e9      	bne.n	800d522 <pb_check_proto3_default_value+0x132>
            }
            return true;
 800d54e:	2301      	movs	r3, #1
 800d550:	e017      	b.n	800d582 <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 800d556:	2300      	movs	r3, #0
 800d558:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d55a:	e00a      	b.n	800d572 <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 800d55c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d55e:	6a3a      	ldr	r2, [r7, #32]
 800d560:	4413      	add	r3, r2
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 800d568:	2300      	movs	r3, #0
 800d56a:	e00a      	b.n	800d582 <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 800d56c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d56e:	3301      	adds	r3, #1
 800d570:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d578:	b29b      	uxth	r3, r3
 800d57a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d3ed      	bcc.n	800d55c <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 800d580:	2301      	movs	r3, #1
	}
}
 800d582:	4618      	mov	r0, r3
 800d584:	3734      	adds	r7, #52	; 0x34
 800d586:	46bd      	mov	sp, r7
 800d588:	bd90      	pop	{r4, r7, pc}
	...

0800d58c <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b08a      	sub	sp, #40	; 0x28
 800d590:	af02      	add	r7, sp, #8
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 800d598:	f107 0313 	add.w	r3, r7, #19
 800d59c:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	789b      	ldrb	r3, [r3, #2]
 800d5a2:	f003 030f 	and.w	r3, r3, #15
 800d5a6:	4a75      	ldr	r2, [pc, #468]	; (800d77c <encode_basic_field+0x1f0>)
 800d5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ac:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800d5b4:	b21b      	sxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	61fb      	str	r3, [r7, #28]
 800d5ca:	e019      	b.n	800d600 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	789b      	ldrb	r3, [r3, #2]
 800d5d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d5d4:	2b10      	cmp	r3, #16
 800d5d6:	d111      	bne.n	800d5fc <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	68b8      	ldr	r0, [r7, #8]
 800d5dc:	f7ff ff08 	bl	800d3f0 <pb_check_proto3_default_value>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bf14      	ite	ne
 800d5e6:	2301      	movne	r3, #1
 800d5e8:	2300      	moveq	r3, #0
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	f083 0301 	eor.w	r3, r3, #1
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	74fb      	strb	r3, [r7, #19]
 800d5fa:	e001      	b.n	800d600 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d608:	2b80      	cmp	r3, #128	; 0x80
 800d60a:	d109      	bne.n	800d620 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	bf14      	ite	ne
 800d618:	2301      	movne	r3, #1
 800d61a:	2300      	moveq	r3, #0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	789b      	ldrb	r3, [r3, #2]
 800d624:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d628:	2b10      	cmp	r3, #16
 800d62a:	d031      	beq.n	800d690 <encode_basic_field+0x104>
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	dc02      	bgt.n	800d636 <encode_basic_field+0xaa>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <encode_basic_field+0xb4>
 800d634:	e08a      	b.n	800d74c <encode_basic_field+0x1c0>
 800d636:	2b20      	cmp	r3, #32
 800d638:	d047      	beq.n	800d6ca <encode_basic_field+0x13e>
 800d63a:	2b30      	cmp	r3, #48	; 0x30
 800d63c:	d066      	beq.n	800d70c <encode_basic_field+0x180>
 800d63e:	e085      	b.n	800d74c <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10b      	bne.n	800d65e <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <encode_basic_field+0xc8>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	e000      	b.n	800d656 <encode_basic_field+0xca>
 800d654:	4b4a      	ldr	r3, [pc, #296]	; (800d780 <encode_basic_field+0x1f4>)
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	6113      	str	r3, [r2, #16]
 800d65a:	2300      	movs	r3, #0
 800d65c:	e08a      	b.n	800d774 <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 800d65e:	68b9      	ldr	r1, [r7, #8]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fac1 	bl	800dbe8 <pb_encode_tag_for_field>
 800d666:	4603      	mov	r3, r0
 800d668:	f083 0301 	eor.w	r3, r3, #1
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <encode_basic_field+0xea>
                return false;
 800d672:	2300      	movs	r3, #0
 800d674:	e07e      	b.n	800d774 <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	68b9      	ldr	r1, [r7, #8]
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	4798      	blx	r3
 800d680:	4603      	mov	r3, r0
 800d682:	f083 0301 	eor.w	r3, r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d06b      	beq.n	800d764 <encode_basic_field+0x1d8>
                return false;
 800d68c:	2300      	movs	r3, #0
 800d68e:	e071      	b.n	800d774 <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d067      	beq.n	800d768 <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f000 faa4 	bl	800dbe8 <pb_encode_tag_for_field>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f083 0301 	eor.w	r3, r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <encode_basic_field+0x124>
                    return false;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e061      	b.n	800d774 <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	4798      	blx	r3
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	f083 0301 	eor.w	r3, r3, #1
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d050      	beq.n	800d768 <encode_basic_field+0x1dc>
                    return false;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e054      	b.n	800d774 <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800d6d0:	b21b      	sxth	r3, r3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	837b      	strh	r3, [r7, #26]
 800d6dc:	e005      	b.n	800d6ea <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	7a5a      	ldrb	r2, [r3, #9]
 800d6e2:	7a9b      	ldrb	r3, [r3, #10]
 800d6e4:	021b      	lsls	r3, r3, #8
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 800d6ea:	8b7a      	ldrh	r2, [r7, #26]
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	68b9      	ldr	r1, [r7, #8]
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f7ff fd6c 	bl	800d1d4 <encode_array>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f083 0301 	eor.w	r3, r3, #1
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d031      	beq.n	800d76c <encode_basic_field+0x1e0>
                return false;
 800d708:	2300      	movs	r3, #0
 800d70a:	e033      	b.n	800d774 <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	b29b      	uxth	r3, r3
 800d716:	429a      	cmp	r2, r3
 800d718:	d12a      	bne.n	800d770 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 fa63 	bl	800dbe8 <pb_encode_tag_for_field>
 800d722:	4603      	mov	r3, r0
 800d724:	f083 0301 	eor.w	r3, r3, #1
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <encode_basic_field+0x1a6>
                    return false;
 800d72e:	2300      	movs	r3, #0
 800d730:	e020      	b.n	800d774 <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	68b9      	ldr	r1, [r7, #8]
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	4798      	blx	r3
 800d73c:	4603      	mov	r3, r0
 800d73e:	f083 0301 	eor.w	r3, r3, #1
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d013      	beq.n	800d770 <encode_basic_field+0x1e4>
                    return false;
 800d748:	2300      	movs	r3, #0
 800d74a:	e013      	b.n	800d774 <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <encode_basic_field+0x1ce>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	e000      	b.n	800d75c <encode_basic_field+0x1d0>
 800d75a:	4b0a      	ldr	r3, [pc, #40]	; (800d784 <encode_basic_field+0x1f8>)
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	6113      	str	r3, [r2, #16]
 800d760:	2300      	movs	r3, #0
 800d762:	e007      	b.n	800d774 <encode_basic_field+0x1e8>
            break;
 800d764:	bf00      	nop
 800d766:	e004      	b.n	800d772 <encode_basic_field+0x1e6>
            break;
 800d768:	bf00      	nop
 800d76a:	e002      	b.n	800d772 <encode_basic_field+0x1e6>
            break;
 800d76c:	bf00      	nop
 800d76e:	e000      	b.n	800d772 <encode_basic_field+0x1e6>
            break;
 800d770:	bf00      	nop
    }
    
    return true;
 800d772:	2301      	movs	r3, #1
}
 800d774:	4618      	mov	r0, r3
 800d776:	3720      	adds	r7, #32
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	08012f1c 	.word	0x08012f1c
 800d780:	08012d14 	.word	0x08012d14
 800d784:	08012d2c 	.word	0x08012d2c

0800d788 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	3304      	adds	r3, #4
 800d79c:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d017      	beq.n	800d7d6 <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	68b9      	ldr	r1, [r7, #8]
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	4798      	blx	r3
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	f083 0301 	eor.w	r3, r3, #1
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00b      	beq.n	800d7d6 <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <encode_callback_field+0x44>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	e000      	b.n	800d7ce <encode_callback_field+0x46>
 800d7cc:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <encode_callback_field+0x58>)
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	6113      	str	r3, [r2, #16]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e000      	b.n	800d7d8 <encode_callback_field+0x50>
    }
    return true;
 800d7d6:	2301      	movs	r3, #1
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	08012d40 	.word	0x08012d40

0800d7e4 <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	789b      	ldrb	r3, [r3, #2]
 800d7f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d7f8:	2b40      	cmp	r3, #64	; 0x40
 800d7fa:	d00a      	beq.n	800d812 <encode_field+0x2e>
 800d7fc:	2b80      	cmp	r3, #128	; 0x80
 800d7fe:	d001      	beq.n	800d804 <encode_field+0x20>
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10d      	bne.n	800d820 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7ff febf 	bl	800d58c <encode_basic_field>
 800d80e:	4603      	mov	r3, r0
 800d810:	e011      	b.n	800d836 <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff ffb6 	bl	800d788 <encode_callback_field>
 800d81c:	4603      	mov	r3, r0
 800d81e:	e00a      	b.n	800d836 <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <encode_field+0x4a>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	e000      	b.n	800d830 <encode_field+0x4c>
 800d82e:	4b04      	ldr	r3, [pc, #16]	; (800d840 <encode_field+0x5c>)
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	6113      	str	r3, [r2, #16]
 800d834:	2300      	movs	r3, #0
    }
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	08012d2c 	.word	0x08012d2c

0800d844 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	789b      	ldrb	r3, [r3, #2]
 800d85a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d85e:	2b80      	cmp	r3, #128	; 0x80
 800d860:	d108      	bne.n	800d874 <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	3304      	adds	r3, #4
 800d866:	461a      	mov	r2, r3
 800d868:	68f9      	ldr	r1, [r7, #12]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff ffba 	bl	800d7e4 <encode_field>
 800d870:	4603      	mov	r3, r0
 800d872:	e007      	b.n	800d884 <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	461a      	mov	r2, r3
 800d87a:	68f9      	ldr	r1, [r7, #12]
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7ff ffb1 	bl	800d7e4 <encode_field>
 800d882:	4603      	mov	r3, r0
    }
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 800d89e:	e01e      	b.n	800d8de <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d008      	beq.n	800d8bc <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	6979      	ldr	r1, [r7, #20]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	4798      	blx	r3
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	74fb      	strb	r3, [r7, #19]
 800d8ba:	e005      	b.n	800d8c8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800d8bc:	6979      	ldr	r1, [r7, #20]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff ffc0 	bl	800d844 <default_extension_encoder>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	74fb      	strb	r3, [r7, #19]

        if (!status)
 800d8c8:	7cfb      	ldrb	r3, [r7, #19]
 800d8ca:	f083 0301 	eor.w	r3, r3, #1
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <encode_extension_field+0x4c>
            return false;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e006      	b.n	800d8e6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	617b      	str	r3, [r7, #20]
    while (extension)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1dd      	bne.n	800d8a0 <encode_extension_field+0x14>
    }
    
    return true;
 800d8e4:	2301      	movs	r3, #1
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 800d8ee:	b480      	push	{r7}
 800d8f0:	b085      	sub	sp, #20
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08a      	sub	sp, #40	; 0x28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff ffea 	bl	800d8ee <pb_const_cast>
 800d91a:	4602      	mov	r2, r0
 800d91c:	f107 0310 	add.w	r3, r7, #16
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fd fe72 	bl	800b60c <pb_field_iter_begin>
 800d928:	4603      	mov	r3, r0
 800d92a:	f083 0301 	eor.w	r3, r3, #1
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <pb_encode+0x30>
        return true; /* Empty message type */
 800d934:	2301      	movs	r3, #1
 800d936:	e02a      	b.n	800d98e <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	789b      	ldrb	r3, [r3, #2]
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	2b08      	cmp	r3, #8
 800d942:	d10d      	bne.n	800d960 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	6a3a      	ldr	r2, [r7, #32]
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff ff9e 	bl	800d88c <encode_extension_field>
 800d950:	4603      	mov	r3, r0
 800d952:	f083 0301 	eor.w	r3, r3, #1
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00f      	beq.n	800d97c <pb_encode+0x74>
                return false;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e016      	b.n	800d98e <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	6a3a      	ldr	r2, [r7, #32]
 800d964:	4619      	mov	r1, r3
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7ff ff3c 	bl	800d7e4 <encode_field>
 800d96c:	4603      	mov	r3, r0
 800d96e:	f083 0301 	eor.w	r3, r3, #1
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <pb_encode+0x74>
                return false;
 800d978:	2300      	movs	r3, #0
 800d97a:	e008      	b.n	800d98e <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 800d97c:	f107 0310 	add.w	r3, r7, #16
 800d980:	4618      	mov	r0, r3
 800d982:	f7fd fe78 	bl	800b676 <pb_field_iter_next>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1d5      	bne.n	800d938 <pb_encode+0x30>
    
    return true;
 800d98c:	2301      	movs	r3, #1
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3728      	adds	r7, #40	; 0x28
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800d996:	b590      	push	{r4, r7, lr}
 800d998:	b08b      	sub	sp, #44	; 0x2c
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 800d9a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d9aa:	2c00      	cmp	r4, #0
 800d9ac:	bf08      	it	eq
 800d9ae:	2b80      	cmpeq	r3, #128	; 0x80
 800d9b0:	d223      	bcs.n	800d9fa <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 800d9b2:	783b      	ldrb	r3, [r7, #0]
 800d9b4:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 800d9b6:	f107 0317 	add.w	r3, r7, #23
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	4619      	mov	r1, r3
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff fbc2 	bl	800d148 <pb_write>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	e035      	b.n	800da34 <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800d9c8:	783b      	ldrb	r3, [r7, #0]
 800d9ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9ce:	b2d9      	uxtb	r1, r3
 800d9d0:	f107 0218 	add.w	r2, r7, #24
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	4413      	add	r3, r2
 800d9d8:	460a      	mov	r2, r1
 800d9da:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 800d9dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d9e0:	f04f 0300 	mov.w	r3, #0
 800d9e4:	f04f 0400 	mov.w	r4, #0
 800d9e8:	09cb      	lsrs	r3, r1, #7
 800d9ea:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800d9ee:	09d4      	lsrs	r4, r2, #7
 800d9f0:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 800d9fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d9fe:	4323      	orrs	r3, r4
 800da00:	d1e2      	bne.n	800d9c8 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	3b01      	subs	r3, #1
 800da06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da0a:	4413      	add	r3, r2
 800da0c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	3b01      	subs	r3, #1
 800da14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800da18:	b2d2      	uxtb	r2, r2
 800da1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800da1e:	440b      	add	r3, r1
 800da20:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 800da24:	f107 0318 	add.w	r3, r7, #24
 800da28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2a:	4619      	mov	r1, r3
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7ff fb8b 	bl	800d148 <pb_write>
 800da32:	4603      	mov	r3, r0
}
 800da34:	4618      	mov	r0, r3
 800da36:	372c      	adds	r7, #44	; 0x2c
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd90      	pop	{r4, r7, pc}

0800da3c <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 800da48:	e9d7 3400 	ldrd	r3, r4, [r7]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f174 0300 	sbcs.w	r3, r4, #0
 800da52:	da0d      	bge.n	800da70 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 800da54:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da58:	184b      	adds	r3, r1, r1
 800da5a:	eb42 0402 	adc.w	r4, r2, r2
 800da5e:	4619      	mov	r1, r3
 800da60:	4622      	mov	r2, r4
 800da62:	ea6f 0301 	mvn.w	r3, r1
 800da66:	ea6f 0402 	mvn.w	r4, r2
 800da6a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800da6e:	e006      	b.n	800da7e <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800da70:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da74:	184b      	adds	r3, r1, r1
 800da76:	eb42 0402 	adc.w	r4, r2, r2
 800da7a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800da7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7ff ff87 	bl	800d996 <pb_encode_varint>
 800da88:	4603      	mov	r3, r0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd90      	pop	{r4, r7, pc}

0800da92 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
 800da9a:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	0a1b      	lsrs	r3, r3, #8
 800daac:	b2db      	uxtb	r3, r3
 800daae:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	0c1b      	lsrs	r3, r3, #16
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	0e1b      	lsrs	r3, r3, #24
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 800dac0:	f107 0308 	add.w	r3, r7, #8
 800dac4:	2204      	movs	r2, #4
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7ff fb3d 	bl	800d148 <pb_write>
 800dace:	4603      	mov	r3, r0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800dad8:	b590      	push	{r4, r7, lr}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dae8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800daec:	7c3b      	ldrb	r3, [r7, #16]
 800daee:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800daf0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	f04f 0400 	mov.w	r4, #0
 800dafc:	0a0b      	lsrs	r3, r1, #8
 800dafe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db02:	0a14      	lsrs	r4, r2, #8
 800db04:	b2db      	uxtb	r3, r3
 800db06:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800db08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db0c:	f04f 0300 	mov.w	r3, #0
 800db10:	f04f 0400 	mov.w	r4, #0
 800db14:	0c0b      	lsrs	r3, r1, #16
 800db16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db1a:	0c14      	lsrs	r4, r2, #16
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800db20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db24:	f04f 0300 	mov.w	r3, #0
 800db28:	f04f 0400 	mov.w	r4, #0
 800db2c:	0e0b      	lsrs	r3, r1, #24
 800db2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db32:	0e14      	lsrs	r4, r2, #24
 800db34:	b2db      	uxtb	r3, r3
 800db36:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800db38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db3c:	f04f 0300 	mov.w	r3, #0
 800db40:	f04f 0400 	mov.w	r4, #0
 800db44:	0013      	movs	r3, r2
 800db46:	2400      	movs	r4, #0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800db4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db50:	f04f 0300 	mov.w	r3, #0
 800db54:	f04f 0400 	mov.w	r4, #0
 800db58:	0a13      	lsrs	r3, r2, #8
 800db5a:	2400      	movs	r4, #0
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800db60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db64:	f04f 0300 	mov.w	r3, #0
 800db68:	f04f 0400 	mov.w	r4, #0
 800db6c:	0c13      	lsrs	r3, r2, #16
 800db6e:	2400      	movs	r4, #0
 800db70:	b2db      	uxtb	r3, r3
 800db72:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800db74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800db78:	f04f 0300 	mov.w	r3, #0
 800db7c:	f04f 0400 	mov.w	r4, #0
 800db80:	0e13      	lsrs	r3, r2, #24
 800db82:	2400      	movs	r4, #0
 800db84:	b2db      	uxtb	r3, r3
 800db86:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 800db88:	f107 0308 	add.w	r3, r7, #8
 800db8c:	2208      	movs	r2, #8
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff fad9 	bl	800d148 <pb_write>
 800db96:	4603      	mov	r3, r0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd90      	pop	{r4, r7, pc}

0800dba0 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800dba0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800dba4:	b086      	sub	sp, #24
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	460a      	mov	r2, r1
 800dbae:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 800dbbc:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 800dbc0:	7af9      	ldrb	r1, [r7, #11]
 800dbc2:	f04f 0200 	mov.w	r2, #0
 800dbc6:	ea4b 0301 	orr.w	r3, fp, r1
 800dbca:	ea4c 0402 	orr.w	r4, ip, r2
 800dbce:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 800dbd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f7ff fedd 	bl	800d996 <pb_encode_varint>
 800dbdc:	4603      	mov	r3, r0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800dbe8 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	789b      	ldrb	r3, [r3, #2]
 800dbf6:	f003 030f 	and.w	r3, r3, #15
 800dbfa:	2b09      	cmp	r3, #9
 800dbfc:	d822      	bhi.n	800dc44 <pb_encode_tag_for_field+0x5c>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <pb_encode_tag_for_field+0x1c>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800dc2d 	.word	0x0800dc2d
 800dc08:	0800dc2d 	.word	0x0800dc2d
 800dc0c:	0800dc2d 	.word	0x0800dc2d
 800dc10:	0800dc33 	.word	0x0800dc33
 800dc14:	0800dc39 	.word	0x0800dc39
 800dc18:	0800dc3f 	.word	0x0800dc3f
 800dc1c:	0800dc3f 	.word	0x0800dc3f
 800dc20:	0800dc3f 	.word	0x0800dc3f
 800dc24:	0800dc45 	.word	0x0800dc45
 800dc28:	0800dc3f 	.word	0x0800dc3f
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
            break;
 800dc30:	e014      	b.n	800dc5c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800dc32:	2305      	movs	r3, #5
 800dc34:	73fb      	strb	r3, [r7, #15]
            break;
 800dc36:	e011      	b.n	800dc5c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	73fb      	strb	r3, [r7, #15]
            break;
 800dc3c:	e00e      	b.n	800dc5c <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800dc3e:	2302      	movs	r3, #2
 800dc40:	73fb      	strb	r3, [r7, #15]
            break;
 800dc42:	e00b      	b.n	800dc5c <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <pb_encode_tag_for_field+0x6a>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	e000      	b.n	800dc54 <pb_encode_tag_for_field+0x6c>
 800dc52:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <pb_encode_tag_for_field+0x90>)
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6113      	str	r3, [r2, #16]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e009      	b.n	800dc70 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	461a      	mov	r2, r3
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff ff99 	bl	800dba0 <pb_encode_tag>
 800dc6e:	4603      	mov	r3, r0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	08012d2c 	.word	0x08012d2c

0800dc7c <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f04f 0400 	mov.w	r4, #0
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4623      	mov	r3, r4
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff fe7f 	bl	800d996 <pb_encode_varint>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f083 0301 	eor.w	r3, r3, #1
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <pb_encode_string+0x2c>
        return false;
 800dca4:	2300      	movs	r3, #0
 800dca6:	e005      	b.n	800dcb4 <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	68b9      	ldr	r1, [r7, #8]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff fa4b 	bl	800d148 <pb_write>
 800dcb2:	4603      	mov	r3, r0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd90      	pop	{r4, r7, pc}

0800dcbc <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800dcbc:	b590      	push	{r4, r7, lr}
 800dcbe:	b08d      	sub	sp, #52	; 0x34
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800dcc8:	f107 0314 	add.w	r3, r7, #20
 800dccc:	2200      	movs	r2, #0
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	605a      	str	r2, [r3, #4]
 800dcd2:	609a      	str	r2, [r3, #8]
 800dcd4:	60da      	str	r2, [r3, #12]
 800dcd6:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800dcd8:	f107 0314 	add.w	r3, r7, #20
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	68b9      	ldr	r1, [r7, #8]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fe11 	bl	800d908 <pb_encode>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f083 0301 	eor.w	r3, r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d004      	beq.n	800dcfc <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800dcf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e064      	b.n	800ddc6 <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	f04f 0400 	mov.w	r4, #0
 800dd06:	461a      	mov	r2, r3
 800dd08:	4623      	mov	r3, r4
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff fe43 	bl	800d996 <pb_encode_varint>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f083 0301 	eor.w	r3, r3, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <pb_encode_submessage+0x64>
        return false;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	e052      	b.n	800ddc6 <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800dd28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f7ff fa0b 	bl	800d148 <pb_write>
 800dd32:	4603      	mov	r3, r0
 800dd34:	e047      	b.n	800ddc6 <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d90b      	bls.n	800dd5e <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <pb_encode_submessage+0x98>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	e000      	b.n	800dd56 <pb_encode_submessage+0x9a>
 800dd54:	4b1e      	ldr	r3, [pc, #120]	; (800ddd0 <pb_encode_submessage+0x114>)
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	6113      	str	r3, [r2, #16]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e033      	b.n	800ddc6 <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff fdc2 	bl	800d908 <pb_encode>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	68da      	ldr	r2, [r3, #12]
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	441a      	add	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800dd96:	69ba      	ldr	r2, [r7, #24]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800dd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d00b      	beq.n	800ddc2 <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <pb_encode_submessage+0xfc>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	e000      	b.n	800ddba <pb_encode_submessage+0xfe>
 800ddb8:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <pb_encode_submessage+0x118>)
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	6113      	str	r3, [r2, #16]
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e001      	b.n	800ddc6 <pb_encode_submessage+0x10a>
    
    return status;
 800ddc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3734      	adds	r7, #52	; 0x34
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd90      	pop	{r4, r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	08012ce4 	.word	0x08012ce4
 800ddd4:	08012d50 	.word	0x08012d50

0800ddd8 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800ddd8:	b590      	push	{r4, r7, lr}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800dde4:	f04f 0300 	mov.w	r3, #0
 800dde8:	f04f 0400 	mov.w	r4, #0
 800ddec:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d108      	bne.n	800de0e <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f993 3000 	ldrsb.w	r3, [r3]
 800de02:	b25b      	sxtb	r3, r3
 800de04:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800de08:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800de0c:	e033      	b.n	800de76 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800de14:	b29b      	uxth	r3, r3
 800de16:	2b02      	cmp	r3, #2
 800de18:	d108      	bne.n	800de2c <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de20:	b21b      	sxth	r3, r3
 800de22:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800de26:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800de2a:	e024      	b.n	800de76 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800de32:	b29b      	uxth	r3, r3
 800de34:	2b04      	cmp	r3, #4
 800de36:	d106      	bne.n	800de46 <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800de40:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800de44:	e017      	b.n	800de76 <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	2b08      	cmp	r3, #8
 800de50:	d105      	bne.n	800de5e <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800de58:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800de5c:	e00b      	b.n	800de76 <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <pb_enc_varint+0x94>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	e000      	b.n	800de6e <pb_enc_varint+0x96>
 800de6c:	4b08      	ldr	r3, [pc, #32]	; (800de90 <pb_enc_varint+0xb8>)
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	6113      	str	r3, [r2, #16]
 800de72:	2300      	movs	r3, #0
 800de74:	e007      	b.n	800de86 <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800de76:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800de7a:	461a      	mov	r2, r3
 800de7c:	4623      	mov	r3, r4
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f7ff fd89 	bl	800d996 <pb_encode_varint>
 800de84:	4603      	mov	r3, r0
}
 800de86:	4618      	mov	r0, r3
 800de88:	371c      	adds	r7, #28
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd90      	pop	{r4, r7, pc}
 800de8e:	bf00      	nop
 800de90:	08012d64 	.word	0x08012d64

0800de94 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800de94:	b590      	push	{r4, r7, lr}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 800dea0:	f04f 0300 	mov.w	r3, #0
 800dea4:	f04f 0400 	mov.w	r4, #0
 800dea8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d107      	bne.n	800dec8 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f04f 0400 	mov.w	r4, #0
 800dec2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800dec6:	e032      	b.n	800df2e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d107      	bne.n	800dee4 <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	f04f 0400 	mov.w	r4, #0
 800dede:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800dee2:	e024      	b.n	800df2e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800deea:	b29b      	uxth	r3, r3
 800deec:	2b04      	cmp	r3, #4
 800deee:	d106      	bne.n	800defe <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f04f 0400 	mov.w	r4, #0
 800def8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800defc:	e017      	b.n	800df2e <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800df04:	b29b      	uxth	r3, r3
 800df06:	2b08      	cmp	r3, #8
 800df08:	d105      	bne.n	800df16 <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800df10:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800df14:	e00b      	b.n	800df2e <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <pb_enc_uvarint+0x90>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	e000      	b.n	800df26 <pb_enc_uvarint+0x92>
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <pb_enc_uvarint+0xb0>)
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	6113      	str	r3, [r2, #16]
 800df2a:	2300      	movs	r3, #0
 800df2c:	e005      	b.n	800df3a <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 800df2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff fd2f 	bl	800d996 <pb_encode_varint>
 800df38:	4603      	mov	r3, r0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	371c      	adds	r7, #28
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd90      	pop	{r4, r7, pc}
 800df42:	bf00      	nop
 800df44:	08012d64 	.word	0x08012d64

0800df48 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800df48:	b590      	push	{r4, r7, lr}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800df54:	f04f 0300 	mov.w	r3, #0
 800df58:	f04f 0400 	mov.w	r4, #0
 800df5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800df66:	b29b      	uxth	r3, r3
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d108      	bne.n	800df7e <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f993 3000 	ldrsb.w	r3, [r3]
 800df72:	b25b      	sxtb	r3, r3
 800df74:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800df78:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800df7c:	e033      	b.n	800dfe6 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800df84:	b29b      	uxth	r3, r3
 800df86:	2b02      	cmp	r3, #2
 800df88:	d108      	bne.n	800df9c <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df90:	b21b      	sxth	r3, r3
 800df92:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800df96:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800df9a:	e024      	b.n	800dfe6 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	d106      	bne.n	800dfb6 <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800dfb0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800dfb4:	e017      	b.n	800dfe6 <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	2b08      	cmp	r3, #8
 800dfc0:	d105      	bne.n	800dfce <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dfc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800dfcc:	e00b      	b.n	800dfe6 <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d002      	beq.n	800dfdc <pb_enc_svarint+0x94>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	e000      	b.n	800dfde <pb_enc_svarint+0x96>
 800dfdc:	4b07      	ldr	r3, [pc, #28]	; (800dffc <pb_enc_svarint+0xb4>)
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	6113      	str	r3, [r2, #16]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e005      	b.n	800dff2 <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 800dfe6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff fd26 	bl	800da3c <pb_encode_svarint>
 800dff0:	4603      	mov	r3, r0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	371c      	adds	r7, #28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd90      	pop	{r4, r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08012d64 	.word	0x08012d64

0800e000 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 800e00c:	6879      	ldr	r1, [r7, #4]
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7ff fd62 	bl	800dad8 <pb_encode_fixed64>
 800e014:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff fd30 	bl	800da92 <pb_encode_fixed32>
 800e032:	4603      	mov	r3, r0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b086      	sub	sp, #24
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d106      	bne.n	800e064 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800e056:	2200      	movs	r2, #0
 800e058:	2100      	movs	r1, #0
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f7ff fe0e 	bl	800dc7c <pb_encode_string>
 800e060:	4603      	mov	r3, r0
 800e062:	e023      	b.n	800e0ac <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	789b      	ldrb	r3, [r3, #2]
 800e068:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d114      	bne.n	800e09a <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	3302      	adds	r3, #2
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800e07c:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800e07e:	4293      	cmp	r3, r2
 800e080:	d90b      	bls.n	800e09a <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d002      	beq.n	800e090 <pb_enc_bytes+0x54>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	e000      	b.n	800e092 <pb_enc_bytes+0x56>
 800e090:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <pb_enc_bytes+0x78>)
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	6113      	str	r3, [r2, #16]
 800e096:	2300      	movs	r3, #0
 800e098:	e008      	b.n	800e0ac <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	1c99      	adds	r1, r3, #2
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7ff fde9 	bl	800dc7c <pb_encode_string>
 800e0aa:	4603      	mov	r3, r0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	08012d78 	.word	0x08012d78

0800e0b8 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	789b      	ldrb	r3, [r3, #2]
 800e0da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e0de:	2b80      	cmp	r3, #128	; 0x80
 800e0e0:	d102      	bne.n	800e0e8 <pb_enc_string+0x30>
        max_size = (size_t)-1;
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e6:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d108      	bne.n	800e100 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]
 800e0f2:	e00d      	b.n	800e110 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	61fb      	str	r3, [r7, #28]
            p++;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 800e100:	69fa      	ldr	r2, [r7, #28]
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	429a      	cmp	r2, r3
 800e106:	d203      	bcs.n	800e110 <pb_enc_string+0x58>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1f1      	bne.n	800e0f4 <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f7ff fdb1 	bl	800dc7c <pb_encode_string>
 800e11a:	4603      	mov	r3, r0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3720      	adds	r7, #32
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10b      	bne.n	800e152 <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	691b      	ldr	r3, [r3, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d002      	beq.n	800e148 <pb_enc_submessage+0x24>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	e000      	b.n	800e14a <pb_enc_submessage+0x26>
 800e148:	4b08      	ldr	r3, [pc, #32]	; (800e16c <pb_enc_submessage+0x48>)
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	6113      	str	r3, [r2, #16]
 800e14e:	2300      	movs	r3, #0
 800e150:	e008      	b.n	800e164 <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	4619      	mov	r1, r3
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7ff fdad 	bl	800dcbc <pb_encode_submessage>
 800e162:	4603      	mov	r3, r0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08012d8c 	.word	0x08012d8c

0800e170 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e182:	b29b      	uxth	r3, r3
 800e184:	461a      	mov	r2, r3
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f7ff fd77 	bl	800dc7c <pb_encode_string>
 800e18e:	4603      	mov	r3, r0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800e19c:	f000 fda2 	bl	800ece4 <MX_USART3_UART_Init>
    aiValidationInit();
 800e1a0:	f7fd f922 	bl	800b3e8 <aiValidationInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 800e1a4:	bf00      	nop
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(float *inputArr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    aiValidationProcess(inputArr);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7fd f94b 	bl	800b44c <aiValidationProcess>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800e1be:	b590      	push	{r4, r7, lr}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d01d      	beq.n	800e20a <ai_mnetwork_is_valid+0x4c>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7f7 fe5d 	bl	8005e92 <strlen>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7f7 fe59 	bl	8005e92 <strlen>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	429c      	cmp	r4, r3
 800e1e4:	d111      	bne.n	800e20a <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	681c      	ldr	r4, [r3, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f7 fe4f 	bl	8005e92 <strlen>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	6879      	ldr	r1, [r7, #4]
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f001 ff80 	bl	8010100 <strncmp>
 800e200:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <ai_mnetwork_is_valid+0x4c>
        return true;
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <ai_mnetwork_is_valid+0x4e>
    return false;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	bd90      	pop	{r4, r7, pc}

0800e214 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e21c:	2300      	movs	r3, #0
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	e026      	b.n	800e270 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <ai_mnetwork_handle+0x2c>
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	011b      	lsls	r3, r3, #4
 800e232:	4a14      	ldr	r2, [pc, #80]	; (800e284 <ai_mnetwork_handle+0x70>)
 800e234:	4413      	add	r3, r2
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d101      	bne.n	800e240 <ai_mnetwork_handle+0x2c>
            return inst;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	e01b      	b.n	800e278 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d111      	bne.n	800e26a <ai_mnetwork_handle+0x56>
 800e246:	490f      	ldr	r1, [pc, #60]	; (800e284 <ai_mnetwork_handle+0x70>)
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	011b      	lsls	r3, r3, #4
 800e252:	440b      	add	r3, r1
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d107      	bne.n	800e26a <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	4613      	mov	r3, r2
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	4413      	add	r3, r2
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	4a07      	ldr	r2, [pc, #28]	; (800e284 <ai_mnetwork_handle+0x70>)
 800e266:	4413      	add	r3, r2
 800e268:	e006      	b.n	800e278 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3301      	adds	r3, #1
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	ddd5      	ble.n	800e222 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3714      	adds	r7, #20
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr
 800e284:	20006ee0 	.word	0x20006ee0

0800e288 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e290:	2300      	movs	r3, #0
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	e019      	b.n	800e2ca <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d013      	beq.n	800e2c4 <ai_mnetwork_release_handle+0x3c>
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	4413      	add	r3, r2
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	4a0d      	ldr	r2, [pc, #52]	; (800e2dc <ai_mnetwork_release_handle+0x54>)
 800e2a8:	4413      	add	r3, r2
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d109      	bne.n	800e2c4 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 800e2b0:	490a      	ldr	r1, [pc, #40]	; (800e2dc <ai_mnetwork_release_handle+0x54>)
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	005b      	lsls	r3, r3, #1
 800e2b8:	4413      	add	r3, r2
 800e2ba:	011b      	lsls	r3, r3, #4
 800e2bc:	440b      	add	r3, r1
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
            return;
 800e2c2:	e005      	b.n	800e2d0 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dde2      	ble.n	800e296 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	20006ee0 	.word	0x20006ee0

0800e2e0 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	e01c      	b.n	800e32a <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	011b      	lsls	r3, r3, #4
 800e2fa:	4a10      	ldr	r2, [pc, #64]	; (800e33c <ai_mnetwork_find+0x5c>)
 800e2fc:	4413      	add	r3, r2
 800e2fe:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff ff5b 	bl	800e1be <ai_mnetwork_is_valid>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <ai_mnetwork_find+0x34>
            return entry->name;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	e00e      	b.n	800e332 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	1e5a      	subs	r2, r3, #1
 800e318:	603a      	str	r2, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d102      	bne.n	800e324 <ai_mnetwork_find+0x44>
                return entry->name;
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	e006      	b.n	800e332 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3301      	adds	r3, #1
 800e328:	60fb      	str	r3, [r7, #12]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dddf      	ble.n	800e2f0 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	0801333c 	.word	0x0801333c

0800e340 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08a      	sub	sp, #40	; 0x28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800e350:	2000      	movs	r0, #0
 800e352:	f7ff ff5f 	bl	800e214 <ai_mnetwork_handle>
 800e356:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d108      	bne.n	800e370 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 800e35e:	2331      	movs	r3, #49	; 0x31
 800e360:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	2210      	movs	r2, #16
 800e366:	f362 231f 	bfi	r3, r2, #8, #24
 800e36a:	617b      	str	r3, [r7, #20]
        return err;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	e04d      	b.n	800e40c <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e370:	2300      	movs	r3, #0
 800e372:	623b      	str	r3, [r7, #32]
 800e374:	e014      	b.n	800e3a0 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800e376:	6a3a      	ldr	r2, [r7, #32]
 800e378:	4613      	mov	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	011b      	lsls	r3, r3, #4
 800e380:	4a24      	ldr	r2, [pc, #144]	; (800e414 <ai_mnetwork_create+0xd4>)
 800e382:	4413      	add	r3, r2
 800e384:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800e386:	69b9      	ldr	r1, [r7, #24]
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff ff18 	bl	800e1be <ai_mnetwork_is_valid>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <ai_mnetwork_create+0x5a>
            found = entry;
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e398:	e005      	b.n	800e3a6 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	3301      	adds	r3, #1
 800e39e:	623b      	str	r3, [r7, #32]
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	dde7      	ble.n	800e376 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d108      	bne.n	800e3be <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 800e3ac:	2314      	movs	r3, #20
 800e3ae:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	2210      	movs	r2, #16
 800e3b4:	f362 231f 	bfi	r3, r2, #8, #24
 800e3b8:	617b      	str	r3, [r7, #20]
        return err;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	e026      	b.n	800e40c <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d109      	bne.n	800e3d8 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	68b8      	ldr	r0, [r7, #8]
 800e3d0:	4798      	blx	r3
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	617b      	str	r3, [r7, #20]
 800e3d6:	e006      	b.n	800e3e6 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3dc:	6879      	ldr	r1, [r7, #4]
 800e3de:	68b8      	ldr	r0, [r7, #8]
 800e3e0:	4798      	blx	r3
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10c      	bne.n	800e40a <ai_mnetwork_create+0xca>
 800e3f0:	7d3b      	ldrb	r3, [r7, #20]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <ai_mnetwork_create+0xca>
        inst->entry = found;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fa:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	69fa      	ldr	r2, [r7, #28]
 800e408:	601a      	str	r2, [r3, #0]
    }

    return err;
 800e40a:	697b      	ldr	r3, [r7, #20]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3728      	adds	r7, #40	; 0x28
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0801333c 	.word	0x0801333c

0800e418 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff fef7 	bl	800e214 <ai_mnetwork_handle>
 800e426:	60f8      	str	r0, [r7, #12]
    if (inn) {
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d011      	beq.n	800e452 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	6852      	ldr	r2, [r2, #4]
 800e438:	4610      	mov	r0, r2
 800e43a:	4798      	blx	r3
 800e43c:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	429a      	cmp	r2, r3
 800e446:	d004      	beq.n	800e452 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f7ff ff1d 	bl	800e288 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800e452:	687b      	ldr	r3, [r7, #4]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff fed4 	bl	800e214 <ai_mnetwork_handle>
 800e46c:	60f8      	str	r0, [r7, #12]
    if (inn)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d009      	beq.n	800e488 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	6852      	ldr	r2, [r2, #4]
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	4610      	mov	r0, r2
 800e482:	4798      	blx	r3
 800e484:	4603      	mov	r3, r0
 800e486:	e000      	b.n	800e48a <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800e49a:	2314      	movs	r3, #20
 800e49c:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	2210      	movs	r2, #16
 800e4a2:	f362 231f 	bfi	r3, r2, #8, #24
 800e4a6:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7ff feb3 	bl	800e214 <ai_mnetwork_handle>
 800e4ae:	60f8      	str	r0, [r7, #12]
    if (inn)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d008      	beq.n	800e4c8 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	6852      	ldr	r2, [r2, #4]
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	4798      	blx	r3
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	e000      	b.n	800e4ca <ai_mnetwork_get_error+0x38>
    else
        return err;
 800e4c8:	68bb      	ldr	r3, [r7, #8]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800e4d2:	b5b0      	push	{r4, r5, r7, lr}
 800e4d4:	b08e      	sub	sp, #56	; 0x38
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7ff fe99 	bl	800e214 <ai_mnetwork_handle>
 800e4e2:	6378      	str	r0, [r7, #52]	; 0x34
    if (inn) {
 800e4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d03b      	beq.n	800e562 <ai_mnetwork_init+0x90>
        par = inn->entry->params;
 800e4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f107 040c 	add.w	r4, r7, #12
 800e4f2:	1d1d      	adds	r5, r3, #4
 800e4f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e500:	e884 0003 	stmia.w	r4, {r0, r1}
        if (params->activations.n_batches)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	8b1b      	ldrh	r3, [r3, #24]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d009      	beq.n	800e520 <ai_mnetwork_init+0x4e>
            par.activations = params->activations;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	f107 0420 	add.w	r4, r7, #32
 800e512:	f103 0514 	add.w	r5, r3, #20
 800e516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e51a:	682b      	ldr	r3, [r5, #0]
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	e002      	b.n	800e526 <ai_mnetwork_init+0x54>
        else
            par.activations.data = params->activations.data;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e524:	633b      	str	r3, [r7, #48]	; 0x30
        if (params->params.n_batches)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	889b      	ldrh	r3, [r3, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d008      	beq.n	800e540 <ai_mnetwork_init+0x6e>
            par.params = params->params;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	f107 040c 	add.w	r4, r7, #12
 800e534:	461d      	mov	r5, r3
 800e536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e53a:	682b      	ldr	r3, [r5, #0]
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	e005      	b.n	800e54c <ai_mnetwork_init+0x7a>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800e540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e546:	4798      	blx	r3
 800e548:	4603      	mov	r3, r0
 800e54a:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800e54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e554:	6852      	ldr	r2, [r2, #4]
 800e556:	f107 010c 	add.w	r1, r7, #12
 800e55a:	4610      	mov	r0, r2
 800e55c:	4798      	blx	r3
 800e55e:	4603      	mov	r3, r0
 800e560:	e000      	b.n	800e564 <ai_mnetwork_init+0x92>
    }
    else
        return false;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3738      	adds	r7, #56	; 0x38
 800e568:	46bd      	mov	sp, r7
 800e56a:	bdb0      	pop	{r4, r5, r7, pc}

0800e56c <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff fe4b 	bl	800e214 <ai_mnetwork_handle>
 800e57e:	6178      	str	r0, [r7, #20]
    if (inn)
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d009      	beq.n	800e59a <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	6850      	ldr	r0, [r2, #4]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	68b9      	ldr	r1, [r7, #8]
 800e594:	4798      	blx	r3
 800e596:	4603      	mov	r3, r0
 800e598:	e000      	b.n	800e59c <ai_mnetwork_run+0x30>
    else
        return 0;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800e5a4:	b5b0      	push	{r4, r5, r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7ff fe2f 	bl	800e214 <ai_mnetwork_handle>
 800e5b6:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d018      	beq.n	800e5f0 <ai_mnetwork_get_private_handle+0x4c>
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d015      	beq.n	800e5f0 <ai_mnetwork_get_private_handle+0x4c>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d012      	beq.n	800e5f0 <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	4615      	mov	r5, r2
 800e5d8:	f103 0408 	add.w	r4, r3, #8
 800e5dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5e8:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e001      	b.n	800e5f4 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3718      	adds	r7, #24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bdb0      	pop	{r4, r5, r7, pc}

0800e5fc <bno055_setPage>:
uint16_t tempScale = 1;
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	4603      	mov	r3, r0
 800e604:	71fb      	strb	r3, [r7, #7]
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	4619      	mov	r1, r3
 800e60a:	2007      	movs	r0, #7
 800e60c:	f000 f9ba 	bl	800e984 <bno055_writeData>
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <bno055_setOperationMode>:

void bno055_setOperationMode(uint8_t mode) {
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	4619      	mov	r1, r3
 800e626:	203d      	movs	r0, #61	; 0x3d
 800e628:	f000 f9ac 	bl	800e984 <bno055_writeData>
  bno055_delay(30);
 800e62c:	201e      	movs	r0, #30
 800e62e:	f000 f99d 	bl	800e96c <bno055_delay>
}
 800e632:	bf00      	nop
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800e63a:	b580      	push	{r7, lr}
 800e63c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800e63e:	2000      	movs	r0, #0
 800e640:	f7ff ffea 	bl	800e618 <bno055_setOperationMode>
}
 800e644:	bf00      	nop
 800e646:	bd80      	pop	{r7, pc}

0800e648 <bno055_setOperationModeAMG>:

void bno055_setOperationModeNDOF() {
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
}

void bno055_setOperationModeAMG() {
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_AMG);
 800e64c:	2007      	movs	r0, #7
 800e64e:	f7ff ffe3 	bl	800e618 <bno055_setOperationMode>
}
 800e652:	bf00      	nop
 800e654:	bd80      	pop	{r7, pc}

0800e656 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800e656:	b580      	push	{r7, lr}
 800e658:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800e65a:	2120      	movs	r1, #32
 800e65c:	203f      	movs	r0, #63	; 0x3f
 800e65e:	f000 f991 	bl	800e984 <bno055_writeData>
  bno055_delay(700);
 800e662:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800e666:	f000 f981 	bl	800e96c <bno055_delay>
}
 800e66a:	bf00      	nop
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
  bno055_reset();
 800e676:	f7ff ffee 	bl	800e656 <bno055_reset>

  uint8_t id = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800e67e:	1dfb      	adds	r3, r7, #7
 800e680:	2201      	movs	r2, #1
 800e682:	4619      	mov	r1, r3
 800e684:	2000      	movs	r0, #0
 800e686:	f000 f99d 	bl	800e9c4 <bno055_readData>
  if (id != BNO055_ID) {
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	2ba0      	cmp	r3, #160	; 0xa0
 800e68e:	d004      	beq.n	800e69a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	4619      	mov	r1, r3
 800e694:	4809      	ldr	r0, [pc, #36]	; (800e6bc <bno055_setup+0x4c>)
 800e696:	f001 fc9f 	bl	800ffd8 <iprintf>
  }
  bno055_setPage(0);
 800e69a:	2000      	movs	r0, #0
 800e69c:	f7ff ffae 	bl	800e5fc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	203f      	movs	r0, #63	; 0x3f
 800e6a4:	f000 f96e 	bl	800e984 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800e6a8:	f7ff ffc7 	bl	800e63a <bno055_setOperationModeConfig>
  bno055_delay(10);
 800e6ac:	200a      	movs	r0, #10
 800e6ae:	f000 f95d 	bl	800e96c <bno055_delay>
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	08012db0 	.word	0x08012db0

0800e6c0 <bno055_getVector>:
  cal.accel = (calData >> 2) & 0x03;
  cal.mag = calData & 0x03;
  return cal;
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c2:	b099      	sub	sp, #100	; 0x64
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	77fb      	strb	r3, [r7, #31]
  bno055_setPage(0);
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	f7ff ff96 	bl	800e5fc <bno055_setPage>
  uint8_t buffer[6];

  bno055_readData(vec, buffer, 6);
 800e6d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e6d4:	7ffb      	ldrb	r3, [r7, #31]
 800e6d6:	2206      	movs	r2, #6
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 f973 	bl	800e9c4 <bno055_readData>

  double scale = 1;
 800e6de:	f04f 0300 	mov.w	r3, #0
 800e6e2:	4c51      	ldr	r4, [pc, #324]	; (800e828 <bno055_getVector+0x168>)
 800e6e4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800e6e8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ea:	2b0e      	cmp	r3, #14
 800e6ec:	d108      	bne.n	800e700 <bno055_getVector+0x40>
    scale = magScale;
 800e6ee:	4b4f      	ldr	r3, [pc, #316]	; (800e82c <bno055_getVector+0x16c>)
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	ee07 3a90 	vmov	s15, r3
 800e6f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e6fa:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800e6fe:	e028      	b.n	800e752 <bno055_getVector+0x92>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800e700:	7ffb      	ldrb	r3, [r7, #31]
 800e702:	2b08      	cmp	r3, #8
 800e704:	d005      	beq.n	800e712 <bno055_getVector+0x52>
 800e706:	7ffb      	ldrb	r3, [r7, #31]
 800e708:	2b28      	cmp	r3, #40	; 0x28
 800e70a:	d002      	beq.n	800e712 <bno055_getVector+0x52>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800e70c:	7ffb      	ldrb	r3, [r7, #31]
 800e70e:	2b2e      	cmp	r3, #46	; 0x2e
 800e710:	d108      	bne.n	800e724 <bno055_getVector+0x64>
    scale = accelScale;
 800e712:	4b47      	ldr	r3, [pc, #284]	; (800e830 <bno055_getVector+0x170>)
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	ee07 3a90 	vmov	s15, r3
 800e71a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e71e:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800e722:	e016      	b.n	800e752 <bno055_getVector+0x92>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800e724:	7ffb      	ldrb	r3, [r7, #31]
 800e726:	2b14      	cmp	r3, #20
 800e728:	d108      	bne.n	800e73c <bno055_getVector+0x7c>
    scale = angularRateScale;
 800e72a:	4b42      	ldr	r3, [pc, #264]	; (800e834 <bno055_getVector+0x174>)
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	ee07 3a90 	vmov	s15, r3
 800e732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e736:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800e73a:	e00a      	b.n	800e752 <bno055_getVector+0x92>
  } else if (vec == BNO055_VECTOR_EULER) {
 800e73c:	7ffb      	ldrb	r3, [r7, #31]
 800e73e:	2b1a      	cmp	r3, #26
 800e740:	d107      	bne.n	800e752 <bno055_getVector+0x92>
    scale = eulerScale;
 800e742:	4b3d      	ldr	r3, [pc, #244]	; (800e838 <bno055_getVector+0x178>)
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	ee07 3a90 	vmov	s15, r3
 800e74a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e74e:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  }

  bno055_vector_t xyz = {.x = 0, .y = 0, .z = 0};
 800e752:	f04f 0300 	mov.w	r3, #0
 800e756:	f04f 0400 	mov.w	r4, #0
 800e75a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800e75e:	f04f 0300 	mov.w	r3, #0
 800e762:	f04f 0400 	mov.w	r4, #0
 800e766:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800e76a:	f04f 0300 	mov.w	r3, #0
 800e76e:	f04f 0400 	mov.w	r4, #0
 800e772:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800e776:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	b21a      	sxth	r2, r3
 800e77e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e782:	b21b      	sxth	r3, r3
 800e784:	4313      	orrs	r3, r2
 800e786:	b21b      	sxth	r3, r3
 800e788:	ee07 3a90 	vmov	s15, r3
 800e78c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e790:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800e794:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e798:	ed87 7b08 	vstr	d7, [r7, #32]
  xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800e79c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e7a0:	021b      	lsls	r3, r3, #8
 800e7a2:	b21a      	sxth	r2, r3
 800e7a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800e7a8:	b21b      	sxth	r3, r3
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	b21b      	sxth	r3, r3
 800e7ae:	ee07 3a90 	vmov	s15, r3
 800e7b2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e7b6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800e7ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e7be:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800e7c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e7c6:	021b      	lsls	r3, r3, #8
 800e7c8:	b21a      	sxth	r2, r3
 800e7ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e7ce:	b21b      	sxth	r3, r3
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	b21b      	sxth	r3, r3
 800e7d4:	ee07 3a90 	vmov	s15, r3
 800e7d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e7dc:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800e7e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e7e4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

  return xyz;
 800e7e8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800e7ec:	f107 0520 	add.w	r5, r7, #32
 800e7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e7f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7fc:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	; 0x40
 800e800:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e804:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e808:	ec46 5b15 	vmov	d5, r5, r6
 800e80c:	ec42 1b16 	vmov	d6, r1, r2
 800e810:	ec44 3b17 	vmov	d7, r3, r4
}
 800e814:	eeb0 0b45 	vmov.f64	d0, d5
 800e818:	eeb0 1b46 	vmov.f64	d1, d6
 800e81c:	eeb0 2b47 	vmov.f64	d2, d7
 800e820:	3764      	adds	r7, #100	; 0x64
 800e822:	46bd      	mov	sp, r7
 800e824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e826:	bf00      	nop
 800e828:	3ff00000 	.word	0x3ff00000
 800e82c:	20000052 	.word	0x20000052
 800e830:	2000004c 	.word	0x2000004c
 800e834:	2000004e 	.word	0x2000004e
 800e838:	20000050 	.word	0x20000050

0800e83c <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 800e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83e:	b08d      	sub	sp, #52	; 0x34
 800e840:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 800e842:	2008      	movs	r0, #8
 800e844:	f7ff ff3c 	bl	800e6c0 <bno055_getVector>
 800e848:	eeb0 5b40 	vmov.f64	d5, d0
 800e84c:	eeb0 6b41 	vmov.f64	d6, d1
 800e850:	eeb0 7b42 	vmov.f64	d7, d2
 800e854:	ed87 5b06 	vstr	d5, [r7, #24]
 800e858:	ed87 6b08 	vstr	d6, [r7, #32]
 800e85c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800e860:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 800e864:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e868:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e86c:	ec46 5b15 	vmov	d5, r5, r6
 800e870:	ec42 1b16 	vmov	d6, r1, r2
 800e874:	ec44 3b17 	vmov	d7, r3, r4
}
 800e878:	eeb0 0b45 	vmov.f64	d0, d5
 800e87c:	eeb0 1b46 	vmov.f64	d1, d6
 800e880:	eeb0 2b47 	vmov.f64	d2, d7
 800e884:	3734      	adds	r7, #52	; 0x34
 800e886:	46bd      	mov	sp, r7
 800e888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e88c <SCB_EnableICache>:
{
 800e88c:	b480      	push	{r7}
 800e88e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e894:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800e898:	4b0b      	ldr	r3, [pc, #44]	; (800e8c8 <SCB_EnableICache+0x3c>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e8a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8a4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800e8a8:	4b07      	ldr	r3, [pc, #28]	; (800e8c8 <SCB_EnableICache+0x3c>)
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	4a06      	ldr	r2, [pc, #24]	; (800e8c8 <SCB_EnableICache+0x3c>)
 800e8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e8b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8b8:	f3bf 8f6f 	isb	sy
}
 800e8bc:	bf00      	nop
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	e000ed00 	.word	0xe000ed00

0800e8cc <SCB_EnableDCache>:
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e8d2:	4b1d      	ldr	r3, [pc, #116]	; (800e948 <SCB_EnableDCache+0x7c>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e8da:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800e8de:	4b1a      	ldr	r3, [pc, #104]	; (800e948 <SCB_EnableDCache+0x7c>)
 800e8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8e4:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	0b5b      	lsrs	r3, r3, #13
 800e8ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e8ee:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	08db      	lsrs	r3, r3, #3
 800e8f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8f8:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	015a      	lsls	r2, r3, #5
 800e8fe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800e902:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e908:	490f      	ldr	r1, [pc, #60]	; (800e948 <SCB_EnableDCache+0x7c>)
 800e90a:	4313      	orrs	r3, r2
 800e90c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	1e5a      	subs	r2, r3, #1
 800e914:	60ba      	str	r2, [r7, #8]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1ef      	bne.n	800e8fa <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	1e5a      	subs	r2, r3, #1
 800e91e:	60fa      	str	r2, [r7, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1e5      	bne.n	800e8f0 <SCB_EnableDCache+0x24>
 800e924:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e928:	4b07      	ldr	r3, [pc, #28]	; (800e948 <SCB_EnableDCache+0x7c>)
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	4a06      	ldr	r2, [pc, #24]	; (800e948 <SCB_EnableDCache+0x7c>)
 800e92e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e932:	6153      	str	r3, [r2, #20]
 800e934:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e938:	f3bf 8f6f 	isb	sy
}
 800e93c:	bf00      	nop
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	e000ed00 	.word	0xe000ed00

0800e94c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800e954:	4a04      	ldr	r2, [pc, #16]	; (800e968 <bno055_assignI2C+0x1c>)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6013      	str	r3, [r2, #0]
}
 800e95a:	bf00      	nop
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	200070b4 	.word	0x200070b4

0800e96c <bno055_delay>:

void bno055_delay(int time) {
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4618      	mov	r0, r3
 800e978:	f7f8 f83a 	bl	80069f0 <HAL_Delay>
#endif
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af02      	add	r7, sp, #8
 800e98a:	4603      	mov	r3, r0
 800e98c:	460a      	mov	r2, r1
 800e98e:	71fb      	strb	r3, [r7, #7]
 800e990:	4613      	mov	r3, r2
 800e992:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	733b      	strb	r3, [r7, #12]
 800e998:	79bb      	ldrb	r3, [r7, #6]
 800e99a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_HI << 1,
 800e99c:	4b08      	ldr	r3, [pc, #32]	; (800e9c0 <bno055_writeData+0x3c>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	f107 020c 	add.w	r2, r7, #12
 800e9a4:	230a      	movs	r3, #10
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	2152      	movs	r1, #82	; 0x52
 800e9ac:	f7f8 fc70 	bl	8007290 <HAL_I2C_Master_Transmit>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	2b00      	cmp	r3, #0
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
//  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	200070b4 	.word	0x200070b4

0800e9c4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af02      	add	r7, sp, #8
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	6039      	str	r1, [r7, #0]
 800e9ce:	71fb      	strb	r3, [r7, #7]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_HI << 1, &reg, 1,
 800e9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <bno055_readData+0x40>)
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	1dfa      	adds	r2, r7, #7
 800e9da:	2364      	movs	r3, #100	; 0x64
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	2301      	movs	r3, #1
 800e9e0:	2152      	movs	r1, #82	; 0x52
 800e9e2:	f7f8 fc55 	bl	8007290 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR_HI << 1, data, len,
 800e9e6:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <bno055_readData+0x40>)
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	79bb      	ldrb	r3, [r7, #6]
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	2364      	movs	r3, #100	; 0x64
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	2152      	movs	r1, #82	; 0x52
 800e9f8:	f7f8 fd3e 	bl	8007478 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	200070b4 	.word	0x200070b4

0800ea08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 800ea0e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ea10:	f7ff ff3c 	bl	800e88c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ea14:	f7ff ff5a 	bl	800e8cc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ea18:	f7f7 ff7e 	bl	8006918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ea1c:	f000 f874 	bl	800eb08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ea20:	f000 f990 	bl	800ed44 <MX_GPIO_Init>
  MX_CRC_Init();
 800ea24:	f000 f8fe 	bl	800ec24 <MX_CRC_Init>
  MX_I2C1_Init();
 800ea28:	f000 f91e 	bl	800ec68 <MX_I2C1_Init>
  MX_X_CUBE_AI_Init();
 800ea2c:	f7ff fbb4 	bl	800e198 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  bno055_assignI2C(&hi2c1);
 800ea30:	4834      	ldr	r0, [pc, #208]	; (800eb04 <main+0xfc>)
 800ea32:	f7ff ff8b 	bl	800e94c <bno055_assignI2C>
  bno055_setup();
 800ea36:	f7ff fe1b 	bl	800e670 <bno055_setup>
  bno055_setOperationModeAMG();
 800ea3a:	f7ff fe05 	bl	800e648 <bno055_setOperationModeAMG>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	float inputArray[270];
	int tmp=0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	for(int i=0;i<90;i++){
 800ea44:	2300      	movs	r3, #0
 800ea46:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800ea4a:	e04e      	b.n	800eaea <main+0xe2>
		bno055_vector_t v = bno055_getVectorAccelerometer();
 800ea4c:	f7ff fef6 	bl	800e83c <bno055_getVectorAccelerometer>
 800ea50:	eeb0 5b40 	vmov.f64	d5, d0
 800ea54:	eeb0 6b41 	vmov.f64	d6, d1
 800ea58:	eeb0 7b42 	vmov.f64	d7, d2
 800ea5c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800ea60:	ed83 5b00 	vstr	d5, [r3]
 800ea64:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800ea68:	ed83 6b00 	vstr	d6, [r3]
 800ea6c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800ea70:	ed83 7b00 	vstr	d7, [r3]
		inputArray[tmp] = v.x;
 800ea74:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800ea78:	ed93 7b00 	vldr	d7, [r3]
 800ea7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ea80:	463a      	mov	r2, r7
 800ea82:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4413      	add	r3, r2
 800ea8a:	edc3 7a00 	vstr	s15, [r3]
		tmp++;
 800ea8e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800ea92:	3301      	adds	r3, #1
 800ea94:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
		inputArray[tmp] = v.y;
 800ea98:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800ea9c:	ed93 7b00 	vldr	d7, [r3]
 800eaa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800eaa4:	463a      	mov	r2, r7
 800eaa6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	4413      	add	r3, r2
 800eaae:	edc3 7a00 	vstr	s15, [r3]
		tmp++;
 800eab2:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800eab6:	3301      	adds	r3, #1
 800eab8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
		inputArray[tmp] = v.z;
 800eabc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800eac0:	ed93 7b00 	vldr	d7, [r3]
 800eac4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800eac8:	463a      	mov	r2, r7
 800eaca:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	edc3 7a00 	vstr	s15, [r3]
		tmp++;
 800ead6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800eada:	3301      	adds	r3, #1
 800eadc:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	for(int i=0;i<90;i++){
 800eae0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800eae4:	3301      	adds	r3, #1
 800eae6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800eaea:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800eaee:	2b59      	cmp	r3, #89	; 0x59
 800eaf0:	ddac      	ble.n	800ea4c <main+0x44>
	}

  MX_X_CUBE_AI_Process(inputArray);
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7ff fb57 	bl	800e1a8 <MX_X_CUBE_AI_Process>
    /* USER CODE BEGIN 3 */
  HAL_Delay(10000);
 800eafa:	f242 7010 	movw	r0, #10000	; 0x2710
 800eafe:	f7f7 ff77 	bl	80069f0 <HAL_Delay>
  {
 800eb02:	e79c      	b.n	800ea3e <main+0x36>
 800eb04:	20007044 	.word	0x20007044

0800eb08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b0b8      	sub	sp, #224	; 0xe0
 800eb0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eb0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800eb12:	2234      	movs	r2, #52	; 0x34
 800eb14:	2100      	movs	r1, #0
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 fd72 	bl	800f600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eb1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	605a      	str	r2, [r3, #4]
 800eb26:	609a      	str	r2, [r3, #8]
 800eb28:	60da      	str	r2, [r3, #12]
 800eb2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eb2c:	f107 0308 	add.w	r3, r7, #8
 800eb30:	2290      	movs	r2, #144	; 0x90
 800eb32:	2100      	movs	r1, #0
 800eb34:	4618      	mov	r0, r3
 800eb36:	f000 fd63 	bl	800f600 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800eb3a:	4b38      	ldr	r3, [pc, #224]	; (800ec1c <SystemClock_Config+0x114>)
 800eb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3e:	4a37      	ldr	r2, [pc, #220]	; (800ec1c <SystemClock_Config+0x114>)
 800eb40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb44:	6413      	str	r3, [r2, #64]	; 0x40
 800eb46:	4b35      	ldr	r3, [pc, #212]	; (800ec1c <SystemClock_Config+0x114>)
 800eb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800eb52:	4b33      	ldr	r3, [pc, #204]	; (800ec20 <SystemClock_Config+0x118>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800eb5a:	4a31      	ldr	r2, [pc, #196]	; (800ec20 <SystemClock_Config+0x118>)
 800eb5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb60:	6013      	str	r3, [r2, #0]
 800eb62:	4b2f      	ldr	r3, [pc, #188]	; (800ec20 <SystemClock_Config+0x118>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eb6a:	603b      	str	r3, [r7, #0]
 800eb6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800eb74:	2301      	movs	r3, #1
 800eb76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800eb7a:	2310      	movs	r3, #16
 800eb7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eb80:	2302      	movs	r3, #2
 800eb82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800eb86:	2300      	movs	r3, #0
 800eb88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800eb8c:	2308      	movs	r3, #8
 800eb8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800eb92:	2360      	movs	r3, #96	; 0x60
 800eb94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800eb98:	2306      	movs	r3, #6
 800eb9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800eb9e:	2302      	movs	r3, #2
 800eba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800eba4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f8 ffd3 	bl	8007b54 <HAL_RCC_OscConfig>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800ebb4:	f000 f8f6 	bl	800eda4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ebb8:	230f      	movs	r3, #15
 800ebba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800ebc4:	2380      	movs	r3, #128	; 0x80
 800ebc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ebca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ebce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ebd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800ebda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f9 fa29 	bl	8008038 <HAL_RCC_ClockConfig>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800ebec:	f000 f8da 	bl	800eda4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800ebf0:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800ebf4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ebfe:	f107 0308 	add.w	r3, r7, #8
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f9 fbe6 	bl	80083d4 <HAL_RCCEx_PeriphCLKConfig>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800ec0e:	f000 f8c9 	bl	800eda4 <Error_Handler>
  }
}
 800ec12:	bf00      	nop
 800ec14:	37e0      	adds	r7, #224	; 0xe0
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	40023800 	.word	0x40023800
 800ec20:	40007000 	.word	0x40007000

0800ec24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ec28:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec2a:	4a0e      	ldr	r2, [pc, #56]	; (800ec64 <MX_CRC_Init+0x40>)
 800ec2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800ec3a:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800ec40:	4b07      	ldr	r3, [pc, #28]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800ec46:	4b06      	ldr	r3, [pc, #24]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec48:	2201      	movs	r2, #1
 800ec4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ec4c:	4804      	ldr	r0, [pc, #16]	; (800ec60 <MX_CRC_Init+0x3c>)
 800ec4e:	f7f7 fffb 	bl	8006c48 <HAL_CRC_Init>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800ec58:	f000 f8a4 	bl	800eda4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ec5c:	bf00      	nop
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	20007090 	.word	0x20007090
 800ec64:	40023000 	.word	0x40023000

0800ec68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ec6c:	4b1b      	ldr	r3, [pc, #108]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec6e:	4a1c      	ldr	r2, [pc, #112]	; (800ece0 <MX_I2C1_Init+0x78>)
 800ec70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800ec72:	4b1a      	ldr	r3, [pc, #104]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec74:	f640 6214 	movw	r2, #3604	; 0xe14
 800ec78:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ec7a:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ec80:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec82:	2201      	movs	r2, #1
 800ec84:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ec86:	4b15      	ldr	r3, [pc, #84]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ec8c:	4b13      	ldr	r3, [pc, #76]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ec92:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ec98:	4b10      	ldr	r3, [pc, #64]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ec9e:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <MX_I2C1_Init+0x74>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800eca4:	480d      	ldr	r0, [pc, #52]	; (800ecdc <MX_I2C1_Init+0x74>)
 800eca6:	f7f8 fa63 	bl	8007170 <HAL_I2C_Init>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ecb0:	f000 f878 	bl	800eda4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	4809      	ldr	r0, [pc, #36]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ecb8:	f7f8 feb4 	bl	8007a24 <HAL_I2CEx_ConfigAnalogFilter>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d001      	beq.n	800ecc6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800ecc2:	f000 f86f 	bl	800eda4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	4804      	ldr	r0, [pc, #16]	; (800ecdc <MX_I2C1_Init+0x74>)
 800ecca:	f7f8 fef6 	bl	8007aba <HAL_I2CEx_ConfigDigitalFilter>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800ecd4:	f000 f866 	bl	800eda4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ecd8:	bf00      	nop
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20007044 	.word	0x20007044
 800ece0:	40005400 	.word	0x40005400

0800ece4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ece8:	4b14      	ldr	r3, [pc, #80]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ecea:	4a15      	ldr	r2, [pc, #84]	; (800ed40 <MX_USART3_UART_Init+0x5c>)
 800ecec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ecee:	4b13      	ldr	r3, [pc, #76]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ecf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ecf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ecf6:	4b11      	ldr	r3, [pc, #68]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ecfc:	4b0f      	ldr	r3, [pc, #60]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ed02:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ed08:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed0a:	220c      	movs	r2, #12
 800ed0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ed0e:	4b0b      	ldr	r3, [pc, #44]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ed14:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed16:	2200      	movs	r2, #0
 800ed18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ed1a:	4b08      	ldr	r3, [pc, #32]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ed20:	4b06      	ldr	r3, [pc, #24]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ed26:	4805      	ldr	r0, [pc, #20]	; (800ed3c <MX_USART3_UART_Init+0x58>)
 800ed28:	f7f9 ff7a 	bl	8008c20 <HAL_UART_Init>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800ed32:	f000 f837 	bl	800eda4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ed36:	bf00      	nop
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20006fc4 	.word	0x20006fc4
 800ed40:	40004800 	.word	0x40004800

0800ed44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ed4a:	4b15      	ldr	r3, [pc, #84]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	4a14      	ldr	r2, [pc, #80]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed50:	f043 0308 	orr.w	r3, r3, #8
 800ed54:	6313      	str	r3, [r2, #48]	; 0x30
 800ed56:	4b12      	ldr	r3, [pc, #72]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	f003 0308 	and.w	r3, r3, #8
 800ed5e:	60fb      	str	r3, [r7, #12]
 800ed60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed62:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed66:	4a0e      	ldr	r2, [pc, #56]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed68:	f043 0301 	orr.w	r3, r3, #1
 800ed6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed6e:	4b0c      	ldr	r3, [pc, #48]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	60bb      	str	r3, [r7, #8]
 800ed78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed7a:	4b09      	ldr	r3, [pc, #36]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed7e:	4a08      	ldr	r2, [pc, #32]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed80:	f043 0302 	orr.w	r3, r3, #2
 800ed84:	6313      	str	r3, [r2, #48]	; 0x30
 800ed86:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <MX_GPIO_Init+0x5c>)
 800ed88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8a:	f003 0302 	and.w	r3, r3, #2
 800ed8e:	607b      	str	r3, [r7, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]

}
 800ed92:	bf00      	nop
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	40023800 	.word	0x40023800

0800eda4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800eda8:	bf00      	nop
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	691b      	ldr	r3, [r3, #16]
 800edc2:	3303      	adds	r3, #3
 800edc4:	f023 0303 	bic.w	r3, r3, #3
 800edc8:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    conv2d_1_scratch0_array.data = AI_PTR(activations + 0);
 800edca:	4a24      	ldr	r2, [pc, #144]	; (800ee5c <network_configure_activations+0xa8>)
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations + 0);
 800edd0:	4a22      	ldr	r2, [pc, #136]	; (800ee5c <network_configure_activations+0xa8>)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800edd6:	4b22      	ldr	r3, [pc, #136]	; (800ee60 <network_configure_activations+0xac>)
 800edd8:	2200      	movs	r2, #0
 800edda:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800eddc:	4b20      	ldr	r3, [pc, #128]	; (800ee60 <network_configure_activations+0xac>)
 800edde:	2200      	movs	r2, #0
 800ede0:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 2048);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ede8:	4a1e      	ldr	r2, [pc, #120]	; (800ee64 <network_configure_activations+0xb0>)
 800edea:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 2048);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edf2:	4a1c      	ldr	r2, [pc, #112]	; (800ee64 <network_configure_activations+0xb0>)
 800edf4:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 800edf6:	4a1c      	ldr	r2, [pc, #112]	; (800ee68 <network_configure_activations+0xb4>)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 800edfc:	4a1a      	ldr	r2, [pc, #104]	; (800ee68 <network_configure_activations+0xb4>)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 800ee02:	4a1a      	ldr	r2, [pc, #104]	; (800ee6c <network_configure_activations+0xb8>)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800ee08:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <network_configure_activations+0xb8>)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ee14:	4a16      	ldr	r2, [pc, #88]	; (800ee70 <network_configure_activations+0xbc>)
 800ee16:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ee1e:	4a14      	ldr	r2, [pc, #80]	; (800ee70 <network_configure_activations+0xbc>)
 800ee20:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 512);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ee28:	4a12      	ldr	r2, [pc, #72]	; (800ee74 <network_configure_activations+0xc0>)
 800ee2a:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 512);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ee32:	4a10      	ldr	r2, [pc, #64]	; (800ee74 <network_configure_activations+0xc0>)
 800ee34:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 800ee36:	4a10      	ldr	r2, [pc, #64]	; (800ee78 <network_configure_activations+0xc4>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 800ee3c:	4a0e      	ldr	r2, [pc, #56]	; (800ee78 <network_configure_activations+0xc4>)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 800ee42:	4b0e      	ldr	r3, [pc, #56]	; (800ee7c <network_configure_activations+0xc8>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 800ee48:	4b0c      	ldr	r3, [pc, #48]	; (800ee7c <network_configure_activations+0xc8>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800ee4e:	2301      	movs	r3, #1
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	200000a4 	.word	0x200000a4
 800ee60:	20000134 	.word	0x20000134
 800ee64:	20000144 	.word	0x20000144
 800ee68:	20000154 	.word	0x20000154
 800ee6c:	20000164 	.word	0x20000164
 800ee70:	20000174 	.word	0x20000174
 800ee74:	20000184 	.word	0x20000184
 800ee78:	20000194 	.word	0x20000194
 800ee7c:	200001a4 	.word	0x200001a4

0800ee80 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800ee90:	4b41      	ldr	r3, [pc, #260]	; (800ef98 <network_configure_weights+0x118>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee98:	4a3f      	ldr	r2, [pc, #252]	; (800ef98 <network_configure_weights+0x118>)
 800ee9a:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 794112);
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	4b3f      	ldr	r3, [pc, #252]	; (800ef9c <network_configure_weights+0x11c>)
 800eea0:	4413      	add	r3, r2
 800eea2:	4a3d      	ldr	r2, [pc, #244]	; (800ef98 <network_configure_weights+0x118>)
 800eea4:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 794112);
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	4b3c      	ldr	r3, [pc, #240]	; (800ef9c <network_configure_weights+0x11c>)
 800eeaa:	4413      	add	r3, r2
 800eeac:	4a3a      	ldr	r2, [pc, #232]	; (800ef98 <network_configure_weights+0x118>)
 800eeae:	60d3      	str	r3, [r2, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800eeb0:	4b3b      	ldr	r3, [pc, #236]	; (800efa0 <network_configure_weights+0x120>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eeb8:	4a39      	ldr	r2, [pc, #228]	; (800efa0 <network_configure_weights+0x120>)
 800eeba:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 791040);
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	4b39      	ldr	r3, [pc, #228]	; (800efa4 <network_configure_weights+0x124>)
 800eec0:	4413      	add	r3, r2
 800eec2:	4a37      	ldr	r2, [pc, #220]	; (800efa0 <network_configure_weights+0x120>)
 800eec4:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 791040);
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	4b36      	ldr	r3, [pc, #216]	; (800efa4 <network_configure_weights+0x124>)
 800eeca:	4413      	add	r3, r2
 800eecc:	4a34      	ldr	r2, [pc, #208]	; (800efa0 <network_configure_weights+0x120>)
 800eece:	60d3      	str	r3, [r2, #12]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800eed0:	4b35      	ldr	r3, [pc, #212]	; (800efa8 <network_configure_weights+0x128>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eed8:	4a33      	ldr	r2, [pc, #204]	; (800efa8 <network_configure_weights+0x128>)
 800eeda:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 790528);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f503 2341 	add.w	r3, r3, #790528	; 0xc1000
 800eee2:	4a31      	ldr	r2, [pc, #196]	; (800efa8 <network_configure_weights+0x128>)
 800eee4:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 790528);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f503 2341 	add.w	r3, r3, #790528	; 0xc1000
 800eeec:	4a2e      	ldr	r2, [pc, #184]	; (800efa8 <network_configure_weights+0x128>)
 800eeee:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800eef0:	4b2e      	ldr	r3, [pc, #184]	; (800efac <network_configure_weights+0x12c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eef8:	4a2c      	ldr	r2, [pc, #176]	; (800efac <network_configure_weights+0x12c>)
 800eefa:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 724992);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f503 2331 	add.w	r3, r3, #724992	; 0xb1000
 800ef02:	4a2a      	ldr	r2, [pc, #168]	; (800efac <network_configure_weights+0x12c>)
 800ef04:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 724992);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f503 2331 	add.w	r3, r3, #724992	; 0xb1000
 800ef0c:	4a27      	ldr	r2, [pc, #156]	; (800efac <network_configure_weights+0x12c>)
 800ef0e:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef10:	4b27      	ldr	r3, [pc, #156]	; (800efb0 <network_configure_weights+0x130>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef18:	4a25      	ldr	r2, [pc, #148]	; (800efb0 <network_configure_weights+0x130>)
 800ef1a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 724480);
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4b25      	ldr	r3, [pc, #148]	; (800efb4 <network_configure_weights+0x134>)
 800ef20:	4413      	add	r3, r2
 800ef22:	4a23      	ldr	r2, [pc, #140]	; (800efb0 <network_configure_weights+0x130>)
 800ef24:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 724480);
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	4b22      	ldr	r3, [pc, #136]	; (800efb4 <network_configure_weights+0x134>)
 800ef2a:	4413      	add	r3, r2
 800ef2c:	4a20      	ldr	r2, [pc, #128]	; (800efb0 <network_configure_weights+0x130>)
 800ef2e:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef30:	4b21      	ldr	r3, [pc, #132]	; (800efb8 <network_configure_weights+0x138>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef38:	4a1f      	ldr	r2, [pc, #124]	; (800efb8 <network_configure_weights+0x138>)
 800ef3a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 3584);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef42:	4a1d      	ldr	r2, [pc, #116]	; (800efb8 <network_configure_weights+0x138>)
 800ef44:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 2560);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800ef4c:	4a1a      	ldr	r2, [pc, #104]	; (800efb8 <network_configure_weights+0x138>)
 800ef4e:	60d3      	str	r3, [r2, #12]
  conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef50:	4b1a      	ldr	r3, [pc, #104]	; (800efbc <network_configure_weights+0x13c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef58:	4a18      	ldr	r2, [pc, #96]	; (800efbc <network_configure_weights+0x13c>)
 800ef5a:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 2048);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <network_configure_weights+0x13c>)
 800ef64:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 2048);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef6c:	4a13      	ldr	r2, [pc, #76]	; (800efbc <network_configure_weights+0x13c>)
 800ef6e:	60d3      	str	r3, [r2, #12]
  conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef70:	4b13      	ldr	r3, [pc, #76]	; (800efc0 <network_configure_weights+0x140>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef78:	4a11      	ldr	r2, [pc, #68]	; (800efc0 <network_configure_weights+0x140>)
 800ef7a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 800ef7c:	4a10      	ldr	r2, [pc, #64]	; (800efc0 <network_configure_weights+0x140>)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 800ef82:	4a0f      	ldr	r2, [pc, #60]	; (800efc0 <network_configure_weights+0x140>)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 800ef88:	2301      	movs	r3, #1
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	200000b4 	.word	0x200000b4
 800ef9c:	000c1e00 	.word	0x000c1e00
 800efa0:	200000c4 	.word	0x200000c4
 800efa4:	000c1200 	.word	0x000c1200
 800efa8:	200000d4 	.word	0x200000d4
 800efac:	200000e4 	.word	0x200000e4
 800efb0:	200000f4 	.word	0x200000f4
 800efb4:	000b0e00 	.word	0x000b0e00
 800efb8:	20000104 	.word	0x20000104
 800efbc:	20000114 	.word	0x20000114
 800efc0:	20000124 	.word	0x20000124

0800efc4 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b09e      	sub	sp, #120	; 0x78
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7f1 fdff 	bl	8000bd2 <ai_platform_context_acquire>
 800efd4:	6778      	str	r0, [r7, #116]	; 0x74

  if ( report && net_ctx )
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d046      	beq.n	800f06a <ai_network_get_info+0xa6>
 800efdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d043      	beq.n	800f06a <ai_network_get_info+0xa6>
  {
    ai_network_report r = {
 800efe2:	f107 0308 	add.w	r3, r7, #8
 800efe6:	226c      	movs	r2, #108	; 0x6c
 800efe8:	2100      	movs	r1, #0
 800efea:	4618      	mov	r0, r3
 800efec:	f000 fb08 	bl	800f600 <memset>
 800eff0:	4b20      	ldr	r3, [pc, #128]	; (800f074 <ai_network_get_info+0xb0>)
 800eff2:	60bb      	str	r3, [r7, #8]
 800eff4:	4b20      	ldr	r3, [pc, #128]	; (800f078 <ai_network_get_info+0xb4>)
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	4b20      	ldr	r3, [pc, #128]	; (800f07c <ai_network_get_info+0xb8>)
 800effa:	613b      	str	r3, [r7, #16]
 800effc:	4b20      	ldr	r3, [pc, #128]	; (800f080 <ai_network_get_info+0xbc>)
 800effe:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800f000:	f7f1 fcad 	bl	800095e <ai_platform_runtime_get_revision>
 800f004:	4603      	mov	r3, r0
    ai_network_report r = {
 800f006:	61bb      	str	r3, [r7, #24]
 800f008:	f7f1 fcf6 	bl	80009f8 <ai_platform_runtime_get_version>
 800f00c:	4603      	mov	r3, r0
 800f00e:	61fb      	str	r3, [r7, #28]
 800f010:	4b1c      	ldr	r3, [pc, #112]	; (800f084 <ai_network_get_info+0xc0>)
 800f012:	623b      	str	r3, [r7, #32]
 800f014:	2304      	movs	r3, #4
 800f016:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800f01a:	2301      	movs	r3, #1
 800f01c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800f020:	2303      	movs	r3, #3
 800f022:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800f026:	f7f1 fd36 	bl	8000a96 <ai_platform_api_get_version>
 800f02a:	4603      	mov	r3, r0
 800f02c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f02e:	f7f1 fd81 	bl	8000b34 <ai_platform_interface_api_get_version>
 800f032:	4603      	mov	r3, r0
 800f034:	633b      	str	r3, [r7, #48]	; 0x30
 800f036:	4b14      	ldr	r3, [pc, #80]	; (800f088 <ai_network_get_info+0xc4>)
 800f038:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800f03a:	f107 0308 	add.w	r3, r7, #8
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7f1 fe7e 	bl	8000d42 <ai_platform_api_get_network_report>
 800f046:	4603      	mov	r3, r0
 800f048:	f083 0301 	eor.w	r3, r3, #1
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <ai_network_get_info+0x92>
 800f052:	2300      	movs	r3, #0
 800f054:	e00a      	b.n	800f06c <ai_network_get_info+0xa8>

    *report = r;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	4618      	mov	r0, r3
 800f05a:	f107 0308 	add.w	r3, r7, #8
 800f05e:	226c      	movs	r2, #108	; 0x6c
 800f060:	4619      	mov	r1, r3
 800f062:	f000 fac2 	bl	800f5ea <memcpy>
    return true;
 800f066:	2301      	movs	r3, #1
 800f068:	e000      	b.n	800f06c <ai_network_get_info+0xa8>
  }

  return false;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3778      	adds	r7, #120	; 0x78
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	08012dec 	.word	0x08012dec
 800f078:	08012df4 	.word	0x08012df4
 800f07c:	08012e18 	.word	0x08012e18
 800f080:	08012e34 	.word	0x08012e34
 800f084:	08012e4c 	.word	0x08012e4c
 800f088:	000d59da 	.word	0x000d59da

0800f08c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7f1 fdf7 	bl	8000c88 <ai_platform_network_get_error>
 800f09a:	4603      	mov	r3, r0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af02      	add	r7, sp, #8
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	9301      	str	r3, [sp, #4]
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	4a04      	ldr	r2, [pc, #16]	; (800f0cc <ai_network_create+0x28>)
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7f1 feee 	bl	8000e9e <ai_platform_network_create>
 800f0c2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	20000054 	.word	0x20000054

0800f0d0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f1 ff17 	bl	8000f0c <ai_platform_network_destroy>
 800f0de:	4603      	mov	r3, r0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7f1 ff63 	bl	8000fc0 <ai_platform_network_init>
 800f0fa:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <ai_network_init+0x1e>
 800f102:	2300      	movs	r3, #0
 800f104:	e01f      	b.n	800f146 <ai_network_init+0x5e>

  ai_bool ok = true;
 800f106:	2301      	movs	r3, #1
 800f108:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	4619      	mov	r1, r3
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7ff feb6 	bl	800ee80 <network_configure_weights>
 800f114:	4603      	mov	r3, r0
 800f116:	461a      	mov	r2, r3
 800f118:	7afb      	ldrb	r3, [r7, #11]
 800f11a:	4013      	ands	r3, r2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	bf14      	ite	ne
 800f120:	2301      	movne	r3, #1
 800f122:	2300      	moveq	r3, #0
 800f124:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	3314      	adds	r3, #20
 800f12a:	4619      	mov	r1, r3
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f7ff fe41 	bl	800edb4 <network_configure_activations>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
 800f136:	7afb      	ldrb	r3, [r7, #11]
 800f138:	4013      	ands	r3, r2
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	bf14      	ite	ne
 800f13e:	2301      	movne	r3, #1
 800f140:	2300      	moveq	r3, #0
 800f142:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f144:	7afb      	ldrb	r3, [r7, #11]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	68b9      	ldr	r1, [r7, #8]
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7f1 ffb8 	bl	80010d4 <ai_platform_network_process>
 800f164:	4603      	mov	r3, r0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800f178:	2200      	movs	r2, #0
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7f1 ffa9 	bl	80010d4 <ai_platform_network_process>
 800f182:	4603      	mov	r3, r0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800f18c:	b480      	push	{r7}
 800f18e:	af00      	add	r7, sp, #0
    0xd6, 0x80, 0x3e, 0xa2, 0x72, 0x82, 0x3e, 0x5a, 0x88,
    0x41, 0xbf, 0xc6, 0x7d, 0x69, 0x3e, 0x18, 0x87, 0x37,
    0xbe, 0x83, 0x63, 0x0f, 0x3f, 0x51, 0xa1, 0xdd, 0xbe
  };

  return AI_HANDLE_PTR(s_network_weights);
 800f190:	4b02      	ldr	r3, [pc, #8]	; (800f19c <ai_network_data_weights_get+0x10>)
}
 800f192:	4618      	mov	r0, r3
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	080133c4 	.word	0x080133c4

0800f1a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1aa:	4a0e      	ldr	r2, [pc, #56]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1b0:	6413      	str	r3, [r2, #64]	; 0x40
 800f1b2:	4b0c      	ldr	r3, [pc, #48]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1ba:	607b      	str	r3, [r7, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1be:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1c2:	4a08      	ldr	r2, [pc, #32]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1c8:	6453      	str	r3, [r2, #68]	; 0x44
 800f1ca:	4b06      	ldr	r3, [pc, #24]	; (800f1e4 <HAL_MspInit+0x44>)
 800f1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f1d6:	bf00      	nop
 800f1d8:	370c      	adds	r7, #12
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	40023800 	.word	0x40023800

0800f1e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a0a      	ldr	r2, [pc, #40]	; (800f220 <HAL_CRC_MspInit+0x38>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d10b      	bne.n	800f212 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f1fa:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <HAL_CRC_MspInit+0x3c>)
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	4a09      	ldr	r2, [pc, #36]	; (800f224 <HAL_CRC_MspInit+0x3c>)
 800f200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f204:	6313      	str	r3, [r2, #48]	; 0x30
 800f206:	4b07      	ldr	r3, [pc, #28]	; (800f224 <HAL_CRC_MspInit+0x3c>)
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800f212:	bf00      	nop
 800f214:	3714      	adds	r7, #20
 800f216:	46bd      	mov	sp, r7
 800f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop
 800f220:	40023000 	.word	0x40023000
 800f224:	40023800 	.word	0x40023800

0800f228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08a      	sub	sp, #40	; 0x28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f230:	f107 0314 	add.w	r3, r7, #20
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	605a      	str	r2, [r3, #4]
 800f23a:	609a      	str	r2, [r3, #8]
 800f23c:	60da      	str	r2, [r3, #12]
 800f23e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a17      	ldr	r2, [pc, #92]	; (800f2a4 <HAL_I2C_MspInit+0x7c>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d127      	bne.n	800f29a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f24a:	4b17      	ldr	r3, [pc, #92]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24e:	4a16      	ldr	r2, [pc, #88]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f250:	f043 0302 	orr.w	r3, r3, #2
 800f254:	6313      	str	r3, [r2, #48]	; 0x30
 800f256:	4b14      	ldr	r3, [pc, #80]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f25a:	f003 0302 	and.w	r3, r3, #2
 800f25e:	613b      	str	r3, [r7, #16]
 800f260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f262:	23c0      	movs	r3, #192	; 0xc0
 800f264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f266:	2312      	movs	r3, #18
 800f268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f26a:	2301      	movs	r3, #1
 800f26c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f26e:	2303      	movs	r3, #3
 800f270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f272:	2304      	movs	r3, #4
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f276:	f107 0314 	add.w	r3, r7, #20
 800f27a:	4619      	mov	r1, r3
 800f27c:	480b      	ldr	r0, [pc, #44]	; (800f2ac <HAL_I2C_MspInit+0x84>)
 800f27e:	f7f7 fdcd 	bl	8006e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f282:	4b09      	ldr	r3, [pc, #36]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f286:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f28c:	6413      	str	r3, [r2, #64]	; 0x40
 800f28e:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <HAL_I2C_MspInit+0x80>)
 800f290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800f29a:	bf00      	nop
 800f29c:	3728      	adds	r7, #40	; 0x28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	40005400 	.word	0x40005400
 800f2a8:	40023800 	.word	0x40023800
 800f2ac:	40020400 	.word	0x40020400

0800f2b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08a      	sub	sp, #40	; 0x28
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	2200      	movs	r2, #0
 800f2be:	601a      	str	r2, [r3, #0]
 800f2c0:	605a      	str	r2, [r3, #4]
 800f2c2:	609a      	str	r2, [r3, #8]
 800f2c4:	60da      	str	r2, [r3, #12]
 800f2c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a17      	ldr	r2, [pc, #92]	; (800f32c <HAL_UART_MspInit+0x7c>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d128      	bne.n	800f324 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800f2d2:	4b17      	ldr	r3, [pc, #92]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d6:	4a16      	ldr	r2, [pc, #88]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2dc:	6413      	str	r3, [r2, #64]	; 0x40
 800f2de:	4b14      	ldr	r3, [pc, #80]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2e6:	613b      	str	r3, [r7, #16]
 800f2e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f2ea:	4b11      	ldr	r3, [pc, #68]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ee:	4a10      	ldr	r2, [pc, #64]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2f0:	f043 0308 	orr.w	r3, r3, #8
 800f2f4:	6313      	str	r3, [r2, #48]	; 0x30
 800f2f6:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <HAL_UART_MspInit+0x80>)
 800f2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fa:	f003 0308 	and.w	r3, r3, #8
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f302:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f308:	2302      	movs	r3, #2
 800f30a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f30c:	2300      	movs	r3, #0
 800f30e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f310:	2303      	movs	r3, #3
 800f312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f314:	2307      	movs	r3, #7
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f318:	f107 0314 	add.w	r3, r7, #20
 800f31c:	4619      	mov	r1, r3
 800f31e:	4805      	ldr	r0, [pc, #20]	; (800f334 <HAL_UART_MspInit+0x84>)
 800f320:	f7f7 fd7c 	bl	8006e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800f324:	bf00      	nop
 800f326:	3728      	adds	r7, #40	; 0x28
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	40004800 	.word	0x40004800
 800f330:	40023800 	.word	0x40023800
 800f334:	40020c00 	.word	0x40020c00

0800f338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f33c:	bf00      	nop
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr

0800f346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f346:	b480      	push	{r7}
 800f348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f34a:	e7fe      	b.n	800f34a <HardFault_Handler+0x4>

0800f34c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f350:	e7fe      	b.n	800f350 <MemManage_Handler+0x4>

0800f352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f352:	b480      	push	{r7}
 800f354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f356:	e7fe      	b.n	800f356 <BusFault_Handler+0x4>

0800f358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f358:	b480      	push	{r7}
 800f35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f35c:	e7fe      	b.n	800f35c <UsageFault_Handler+0x4>

0800f35e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f35e:	b480      	push	{r7}
 800f360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f362:	bf00      	nop
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f36c:	b480      	push	{r7}
 800f36e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f370:	bf00      	nop
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f37a:	b480      	push	{r7}
 800f37c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f37e:	bf00      	nop
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f38c:	f7f7 fb10 	bl	80069b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f390:	bf00      	nop
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	617b      	str	r3, [r7, #20]
 800f3a4:	e00a      	b.n	800f3bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f3a6:	f3af 8000 	nop.w
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	1c5a      	adds	r2, r3, #1
 800f3b0:	60ba      	str	r2, [r7, #8]
 800f3b2:	b2ca      	uxtb	r2, r1
 800f3b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	dbf0      	blt.n	800f3a6 <_read+0x12>
	}

return len;
 800f3c4:	687b      	ldr	r3, [r7, #4]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3718      	adds	r7, #24
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <_close>:
	}
	return len;
}

int _close(int file)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b083      	sub	sp, #12
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
	return -1;
 800f3d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b083      	sub	sp, #12
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f3f6:	605a      	str	r2, [r3, #4]
	return 0;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	370c      	adds	r7, #12
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <_isatty>:

int _isatty(int file)
{
 800f406:	b480      	push	{r7}
 800f408:	b083      	sub	sp, #12
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
	return 1;
 800f40e:	2301      	movs	r3, #1
}
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
	return 0;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
	...

0800f438 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f440:	4b11      	ldr	r3, [pc, #68]	; (800f488 <_sbrk+0x50>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d102      	bne.n	800f44e <_sbrk+0x16>
		heap_end = &end;
 800f448:	4b0f      	ldr	r3, [pc, #60]	; (800f488 <_sbrk+0x50>)
 800f44a:	4a10      	ldr	r2, [pc, #64]	; (800f48c <_sbrk+0x54>)
 800f44c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800f44e:	4b0e      	ldr	r3, [pc, #56]	; (800f488 <_sbrk+0x50>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800f454:	4b0c      	ldr	r3, [pc, #48]	; (800f488 <_sbrk+0x50>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4413      	add	r3, r2
 800f45c:	466a      	mov	r2, sp
 800f45e:	4293      	cmp	r3, r2
 800f460:	d907      	bls.n	800f472 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800f462:	f000 f879 	bl	800f558 <__errno>
 800f466:	4602      	mov	r2, r0
 800f468:	230c      	movs	r3, #12
 800f46a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800f46c:	f04f 33ff 	mov.w	r3, #4294967295
 800f470:	e006      	b.n	800f480 <_sbrk+0x48>
	}

	heap_end += incr;
 800f472:	4b05      	ldr	r3, [pc, #20]	; (800f488 <_sbrk+0x50>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4413      	add	r3, r2
 800f47a:	4a03      	ldr	r2, [pc, #12]	; (800f488 <_sbrk+0x50>)
 800f47c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f47e:	68fb      	ldr	r3, [r7, #12]
}
 800f480:	4618      	mov	r0, r3
 800f482:	3710      	adds	r7, #16
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20006f9c 	.word	0x20006f9c
 800f48c:	200070c0 	.word	0x200070c0

0800f490 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f494:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <SystemInit+0x5c>)
 800f496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f49a:	4a14      	ldr	r2, [pc, #80]	; (800f4ec <SystemInit+0x5c>)
 800f49c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f4a4:	4b12      	ldr	r3, [pc, #72]	; (800f4f0 <SystemInit+0x60>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a11      	ldr	r2, [pc, #68]	; (800f4f0 <SystemInit+0x60>)
 800f4aa:	f043 0301 	orr.w	r3, r3, #1
 800f4ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f4b0:	4b0f      	ldr	r3, [pc, #60]	; (800f4f0 <SystemInit+0x60>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f4b6:	4b0e      	ldr	r3, [pc, #56]	; (800f4f0 <SystemInit+0x60>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	490d      	ldr	r1, [pc, #52]	; (800f4f0 <SystemInit+0x60>)
 800f4bc:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <SystemInit+0x64>)
 800f4be:	4013      	ands	r3, r2
 800f4c0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f4c2:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <SystemInit+0x60>)
 800f4c4:	4a0c      	ldr	r2, [pc, #48]	; (800f4f8 <SystemInit+0x68>)
 800f4c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f4c8:	4b09      	ldr	r3, [pc, #36]	; (800f4f0 <SystemInit+0x60>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a08      	ldr	r2, [pc, #32]	; (800f4f0 <SystemInit+0x60>)
 800f4ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f4d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f4d4:	4b06      	ldr	r3, [pc, #24]	; (800f4f0 <SystemInit+0x60>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f4da:	4b04      	ldr	r3, [pc, #16]	; (800f4ec <SystemInit+0x5c>)
 800f4dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f4e0:	609a      	str	r2, [r3, #8]
#endif
}
 800f4e2:	bf00      	nop
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	e000ed00 	.word	0xe000ed00
 800f4f0:	40023800 	.word	0x40023800
 800f4f4:	fef6ffff 	.word	0xfef6ffff
 800f4f8:	24003010 	.word	0x24003010

0800f4fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f4fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f502:	e003      	b.n	800f50c <LoopCopyDataInit>

0800f504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f504:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f50a:	3104      	adds	r1, #4

0800f50c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f50c:	480b      	ldr	r0, [pc, #44]	; (800f53c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f50e:	4b0c      	ldr	r3, [pc, #48]	; (800f540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f514:	d3f6      	bcc.n	800f504 <CopyDataInit>
  ldr  r2, =_sbss
 800f516:	4a0b      	ldr	r2, [pc, #44]	; (800f544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f518:	e002      	b.n	800f520 <LoopFillZerobss>

0800f51a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f51a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f51c:	f842 3b04 	str.w	r3, [r2], #4

0800f520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f520:	4b09      	ldr	r3, [pc, #36]	; (800f548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f524:	d3f9      	bcc.n	800f51a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f526:	f7ff ffb3 	bl	800f490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f52a:	f000 f81b 	bl	800f564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f52e:	f7ff fa6b 	bl	800ea08 <main>
  bx  lr    
 800f532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f534:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800f538:	080d5858 	.word	0x080d5858
  ldr  r0, =_sdata
 800f53c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f540:	200008e4 	.word	0x200008e4
  ldr  r2, =_sbss
 800f544:	200008e8 	.word	0x200008e8
  ldr  r3, = _ebss
 800f548:	200070bc 	.word	0x200070bc

0800f54c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f54c:	e7fe      	b.n	800f54c <ADC_IRQHandler>

0800f54e <__aeabi_memclr>:
 800f54e:	2200      	movs	r2, #0
 800f550:	f7f6 bc52 	b.w	8005df8 <__aeabi_memset>

0800f554 <__aeabi_memcpy>:
 800f554:	f000 b849 	b.w	800f5ea <memcpy>

0800f558 <__errno>:
 800f558:	4b01      	ldr	r3, [pc, #4]	; (800f560 <__errno+0x8>)
 800f55a:	6818      	ldr	r0, [r3, #0]
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	20000714 	.word	0x20000714

0800f564 <__libc_init_array>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	4e0d      	ldr	r6, [pc, #52]	; (800f59c <__libc_init_array+0x38>)
 800f568:	4c0d      	ldr	r4, [pc, #52]	; (800f5a0 <__libc_init_array+0x3c>)
 800f56a:	1ba4      	subs	r4, r4, r6
 800f56c:	10a4      	asrs	r4, r4, #2
 800f56e:	2500      	movs	r5, #0
 800f570:	42a5      	cmp	r5, r4
 800f572:	d109      	bne.n	800f588 <__libc_init_array+0x24>
 800f574:	4e0b      	ldr	r6, [pc, #44]	; (800f5a4 <__libc_init_array+0x40>)
 800f576:	4c0c      	ldr	r4, [pc, #48]	; (800f5a8 <__libc_init_array+0x44>)
 800f578:	f002 ff8c 	bl	8012494 <_init>
 800f57c:	1ba4      	subs	r4, r4, r6
 800f57e:	10a4      	asrs	r4, r4, #2
 800f580:	2500      	movs	r5, #0
 800f582:	42a5      	cmp	r5, r4
 800f584:	d105      	bne.n	800f592 <__libc_init_array+0x2e>
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f58c:	4798      	blx	r3
 800f58e:	3501      	adds	r5, #1
 800f590:	e7ee      	b.n	800f570 <__libc_init_array+0xc>
 800f592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f596:	4798      	blx	r3
 800f598:	3501      	adds	r5, #1
 800f59a:	e7f2      	b.n	800f582 <__libc_init_array+0x1e>
 800f59c:	080d5850 	.word	0x080d5850
 800f5a0:	080d5850 	.word	0x080d5850
 800f5a4:	080d5850 	.word	0x080d5850
 800f5a8:	080d5854 	.word	0x080d5854

0800f5ac <malloc>:
 800f5ac:	4b02      	ldr	r3, [pc, #8]	; (800f5b8 <malloc+0xc>)
 800f5ae:	4601      	mov	r1, r0
 800f5b0:	6818      	ldr	r0, [r3, #0]
 800f5b2:	f000 b87b 	b.w	800f6ac <_malloc_r>
 800f5b6:	bf00      	nop
 800f5b8:	20000714 	.word	0x20000714

0800f5bc <free>:
 800f5bc:	4b02      	ldr	r3, [pc, #8]	; (800f5c8 <free+0xc>)
 800f5be:	4601      	mov	r1, r0
 800f5c0:	6818      	ldr	r0, [r3, #0]
 800f5c2:	f000 b825 	b.w	800f610 <_free_r>
 800f5c6:	bf00      	nop
 800f5c8:	20000714 	.word	0x20000714

0800f5cc <memcmp>:
 800f5cc:	b530      	push	{r4, r5, lr}
 800f5ce:	2400      	movs	r4, #0
 800f5d0:	42a2      	cmp	r2, r4
 800f5d2:	d101      	bne.n	800f5d8 <memcmp+0xc>
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	e007      	b.n	800f5e8 <memcmp+0x1c>
 800f5d8:	5d03      	ldrb	r3, [r0, r4]
 800f5da:	3401      	adds	r4, #1
 800f5dc:	190d      	adds	r5, r1, r4
 800f5de:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f5e2:	42ab      	cmp	r3, r5
 800f5e4:	d0f4      	beq.n	800f5d0 <memcmp+0x4>
 800f5e6:	1b58      	subs	r0, r3, r5
 800f5e8:	bd30      	pop	{r4, r5, pc}

0800f5ea <memcpy>:
 800f5ea:	b510      	push	{r4, lr}
 800f5ec:	1e43      	subs	r3, r0, #1
 800f5ee:	440a      	add	r2, r1
 800f5f0:	4291      	cmp	r1, r2
 800f5f2:	d100      	bne.n	800f5f6 <memcpy+0xc>
 800f5f4:	bd10      	pop	{r4, pc}
 800f5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5fe:	e7f7      	b.n	800f5f0 <memcpy+0x6>

0800f600 <memset>:
 800f600:	4402      	add	r2, r0
 800f602:	4603      	mov	r3, r0
 800f604:	4293      	cmp	r3, r2
 800f606:	d100      	bne.n	800f60a <memset+0xa>
 800f608:	4770      	bx	lr
 800f60a:	f803 1b01 	strb.w	r1, [r3], #1
 800f60e:	e7f9      	b.n	800f604 <memset+0x4>

0800f610 <_free_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4605      	mov	r5, r0
 800f614:	2900      	cmp	r1, #0
 800f616:	d045      	beq.n	800f6a4 <_free_r+0x94>
 800f618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f61c:	1f0c      	subs	r4, r1, #4
 800f61e:	2b00      	cmp	r3, #0
 800f620:	bfb8      	it	lt
 800f622:	18e4      	addlt	r4, r4, r3
 800f624:	f001 fe04 	bl	8011230 <__malloc_lock>
 800f628:	4a1f      	ldr	r2, [pc, #124]	; (800f6a8 <_free_r+0x98>)
 800f62a:	6813      	ldr	r3, [r2, #0]
 800f62c:	4610      	mov	r0, r2
 800f62e:	b933      	cbnz	r3, 800f63e <_free_r+0x2e>
 800f630:	6063      	str	r3, [r4, #4]
 800f632:	6014      	str	r4, [r2, #0]
 800f634:	4628      	mov	r0, r5
 800f636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f63a:	f001 bdfa 	b.w	8011232 <__malloc_unlock>
 800f63e:	42a3      	cmp	r3, r4
 800f640:	d90c      	bls.n	800f65c <_free_r+0x4c>
 800f642:	6821      	ldr	r1, [r4, #0]
 800f644:	1862      	adds	r2, r4, r1
 800f646:	4293      	cmp	r3, r2
 800f648:	bf04      	itt	eq
 800f64a:	681a      	ldreq	r2, [r3, #0]
 800f64c:	685b      	ldreq	r3, [r3, #4]
 800f64e:	6063      	str	r3, [r4, #4]
 800f650:	bf04      	itt	eq
 800f652:	1852      	addeq	r2, r2, r1
 800f654:	6022      	streq	r2, [r4, #0]
 800f656:	6004      	str	r4, [r0, #0]
 800f658:	e7ec      	b.n	800f634 <_free_r+0x24>
 800f65a:	4613      	mov	r3, r2
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	b10a      	cbz	r2, 800f664 <_free_r+0x54>
 800f660:	42a2      	cmp	r2, r4
 800f662:	d9fa      	bls.n	800f65a <_free_r+0x4a>
 800f664:	6819      	ldr	r1, [r3, #0]
 800f666:	1858      	adds	r0, r3, r1
 800f668:	42a0      	cmp	r0, r4
 800f66a:	d10b      	bne.n	800f684 <_free_r+0x74>
 800f66c:	6820      	ldr	r0, [r4, #0]
 800f66e:	4401      	add	r1, r0
 800f670:	1858      	adds	r0, r3, r1
 800f672:	4282      	cmp	r2, r0
 800f674:	6019      	str	r1, [r3, #0]
 800f676:	d1dd      	bne.n	800f634 <_free_r+0x24>
 800f678:	6810      	ldr	r0, [r2, #0]
 800f67a:	6852      	ldr	r2, [r2, #4]
 800f67c:	605a      	str	r2, [r3, #4]
 800f67e:	4401      	add	r1, r0
 800f680:	6019      	str	r1, [r3, #0]
 800f682:	e7d7      	b.n	800f634 <_free_r+0x24>
 800f684:	d902      	bls.n	800f68c <_free_r+0x7c>
 800f686:	230c      	movs	r3, #12
 800f688:	602b      	str	r3, [r5, #0]
 800f68a:	e7d3      	b.n	800f634 <_free_r+0x24>
 800f68c:	6820      	ldr	r0, [r4, #0]
 800f68e:	1821      	adds	r1, r4, r0
 800f690:	428a      	cmp	r2, r1
 800f692:	bf04      	itt	eq
 800f694:	6811      	ldreq	r1, [r2, #0]
 800f696:	6852      	ldreq	r2, [r2, #4]
 800f698:	6062      	str	r2, [r4, #4]
 800f69a:	bf04      	itt	eq
 800f69c:	1809      	addeq	r1, r1, r0
 800f69e:	6021      	streq	r1, [r4, #0]
 800f6a0:	605c      	str	r4, [r3, #4]
 800f6a2:	e7c7      	b.n	800f634 <_free_r+0x24>
 800f6a4:	bd38      	pop	{r3, r4, r5, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20006fa0 	.word	0x20006fa0

0800f6ac <_malloc_r>:
 800f6ac:	b570      	push	{r4, r5, r6, lr}
 800f6ae:	1ccd      	adds	r5, r1, #3
 800f6b0:	f025 0503 	bic.w	r5, r5, #3
 800f6b4:	3508      	adds	r5, #8
 800f6b6:	2d0c      	cmp	r5, #12
 800f6b8:	bf38      	it	cc
 800f6ba:	250c      	movcc	r5, #12
 800f6bc:	2d00      	cmp	r5, #0
 800f6be:	4606      	mov	r6, r0
 800f6c0:	db01      	blt.n	800f6c6 <_malloc_r+0x1a>
 800f6c2:	42a9      	cmp	r1, r5
 800f6c4:	d903      	bls.n	800f6ce <_malloc_r+0x22>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	6033      	str	r3, [r6, #0]
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	f001 fdaf 	bl	8011230 <__malloc_lock>
 800f6d2:	4a21      	ldr	r2, [pc, #132]	; (800f758 <_malloc_r+0xac>)
 800f6d4:	6814      	ldr	r4, [r2, #0]
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	b991      	cbnz	r1, 800f700 <_malloc_r+0x54>
 800f6da:	4c20      	ldr	r4, [pc, #128]	; (800f75c <_malloc_r+0xb0>)
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	b91b      	cbnz	r3, 800f6e8 <_malloc_r+0x3c>
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f000 fcfd 	bl	80100e0 <_sbrk_r>
 800f6e6:	6020      	str	r0, [r4, #0]
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f000 fcf8 	bl	80100e0 <_sbrk_r>
 800f6f0:	1c43      	adds	r3, r0, #1
 800f6f2:	d124      	bne.n	800f73e <_malloc_r+0x92>
 800f6f4:	230c      	movs	r3, #12
 800f6f6:	6033      	str	r3, [r6, #0]
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f001 fd9a 	bl	8011232 <__malloc_unlock>
 800f6fe:	e7e4      	b.n	800f6ca <_malloc_r+0x1e>
 800f700:	680b      	ldr	r3, [r1, #0]
 800f702:	1b5b      	subs	r3, r3, r5
 800f704:	d418      	bmi.n	800f738 <_malloc_r+0x8c>
 800f706:	2b0b      	cmp	r3, #11
 800f708:	d90f      	bls.n	800f72a <_malloc_r+0x7e>
 800f70a:	600b      	str	r3, [r1, #0]
 800f70c:	50cd      	str	r5, [r1, r3]
 800f70e:	18cc      	adds	r4, r1, r3
 800f710:	4630      	mov	r0, r6
 800f712:	f001 fd8e 	bl	8011232 <__malloc_unlock>
 800f716:	f104 000b 	add.w	r0, r4, #11
 800f71a:	1d23      	adds	r3, r4, #4
 800f71c:	f020 0007 	bic.w	r0, r0, #7
 800f720:	1ac3      	subs	r3, r0, r3
 800f722:	d0d3      	beq.n	800f6cc <_malloc_r+0x20>
 800f724:	425a      	negs	r2, r3
 800f726:	50e2      	str	r2, [r4, r3]
 800f728:	e7d0      	b.n	800f6cc <_malloc_r+0x20>
 800f72a:	428c      	cmp	r4, r1
 800f72c:	684b      	ldr	r3, [r1, #4]
 800f72e:	bf16      	itet	ne
 800f730:	6063      	strne	r3, [r4, #4]
 800f732:	6013      	streq	r3, [r2, #0]
 800f734:	460c      	movne	r4, r1
 800f736:	e7eb      	b.n	800f710 <_malloc_r+0x64>
 800f738:	460c      	mov	r4, r1
 800f73a:	6849      	ldr	r1, [r1, #4]
 800f73c:	e7cc      	b.n	800f6d8 <_malloc_r+0x2c>
 800f73e:	1cc4      	adds	r4, r0, #3
 800f740:	f024 0403 	bic.w	r4, r4, #3
 800f744:	42a0      	cmp	r0, r4
 800f746:	d005      	beq.n	800f754 <_malloc_r+0xa8>
 800f748:	1a21      	subs	r1, r4, r0
 800f74a:	4630      	mov	r0, r6
 800f74c:	f000 fcc8 	bl	80100e0 <_sbrk_r>
 800f750:	3001      	adds	r0, #1
 800f752:	d0cf      	beq.n	800f6f4 <_malloc_r+0x48>
 800f754:	6025      	str	r5, [r4, #0]
 800f756:	e7db      	b.n	800f710 <_malloc_r+0x64>
 800f758:	20006fa0 	.word	0x20006fa0
 800f75c:	20006fa4 	.word	0x20006fa4

0800f760 <__cvt>:
 800f760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f762:	ed2d 8b02 	vpush	{d8}
 800f766:	eeb0 8b40 	vmov.f64	d8, d0
 800f76a:	b085      	sub	sp, #20
 800f76c:	4617      	mov	r7, r2
 800f76e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f770:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f772:	ee18 2a90 	vmov	r2, s17
 800f776:	f025 0520 	bic.w	r5, r5, #32
 800f77a:	2a00      	cmp	r2, #0
 800f77c:	bfb6      	itet	lt
 800f77e:	222d      	movlt	r2, #45	; 0x2d
 800f780:	2200      	movge	r2, #0
 800f782:	eeb1 8b40 	vneglt.f64	d8, d0
 800f786:	2d46      	cmp	r5, #70	; 0x46
 800f788:	460c      	mov	r4, r1
 800f78a:	701a      	strb	r2, [r3, #0]
 800f78c:	d004      	beq.n	800f798 <__cvt+0x38>
 800f78e:	2d45      	cmp	r5, #69	; 0x45
 800f790:	d100      	bne.n	800f794 <__cvt+0x34>
 800f792:	3401      	adds	r4, #1
 800f794:	2102      	movs	r1, #2
 800f796:	e000      	b.n	800f79a <__cvt+0x3a>
 800f798:	2103      	movs	r1, #3
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	ab02      	add	r3, sp, #8
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	4633      	mov	r3, r6
 800f7a6:	eeb0 0b48 	vmov.f64	d0, d8
 800f7aa:	f000 fe09 	bl	80103c0 <_dtoa_r>
 800f7ae:	2d47      	cmp	r5, #71	; 0x47
 800f7b0:	d101      	bne.n	800f7b6 <__cvt+0x56>
 800f7b2:	07fb      	lsls	r3, r7, #31
 800f7b4:	d51e      	bpl.n	800f7f4 <__cvt+0x94>
 800f7b6:	2d46      	cmp	r5, #70	; 0x46
 800f7b8:	eb00 0304 	add.w	r3, r0, r4
 800f7bc:	d10c      	bne.n	800f7d8 <__cvt+0x78>
 800f7be:	7802      	ldrb	r2, [r0, #0]
 800f7c0:	2a30      	cmp	r2, #48	; 0x30
 800f7c2:	d107      	bne.n	800f7d4 <__cvt+0x74>
 800f7c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7cc:	bf1c      	itt	ne
 800f7ce:	f1c4 0401 	rsbne	r4, r4, #1
 800f7d2:	6034      	strne	r4, [r6, #0]
 800f7d4:	6832      	ldr	r2, [r6, #0]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e0:	d007      	beq.n	800f7f2 <__cvt+0x92>
 800f7e2:	2130      	movs	r1, #48	; 0x30
 800f7e4:	9a03      	ldr	r2, [sp, #12]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d204      	bcs.n	800f7f4 <__cvt+0x94>
 800f7ea:	1c54      	adds	r4, r2, #1
 800f7ec:	9403      	str	r4, [sp, #12]
 800f7ee:	7011      	strb	r1, [r2, #0]
 800f7f0:	e7f8      	b.n	800f7e4 <__cvt+0x84>
 800f7f2:	9303      	str	r3, [sp, #12]
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7f8:	1a1b      	subs	r3, r3, r0
 800f7fa:	6013      	str	r3, [r2, #0]
 800f7fc:	b005      	add	sp, #20
 800f7fe:	ecbd 8b02 	vpop	{d8}
 800f802:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f804 <__exponent>:
 800f804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f806:	2900      	cmp	r1, #0
 800f808:	4604      	mov	r4, r0
 800f80a:	bfba      	itte	lt
 800f80c:	4249      	neglt	r1, r1
 800f80e:	232d      	movlt	r3, #45	; 0x2d
 800f810:	232b      	movge	r3, #43	; 0x2b
 800f812:	2909      	cmp	r1, #9
 800f814:	f804 2b02 	strb.w	r2, [r4], #2
 800f818:	7043      	strb	r3, [r0, #1]
 800f81a:	dd20      	ble.n	800f85e <__exponent+0x5a>
 800f81c:	f10d 0307 	add.w	r3, sp, #7
 800f820:	461f      	mov	r7, r3
 800f822:	260a      	movs	r6, #10
 800f824:	fb91 f5f6 	sdiv	r5, r1, r6
 800f828:	fb06 1115 	mls	r1, r6, r5, r1
 800f82c:	3130      	adds	r1, #48	; 0x30
 800f82e:	2d09      	cmp	r5, #9
 800f830:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f834:	f103 32ff 	add.w	r2, r3, #4294967295
 800f838:	4629      	mov	r1, r5
 800f83a:	dc09      	bgt.n	800f850 <__exponent+0x4c>
 800f83c:	3130      	adds	r1, #48	; 0x30
 800f83e:	3b02      	subs	r3, #2
 800f840:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f844:	42bb      	cmp	r3, r7
 800f846:	4622      	mov	r2, r4
 800f848:	d304      	bcc.n	800f854 <__exponent+0x50>
 800f84a:	1a10      	subs	r0, r2, r0
 800f84c:	b003      	add	sp, #12
 800f84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f850:	4613      	mov	r3, r2
 800f852:	e7e7      	b.n	800f824 <__exponent+0x20>
 800f854:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f858:	f804 2b01 	strb.w	r2, [r4], #1
 800f85c:	e7f2      	b.n	800f844 <__exponent+0x40>
 800f85e:	2330      	movs	r3, #48	; 0x30
 800f860:	4419      	add	r1, r3
 800f862:	7083      	strb	r3, [r0, #2]
 800f864:	1d02      	adds	r2, r0, #4
 800f866:	70c1      	strb	r1, [r0, #3]
 800f868:	e7ef      	b.n	800f84a <__exponent+0x46>
 800f86a:	0000      	movs	r0, r0
 800f86c:	0000      	movs	r0, r0
	...

0800f870 <_printf_float>:
 800f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	b08d      	sub	sp, #52	; 0x34
 800f876:	460c      	mov	r4, r1
 800f878:	4616      	mov	r6, r2
 800f87a:	461f      	mov	r7, r3
 800f87c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f880:	4605      	mov	r5, r0
 800f882:	f001 fc63 	bl	801114c <_localeconv_r>
 800f886:	f8d0 b000 	ldr.w	fp, [r0]
 800f88a:	4658      	mov	r0, fp
 800f88c:	f7f6 fb01 	bl	8005e92 <strlen>
 800f890:	2300      	movs	r3, #0
 800f892:	930a      	str	r3, [sp, #40]	; 0x28
 800f894:	f8d8 3000 	ldr.w	r3, [r8]
 800f898:	9005      	str	r0, [sp, #20]
 800f89a:	3307      	adds	r3, #7
 800f89c:	f023 0307 	bic.w	r3, r3, #7
 800f8a0:	f103 0108 	add.w	r1, r3, #8
 800f8a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f8a8:	6822      	ldr	r2, [r4, #0]
 800f8aa:	f8c8 1000 	str.w	r1, [r8]
 800f8ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f8b6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800fb40 <_printf_float+0x2d0>
 800f8ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f8be:	eeb0 6bc0 	vabs.f64	d6, d0
 800f8c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ca:	dd24      	ble.n	800f916 <_printf_float+0xa6>
 800f8cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	d502      	bpl.n	800f8dc <_printf_float+0x6c>
 800f8d6:	232d      	movs	r3, #45	; 0x2d
 800f8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8dc:	499a      	ldr	r1, [pc, #616]	; (800fb48 <_printf_float+0x2d8>)
 800f8de:	4b9b      	ldr	r3, [pc, #620]	; (800fb4c <_printf_float+0x2dc>)
 800f8e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f8e4:	bf8c      	ite	hi
 800f8e6:	4688      	movhi	r8, r1
 800f8e8:	4698      	movls	r8, r3
 800f8ea:	f022 0204 	bic.w	r2, r2, #4
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	6123      	str	r3, [r4, #16]
 800f8f2:	6022      	str	r2, [r4, #0]
 800f8f4:	f04f 0a00 	mov.w	sl, #0
 800f8f8:	9700      	str	r7, [sp, #0]
 800f8fa:	4633      	mov	r3, r6
 800f8fc:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f000 f9e1 	bl	800fcc8 <_printf_common>
 800f906:	3001      	adds	r0, #1
 800f908:	f040 8089 	bne.w	800fa1e <_printf_float+0x1ae>
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	b00d      	add	sp, #52	; 0x34
 800f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f916:	eeb4 0b40 	vcmp.f64	d0, d0
 800f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91e:	d702      	bvc.n	800f926 <_printf_float+0xb6>
 800f920:	498b      	ldr	r1, [pc, #556]	; (800fb50 <_printf_float+0x2e0>)
 800f922:	4b8c      	ldr	r3, [pc, #560]	; (800fb54 <_printf_float+0x2e4>)
 800f924:	e7dc      	b.n	800f8e0 <_printf_float+0x70>
 800f926:	6861      	ldr	r1, [r4, #4]
 800f928:	1c4b      	adds	r3, r1, #1
 800f92a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f92e:	ab0a      	add	r3, sp, #40	; 0x28
 800f930:	a809      	add	r0, sp, #36	; 0x24
 800f932:	d13b      	bne.n	800f9ac <_printf_float+0x13c>
 800f934:	2106      	movs	r1, #6
 800f936:	6061      	str	r1, [r4, #4]
 800f938:	f04f 0c00 	mov.w	ip, #0
 800f93c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800f940:	e9cd 0900 	strd	r0, r9, [sp]
 800f944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f948:	6022      	str	r2, [r4, #0]
 800f94a:	6861      	ldr	r1, [r4, #4]
 800f94c:	4628      	mov	r0, r5
 800f94e:	f7ff ff07 	bl	800f760 <__cvt>
 800f952:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800f956:	2b47      	cmp	r3, #71	; 0x47
 800f958:	4680      	mov	r8, r0
 800f95a:	d109      	bne.n	800f970 <_printf_float+0x100>
 800f95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f95e:	1cd8      	adds	r0, r3, #3
 800f960:	db02      	blt.n	800f968 <_printf_float+0xf8>
 800f962:	6862      	ldr	r2, [r4, #4]
 800f964:	4293      	cmp	r3, r2
 800f966:	dd47      	ble.n	800f9f8 <_printf_float+0x188>
 800f968:	f1a9 0902 	sub.w	r9, r9, #2
 800f96c:	fa5f f989 	uxtb.w	r9, r9
 800f970:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f976:	d824      	bhi.n	800f9c2 <_printf_float+0x152>
 800f978:	3901      	subs	r1, #1
 800f97a:	464a      	mov	r2, r9
 800f97c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f980:	9109      	str	r1, [sp, #36]	; 0x24
 800f982:	f7ff ff3f 	bl	800f804 <__exponent>
 800f986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f988:	1813      	adds	r3, r2, r0
 800f98a:	2a01      	cmp	r2, #1
 800f98c:	4682      	mov	sl, r0
 800f98e:	6123      	str	r3, [r4, #16]
 800f990:	dc02      	bgt.n	800f998 <_printf_float+0x128>
 800f992:	6822      	ldr	r2, [r4, #0]
 800f994:	07d1      	lsls	r1, r2, #31
 800f996:	d501      	bpl.n	800f99c <_printf_float+0x12c>
 800f998:	3301      	adds	r3, #1
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0a9      	beq.n	800f8f8 <_printf_float+0x88>
 800f9a4:	232d      	movs	r3, #45	; 0x2d
 800f9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9aa:	e7a5      	b.n	800f8f8 <_printf_float+0x88>
 800f9ac:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800f9b0:	f000 8178 	beq.w	800fca4 <_printf_float+0x434>
 800f9b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f9b8:	d1be      	bne.n	800f938 <_printf_float+0xc8>
 800f9ba:	2900      	cmp	r1, #0
 800f9bc:	d1bc      	bne.n	800f938 <_printf_float+0xc8>
 800f9be:	2101      	movs	r1, #1
 800f9c0:	e7b9      	b.n	800f936 <_printf_float+0xc6>
 800f9c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f9c6:	d119      	bne.n	800f9fc <_printf_float+0x18c>
 800f9c8:	2900      	cmp	r1, #0
 800f9ca:	6863      	ldr	r3, [r4, #4]
 800f9cc:	dd0c      	ble.n	800f9e8 <_printf_float+0x178>
 800f9ce:	6121      	str	r1, [r4, #16]
 800f9d0:	b913      	cbnz	r3, 800f9d8 <_printf_float+0x168>
 800f9d2:	6822      	ldr	r2, [r4, #0]
 800f9d4:	07d2      	lsls	r2, r2, #31
 800f9d6:	d502      	bpl.n	800f9de <_printf_float+0x16e>
 800f9d8:	3301      	adds	r3, #1
 800f9da:	440b      	add	r3, r1
 800f9dc:	6123      	str	r3, [r4, #16]
 800f9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e0:	65a3      	str	r3, [r4, #88]	; 0x58
 800f9e2:	f04f 0a00 	mov.w	sl, #0
 800f9e6:	e7d9      	b.n	800f99c <_printf_float+0x12c>
 800f9e8:	b913      	cbnz	r3, 800f9f0 <_printf_float+0x180>
 800f9ea:	6822      	ldr	r2, [r4, #0]
 800f9ec:	07d0      	lsls	r0, r2, #31
 800f9ee:	d501      	bpl.n	800f9f4 <_printf_float+0x184>
 800f9f0:	3302      	adds	r3, #2
 800f9f2:	e7f3      	b.n	800f9dc <_printf_float+0x16c>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e7f1      	b.n	800f9dc <_printf_float+0x16c>
 800f9f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f9fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa00:	4293      	cmp	r3, r2
 800fa02:	db05      	blt.n	800fa10 <_printf_float+0x1a0>
 800fa04:	6822      	ldr	r2, [r4, #0]
 800fa06:	6123      	str	r3, [r4, #16]
 800fa08:	07d1      	lsls	r1, r2, #31
 800fa0a:	d5e8      	bpl.n	800f9de <_printf_float+0x16e>
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	e7e5      	b.n	800f9dc <_printf_float+0x16c>
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	bfd4      	ite	le
 800fa14:	f1c3 0302 	rsble	r3, r3, #2
 800fa18:	2301      	movgt	r3, #1
 800fa1a:	4413      	add	r3, r2
 800fa1c:	e7de      	b.n	800f9dc <_printf_float+0x16c>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	055a      	lsls	r2, r3, #21
 800fa22:	d407      	bmi.n	800fa34 <_printf_float+0x1c4>
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	4642      	mov	r2, r8
 800fa28:	4631      	mov	r1, r6
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	47b8      	blx	r7
 800fa2e:	3001      	adds	r0, #1
 800fa30:	d12a      	bne.n	800fa88 <_printf_float+0x218>
 800fa32:	e76b      	b.n	800f90c <_printf_float+0x9c>
 800fa34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fa38:	f240 80de 	bls.w	800fbf8 <_printf_float+0x388>
 800fa3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fa40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa48:	d133      	bne.n	800fab2 <_printf_float+0x242>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	4a42      	ldr	r2, [pc, #264]	; (800fb58 <_printf_float+0x2e8>)
 800fa4e:	4631      	mov	r1, r6
 800fa50:	4628      	mov	r0, r5
 800fa52:	47b8      	blx	r7
 800fa54:	3001      	adds	r0, #1
 800fa56:	f43f af59 	beq.w	800f90c <_printf_float+0x9c>
 800fa5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	db02      	blt.n	800fa68 <_printf_float+0x1f8>
 800fa62:	6823      	ldr	r3, [r4, #0]
 800fa64:	07d8      	lsls	r0, r3, #31
 800fa66:	d50f      	bpl.n	800fa88 <_printf_float+0x218>
 800fa68:	9b05      	ldr	r3, [sp, #20]
 800fa6a:	465a      	mov	r2, fp
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	4628      	mov	r0, r5
 800fa70:	47b8      	blx	r7
 800fa72:	3001      	adds	r0, #1
 800fa74:	f43f af4a 	beq.w	800f90c <_printf_float+0x9c>
 800fa78:	f04f 0800 	mov.w	r8, #0
 800fa7c:	f104 091a 	add.w	r9, r4, #26
 800fa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa82:	3b01      	subs	r3, #1
 800fa84:	4543      	cmp	r3, r8
 800fa86:	dc09      	bgt.n	800fa9c <_printf_float+0x22c>
 800fa88:	6823      	ldr	r3, [r4, #0]
 800fa8a:	079b      	lsls	r3, r3, #30
 800fa8c:	f100 8105 	bmi.w	800fc9a <_printf_float+0x42a>
 800fa90:	68e0      	ldr	r0, [r4, #12]
 800fa92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa94:	4298      	cmp	r0, r3
 800fa96:	bfb8      	it	lt
 800fa98:	4618      	movlt	r0, r3
 800fa9a:	e739      	b.n	800f910 <_printf_float+0xa0>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	464a      	mov	r2, r9
 800faa0:	4631      	mov	r1, r6
 800faa2:	4628      	mov	r0, r5
 800faa4:	47b8      	blx	r7
 800faa6:	3001      	adds	r0, #1
 800faa8:	f43f af30 	beq.w	800f90c <_printf_float+0x9c>
 800faac:	f108 0801 	add.w	r8, r8, #1
 800fab0:	e7e6      	b.n	800fa80 <_printf_float+0x210>
 800fab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	dc2b      	bgt.n	800fb10 <_printf_float+0x2a0>
 800fab8:	2301      	movs	r3, #1
 800faba:	4a27      	ldr	r2, [pc, #156]	; (800fb58 <_printf_float+0x2e8>)
 800fabc:	4631      	mov	r1, r6
 800fabe:	4628      	mov	r0, r5
 800fac0:	47b8      	blx	r7
 800fac2:	3001      	adds	r0, #1
 800fac4:	f43f af22 	beq.w	800f90c <_printf_float+0x9c>
 800fac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faca:	b923      	cbnz	r3, 800fad6 <_printf_float+0x266>
 800facc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800face:	b913      	cbnz	r3, 800fad6 <_printf_float+0x266>
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	07d9      	lsls	r1, r3, #31
 800fad4:	d5d8      	bpl.n	800fa88 <_printf_float+0x218>
 800fad6:	9b05      	ldr	r3, [sp, #20]
 800fad8:	465a      	mov	r2, fp
 800fada:	4631      	mov	r1, r6
 800fadc:	4628      	mov	r0, r5
 800fade:	47b8      	blx	r7
 800fae0:	3001      	adds	r0, #1
 800fae2:	f43f af13 	beq.w	800f90c <_printf_float+0x9c>
 800fae6:	f04f 0900 	mov.w	r9, #0
 800faea:	f104 0a1a 	add.w	sl, r4, #26
 800faee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf0:	425b      	negs	r3, r3
 800faf2:	454b      	cmp	r3, r9
 800faf4:	dc01      	bgt.n	800fafa <_printf_float+0x28a>
 800faf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf8:	e795      	b.n	800fa26 <_printf_float+0x1b6>
 800fafa:	2301      	movs	r3, #1
 800fafc:	4652      	mov	r2, sl
 800fafe:	4631      	mov	r1, r6
 800fb00:	4628      	mov	r0, r5
 800fb02:	47b8      	blx	r7
 800fb04:	3001      	adds	r0, #1
 800fb06:	f43f af01 	beq.w	800f90c <_printf_float+0x9c>
 800fb0a:	f109 0901 	add.w	r9, r9, #1
 800fb0e:	e7ee      	b.n	800faee <_printf_float+0x27e>
 800fb10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb14:	429a      	cmp	r2, r3
 800fb16:	bfa8      	it	ge
 800fb18:	461a      	movge	r2, r3
 800fb1a:	2a00      	cmp	r2, #0
 800fb1c:	4691      	mov	r9, r2
 800fb1e:	dd07      	ble.n	800fb30 <_printf_float+0x2c0>
 800fb20:	4613      	mov	r3, r2
 800fb22:	4631      	mov	r1, r6
 800fb24:	4642      	mov	r2, r8
 800fb26:	4628      	mov	r0, r5
 800fb28:	47b8      	blx	r7
 800fb2a:	3001      	adds	r0, #1
 800fb2c:	f43f aeee 	beq.w	800f90c <_printf_float+0x9c>
 800fb30:	f104 031a 	add.w	r3, r4, #26
 800fb34:	f04f 0a00 	mov.w	sl, #0
 800fb38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb3c:	9307      	str	r3, [sp, #28]
 800fb3e:	e017      	b.n	800fb70 <_printf_float+0x300>
 800fb40:	ffffffff 	.word	0xffffffff
 800fb44:	7fefffff 	.word	0x7fefffff
 800fb48:	080d51fc 	.word	0x080d51fc
 800fb4c:	080d51f8 	.word	0x080d51f8
 800fb50:	080d5204 	.word	0x080d5204
 800fb54:	080d5200 	.word	0x080d5200
 800fb58:	080d5208 	.word	0x080d5208
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	9a07      	ldr	r2, [sp, #28]
 800fb60:	4631      	mov	r1, r6
 800fb62:	4628      	mov	r0, r5
 800fb64:	47b8      	blx	r7
 800fb66:	3001      	adds	r0, #1
 800fb68:	f43f aed0 	beq.w	800f90c <_printf_float+0x9c>
 800fb6c:	f10a 0a01 	add.w	sl, sl, #1
 800fb70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb72:	9306      	str	r3, [sp, #24]
 800fb74:	eba3 0309 	sub.w	r3, r3, r9
 800fb78:	4553      	cmp	r3, sl
 800fb7a:	dcef      	bgt.n	800fb5c <_printf_float+0x2ec>
 800fb7c:	9b06      	ldr	r3, [sp, #24]
 800fb7e:	4498      	add	r8, r3
 800fb80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb84:	429a      	cmp	r2, r3
 800fb86:	db15      	blt.n	800fbb4 <_printf_float+0x344>
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	07da      	lsls	r2, r3, #31
 800fb8c:	d412      	bmi.n	800fbb4 <_printf_float+0x344>
 800fb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb90:	9a06      	ldr	r2, [sp, #24]
 800fb92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb94:	1a9a      	subs	r2, r3, r2
 800fb96:	eba3 0a01 	sub.w	sl, r3, r1
 800fb9a:	4592      	cmp	sl, r2
 800fb9c:	bfa8      	it	ge
 800fb9e:	4692      	movge	sl, r2
 800fba0:	f1ba 0f00 	cmp.w	sl, #0
 800fba4:	dc0e      	bgt.n	800fbc4 <_printf_float+0x354>
 800fba6:	f04f 0800 	mov.w	r8, #0
 800fbaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbae:	f104 091a 	add.w	r9, r4, #26
 800fbb2:	e019      	b.n	800fbe8 <_printf_float+0x378>
 800fbb4:	9b05      	ldr	r3, [sp, #20]
 800fbb6:	465a      	mov	r2, fp
 800fbb8:	4631      	mov	r1, r6
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b8      	blx	r7
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	d1e5      	bne.n	800fb8e <_printf_float+0x31e>
 800fbc2:	e6a3      	b.n	800f90c <_printf_float+0x9c>
 800fbc4:	4653      	mov	r3, sl
 800fbc6:	4642      	mov	r2, r8
 800fbc8:	4631      	mov	r1, r6
 800fbca:	4628      	mov	r0, r5
 800fbcc:	47b8      	blx	r7
 800fbce:	3001      	adds	r0, #1
 800fbd0:	d1e9      	bne.n	800fba6 <_printf_float+0x336>
 800fbd2:	e69b      	b.n	800f90c <_printf_float+0x9c>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	464a      	mov	r2, r9
 800fbd8:	4631      	mov	r1, r6
 800fbda:	4628      	mov	r0, r5
 800fbdc:	47b8      	blx	r7
 800fbde:	3001      	adds	r0, #1
 800fbe0:	f43f ae94 	beq.w	800f90c <_printf_float+0x9c>
 800fbe4:	f108 0801 	add.w	r8, r8, #1
 800fbe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fbec:	1a9b      	subs	r3, r3, r2
 800fbee:	eba3 030a 	sub.w	r3, r3, sl
 800fbf2:	4543      	cmp	r3, r8
 800fbf4:	dcee      	bgt.n	800fbd4 <_printf_float+0x364>
 800fbf6:	e747      	b.n	800fa88 <_printf_float+0x218>
 800fbf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbfa:	2a01      	cmp	r2, #1
 800fbfc:	dc01      	bgt.n	800fc02 <_printf_float+0x392>
 800fbfe:	07db      	lsls	r3, r3, #31
 800fc00:	d539      	bpl.n	800fc76 <_printf_float+0x406>
 800fc02:	2301      	movs	r3, #1
 800fc04:	4642      	mov	r2, r8
 800fc06:	4631      	mov	r1, r6
 800fc08:	4628      	mov	r0, r5
 800fc0a:	47b8      	blx	r7
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	f43f ae7d 	beq.w	800f90c <_printf_float+0x9c>
 800fc12:	9b05      	ldr	r3, [sp, #20]
 800fc14:	465a      	mov	r2, fp
 800fc16:	4631      	mov	r1, r6
 800fc18:	4628      	mov	r0, r5
 800fc1a:	47b8      	blx	r7
 800fc1c:	3001      	adds	r0, #1
 800fc1e:	f108 0801 	add.w	r8, r8, #1
 800fc22:	f43f ae73 	beq.w	800f90c <_printf_float+0x9c>
 800fc26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc38:	d018      	beq.n	800fc6c <_printf_float+0x3fc>
 800fc3a:	4642      	mov	r2, r8
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	47b8      	blx	r7
 800fc42:	3001      	adds	r0, #1
 800fc44:	d10e      	bne.n	800fc64 <_printf_float+0x3f4>
 800fc46:	e661      	b.n	800f90c <_printf_float+0x9c>
 800fc48:	2301      	movs	r3, #1
 800fc4a:	464a      	mov	r2, r9
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	4628      	mov	r0, r5
 800fc50:	47b8      	blx	r7
 800fc52:	3001      	adds	r0, #1
 800fc54:	f43f ae5a 	beq.w	800f90c <_printf_float+0x9c>
 800fc58:	f108 0801 	add.w	r8, r8, #1
 800fc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	4543      	cmp	r3, r8
 800fc62:	dcf1      	bgt.n	800fc48 <_printf_float+0x3d8>
 800fc64:	4653      	mov	r3, sl
 800fc66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fc6a:	e6dd      	b.n	800fa28 <_printf_float+0x1b8>
 800fc6c:	f04f 0800 	mov.w	r8, #0
 800fc70:	f104 091a 	add.w	r9, r4, #26
 800fc74:	e7f2      	b.n	800fc5c <_printf_float+0x3ec>
 800fc76:	2301      	movs	r3, #1
 800fc78:	e7df      	b.n	800fc3a <_printf_float+0x3ca>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	464a      	mov	r2, r9
 800fc7e:	4631      	mov	r1, r6
 800fc80:	4628      	mov	r0, r5
 800fc82:	47b8      	blx	r7
 800fc84:	3001      	adds	r0, #1
 800fc86:	f43f ae41 	beq.w	800f90c <_printf_float+0x9c>
 800fc8a:	f108 0801 	add.w	r8, r8, #1
 800fc8e:	68e3      	ldr	r3, [r4, #12]
 800fc90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc92:	1a9b      	subs	r3, r3, r2
 800fc94:	4543      	cmp	r3, r8
 800fc96:	dcf0      	bgt.n	800fc7a <_printf_float+0x40a>
 800fc98:	e6fa      	b.n	800fa90 <_printf_float+0x220>
 800fc9a:	f04f 0800 	mov.w	r8, #0
 800fc9e:	f104 0919 	add.w	r9, r4, #25
 800fca2:	e7f4      	b.n	800fc8e <_printf_float+0x41e>
 800fca4:	2900      	cmp	r1, #0
 800fca6:	f43f ae8a 	beq.w	800f9be <_printf_float+0x14e>
 800fcaa:	f04f 0c00 	mov.w	ip, #0
 800fcae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800fcb2:	e9cd 0900 	strd	r0, r9, [sp]
 800fcb6:	6022      	str	r2, [r4, #0]
 800fcb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	f7ff fd4f 	bl	800f760 <__cvt>
 800fcc2:	4680      	mov	r8, r0
 800fcc4:	e64a      	b.n	800f95c <_printf_float+0xec>
 800fcc6:	bf00      	nop

0800fcc8 <_printf_common>:
 800fcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fccc:	4691      	mov	r9, r2
 800fcce:	461f      	mov	r7, r3
 800fcd0:	688a      	ldr	r2, [r1, #8]
 800fcd2:	690b      	ldr	r3, [r1, #16]
 800fcd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	bfb8      	it	lt
 800fcdc:	4613      	movlt	r3, r2
 800fcde:	f8c9 3000 	str.w	r3, [r9]
 800fce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fce6:	4606      	mov	r6, r0
 800fce8:	460c      	mov	r4, r1
 800fcea:	b112      	cbz	r2, 800fcf2 <_printf_common+0x2a>
 800fcec:	3301      	adds	r3, #1
 800fcee:	f8c9 3000 	str.w	r3, [r9]
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	0699      	lsls	r1, r3, #26
 800fcf6:	bf42      	ittt	mi
 800fcf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fcfc:	3302      	addmi	r3, #2
 800fcfe:	f8c9 3000 	strmi.w	r3, [r9]
 800fd02:	6825      	ldr	r5, [r4, #0]
 800fd04:	f015 0506 	ands.w	r5, r5, #6
 800fd08:	d107      	bne.n	800fd1a <_printf_common+0x52>
 800fd0a:	f104 0a19 	add.w	sl, r4, #25
 800fd0e:	68e3      	ldr	r3, [r4, #12]
 800fd10:	f8d9 2000 	ldr.w	r2, [r9]
 800fd14:	1a9b      	subs	r3, r3, r2
 800fd16:	42ab      	cmp	r3, r5
 800fd18:	dc28      	bgt.n	800fd6c <_printf_common+0xa4>
 800fd1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fd1e:	6822      	ldr	r2, [r4, #0]
 800fd20:	3300      	adds	r3, #0
 800fd22:	bf18      	it	ne
 800fd24:	2301      	movne	r3, #1
 800fd26:	0692      	lsls	r2, r2, #26
 800fd28:	d42d      	bmi.n	800fd86 <_printf_common+0xbe>
 800fd2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd2e:	4639      	mov	r1, r7
 800fd30:	4630      	mov	r0, r6
 800fd32:	47c0      	blx	r8
 800fd34:	3001      	adds	r0, #1
 800fd36:	d020      	beq.n	800fd7a <_printf_common+0xb2>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	68e5      	ldr	r5, [r4, #12]
 800fd3c:	f8d9 2000 	ldr.w	r2, [r9]
 800fd40:	f003 0306 	and.w	r3, r3, #6
 800fd44:	2b04      	cmp	r3, #4
 800fd46:	bf08      	it	eq
 800fd48:	1aad      	subeq	r5, r5, r2
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	6922      	ldr	r2, [r4, #16]
 800fd4e:	bf0c      	ite	eq
 800fd50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd54:	2500      	movne	r5, #0
 800fd56:	4293      	cmp	r3, r2
 800fd58:	bfc4      	itt	gt
 800fd5a:	1a9b      	subgt	r3, r3, r2
 800fd5c:	18ed      	addgt	r5, r5, r3
 800fd5e:	f04f 0900 	mov.w	r9, #0
 800fd62:	341a      	adds	r4, #26
 800fd64:	454d      	cmp	r5, r9
 800fd66:	d11a      	bne.n	800fd9e <_printf_common+0xd6>
 800fd68:	2000      	movs	r0, #0
 800fd6a:	e008      	b.n	800fd7e <_printf_common+0xb6>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	4652      	mov	r2, sl
 800fd70:	4639      	mov	r1, r7
 800fd72:	4630      	mov	r0, r6
 800fd74:	47c0      	blx	r8
 800fd76:	3001      	adds	r0, #1
 800fd78:	d103      	bne.n	800fd82 <_printf_common+0xba>
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd82:	3501      	adds	r5, #1
 800fd84:	e7c3      	b.n	800fd0e <_printf_common+0x46>
 800fd86:	18e1      	adds	r1, r4, r3
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	2030      	movs	r0, #48	; 0x30
 800fd8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd90:	4422      	add	r2, r4
 800fd92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd9a:	3302      	adds	r3, #2
 800fd9c:	e7c5      	b.n	800fd2a <_printf_common+0x62>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	4622      	mov	r2, r4
 800fda2:	4639      	mov	r1, r7
 800fda4:	4630      	mov	r0, r6
 800fda6:	47c0      	blx	r8
 800fda8:	3001      	adds	r0, #1
 800fdaa:	d0e6      	beq.n	800fd7a <_printf_common+0xb2>
 800fdac:	f109 0901 	add.w	r9, r9, #1
 800fdb0:	e7d8      	b.n	800fd64 <_printf_common+0x9c>
	...

0800fdb4 <_printf_i>:
 800fdb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	7e09      	ldrb	r1, [r1, #24]
 800fdc0:	b085      	sub	sp, #20
 800fdc2:	296e      	cmp	r1, #110	; 0x6e
 800fdc4:	4617      	mov	r7, r2
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	4698      	mov	r8, r3
 800fdca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdcc:	f000 80b3 	beq.w	800ff36 <_printf_i+0x182>
 800fdd0:	d822      	bhi.n	800fe18 <_printf_i+0x64>
 800fdd2:	2963      	cmp	r1, #99	; 0x63
 800fdd4:	d036      	beq.n	800fe44 <_printf_i+0x90>
 800fdd6:	d80a      	bhi.n	800fdee <_printf_i+0x3a>
 800fdd8:	2900      	cmp	r1, #0
 800fdda:	f000 80b9 	beq.w	800ff50 <_printf_i+0x19c>
 800fdde:	2958      	cmp	r1, #88	; 0x58
 800fde0:	f000 8083 	beq.w	800feea <_printf_i+0x136>
 800fde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fde8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fdec:	e032      	b.n	800fe54 <_printf_i+0xa0>
 800fdee:	2964      	cmp	r1, #100	; 0x64
 800fdf0:	d001      	beq.n	800fdf6 <_printf_i+0x42>
 800fdf2:	2969      	cmp	r1, #105	; 0x69
 800fdf4:	d1f6      	bne.n	800fde4 <_printf_i+0x30>
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	6813      	ldr	r3, [r2, #0]
 800fdfa:	0605      	lsls	r5, r0, #24
 800fdfc:	f103 0104 	add.w	r1, r3, #4
 800fe00:	d52a      	bpl.n	800fe58 <_printf_i+0xa4>
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	6011      	str	r1, [r2, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	da03      	bge.n	800fe12 <_printf_i+0x5e>
 800fe0a:	222d      	movs	r2, #45	; 0x2d
 800fe0c:	425b      	negs	r3, r3
 800fe0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fe12:	486f      	ldr	r0, [pc, #444]	; (800ffd0 <_printf_i+0x21c>)
 800fe14:	220a      	movs	r2, #10
 800fe16:	e039      	b.n	800fe8c <_printf_i+0xd8>
 800fe18:	2973      	cmp	r1, #115	; 0x73
 800fe1a:	f000 809d 	beq.w	800ff58 <_printf_i+0x1a4>
 800fe1e:	d808      	bhi.n	800fe32 <_printf_i+0x7e>
 800fe20:	296f      	cmp	r1, #111	; 0x6f
 800fe22:	d020      	beq.n	800fe66 <_printf_i+0xb2>
 800fe24:	2970      	cmp	r1, #112	; 0x70
 800fe26:	d1dd      	bne.n	800fde4 <_printf_i+0x30>
 800fe28:	6823      	ldr	r3, [r4, #0]
 800fe2a:	f043 0320 	orr.w	r3, r3, #32
 800fe2e:	6023      	str	r3, [r4, #0]
 800fe30:	e003      	b.n	800fe3a <_printf_i+0x86>
 800fe32:	2975      	cmp	r1, #117	; 0x75
 800fe34:	d017      	beq.n	800fe66 <_printf_i+0xb2>
 800fe36:	2978      	cmp	r1, #120	; 0x78
 800fe38:	d1d4      	bne.n	800fde4 <_printf_i+0x30>
 800fe3a:	2378      	movs	r3, #120	; 0x78
 800fe3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe40:	4864      	ldr	r0, [pc, #400]	; (800ffd4 <_printf_i+0x220>)
 800fe42:	e055      	b.n	800fef0 <_printf_i+0x13c>
 800fe44:	6813      	ldr	r3, [r2, #0]
 800fe46:	1d19      	adds	r1, r3, #4
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	6011      	str	r1, [r2, #0]
 800fe4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe54:	2301      	movs	r3, #1
 800fe56:	e08c      	b.n	800ff72 <_printf_i+0x1be>
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	6011      	str	r1, [r2, #0]
 800fe5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe60:	bf18      	it	ne
 800fe62:	b21b      	sxthne	r3, r3
 800fe64:	e7cf      	b.n	800fe06 <_printf_i+0x52>
 800fe66:	6813      	ldr	r3, [r2, #0]
 800fe68:	6825      	ldr	r5, [r4, #0]
 800fe6a:	1d18      	adds	r0, r3, #4
 800fe6c:	6010      	str	r0, [r2, #0]
 800fe6e:	0628      	lsls	r0, r5, #24
 800fe70:	d501      	bpl.n	800fe76 <_printf_i+0xc2>
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	e002      	b.n	800fe7c <_printf_i+0xc8>
 800fe76:	0668      	lsls	r0, r5, #25
 800fe78:	d5fb      	bpl.n	800fe72 <_printf_i+0xbe>
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	4854      	ldr	r0, [pc, #336]	; (800ffd0 <_printf_i+0x21c>)
 800fe7e:	296f      	cmp	r1, #111	; 0x6f
 800fe80:	bf14      	ite	ne
 800fe82:	220a      	movne	r2, #10
 800fe84:	2208      	moveq	r2, #8
 800fe86:	2100      	movs	r1, #0
 800fe88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe8c:	6865      	ldr	r5, [r4, #4]
 800fe8e:	60a5      	str	r5, [r4, #8]
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	f2c0 8095 	blt.w	800ffc0 <_printf_i+0x20c>
 800fe96:	6821      	ldr	r1, [r4, #0]
 800fe98:	f021 0104 	bic.w	r1, r1, #4
 800fe9c:	6021      	str	r1, [r4, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d13d      	bne.n	800ff1e <_printf_i+0x16a>
 800fea2:	2d00      	cmp	r5, #0
 800fea4:	f040 808e 	bne.w	800ffc4 <_printf_i+0x210>
 800fea8:	4665      	mov	r5, ip
 800feaa:	2a08      	cmp	r2, #8
 800feac:	d10b      	bne.n	800fec6 <_printf_i+0x112>
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	07db      	lsls	r3, r3, #31
 800feb2:	d508      	bpl.n	800fec6 <_printf_i+0x112>
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	6862      	ldr	r2, [r4, #4]
 800feb8:	429a      	cmp	r2, r3
 800feba:	bfde      	ittt	le
 800febc:	2330      	movle	r3, #48	; 0x30
 800febe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fec2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fec6:	ebac 0305 	sub.w	r3, ip, r5
 800feca:	6123      	str	r3, [r4, #16]
 800fecc:	f8cd 8000 	str.w	r8, [sp]
 800fed0:	463b      	mov	r3, r7
 800fed2:	aa03      	add	r2, sp, #12
 800fed4:	4621      	mov	r1, r4
 800fed6:	4630      	mov	r0, r6
 800fed8:	f7ff fef6 	bl	800fcc8 <_printf_common>
 800fedc:	3001      	adds	r0, #1
 800fede:	d14d      	bne.n	800ff7c <_printf_i+0x1c8>
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295
 800fee4:	b005      	add	sp, #20
 800fee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feea:	4839      	ldr	r0, [pc, #228]	; (800ffd0 <_printf_i+0x21c>)
 800feec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fef0:	6813      	ldr	r3, [r2, #0]
 800fef2:	6821      	ldr	r1, [r4, #0]
 800fef4:	1d1d      	adds	r5, r3, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6015      	str	r5, [r2, #0]
 800fefa:	060a      	lsls	r2, r1, #24
 800fefc:	d50b      	bpl.n	800ff16 <_printf_i+0x162>
 800fefe:	07ca      	lsls	r2, r1, #31
 800ff00:	bf44      	itt	mi
 800ff02:	f041 0120 	orrmi.w	r1, r1, #32
 800ff06:	6021      	strmi	r1, [r4, #0]
 800ff08:	b91b      	cbnz	r3, 800ff12 <_printf_i+0x15e>
 800ff0a:	6822      	ldr	r2, [r4, #0]
 800ff0c:	f022 0220 	bic.w	r2, r2, #32
 800ff10:	6022      	str	r2, [r4, #0]
 800ff12:	2210      	movs	r2, #16
 800ff14:	e7b7      	b.n	800fe86 <_printf_i+0xd2>
 800ff16:	064d      	lsls	r5, r1, #25
 800ff18:	bf48      	it	mi
 800ff1a:	b29b      	uxthmi	r3, r3
 800ff1c:	e7ef      	b.n	800fefe <_printf_i+0x14a>
 800ff1e:	4665      	mov	r5, ip
 800ff20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff24:	fb02 3311 	mls	r3, r2, r1, r3
 800ff28:	5cc3      	ldrb	r3, [r0, r3]
 800ff2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ff2e:	460b      	mov	r3, r1
 800ff30:	2900      	cmp	r1, #0
 800ff32:	d1f5      	bne.n	800ff20 <_printf_i+0x16c>
 800ff34:	e7b9      	b.n	800feaa <_printf_i+0xf6>
 800ff36:	6813      	ldr	r3, [r2, #0]
 800ff38:	6825      	ldr	r5, [r4, #0]
 800ff3a:	6961      	ldr	r1, [r4, #20]
 800ff3c:	1d18      	adds	r0, r3, #4
 800ff3e:	6010      	str	r0, [r2, #0]
 800ff40:	0628      	lsls	r0, r5, #24
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	d501      	bpl.n	800ff4a <_printf_i+0x196>
 800ff46:	6019      	str	r1, [r3, #0]
 800ff48:	e002      	b.n	800ff50 <_printf_i+0x19c>
 800ff4a:	066a      	lsls	r2, r5, #25
 800ff4c:	d5fb      	bpl.n	800ff46 <_printf_i+0x192>
 800ff4e:	8019      	strh	r1, [r3, #0]
 800ff50:	2300      	movs	r3, #0
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	4665      	mov	r5, ip
 800ff56:	e7b9      	b.n	800fecc <_printf_i+0x118>
 800ff58:	6813      	ldr	r3, [r2, #0]
 800ff5a:	1d19      	adds	r1, r3, #4
 800ff5c:	6011      	str	r1, [r2, #0]
 800ff5e:	681d      	ldr	r5, [r3, #0]
 800ff60:	6862      	ldr	r2, [r4, #4]
 800ff62:	2100      	movs	r1, #0
 800ff64:	4628      	mov	r0, r5
 800ff66:	f7f5 ffa3 	bl	8005eb0 <memchr>
 800ff6a:	b108      	cbz	r0, 800ff70 <_printf_i+0x1bc>
 800ff6c:	1b40      	subs	r0, r0, r5
 800ff6e:	6060      	str	r0, [r4, #4]
 800ff70:	6863      	ldr	r3, [r4, #4]
 800ff72:	6123      	str	r3, [r4, #16]
 800ff74:	2300      	movs	r3, #0
 800ff76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff7a:	e7a7      	b.n	800fecc <_printf_i+0x118>
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	462a      	mov	r2, r5
 800ff80:	4639      	mov	r1, r7
 800ff82:	4630      	mov	r0, r6
 800ff84:	47c0      	blx	r8
 800ff86:	3001      	adds	r0, #1
 800ff88:	d0aa      	beq.n	800fee0 <_printf_i+0x12c>
 800ff8a:	6823      	ldr	r3, [r4, #0]
 800ff8c:	079b      	lsls	r3, r3, #30
 800ff8e:	d413      	bmi.n	800ffb8 <_printf_i+0x204>
 800ff90:	68e0      	ldr	r0, [r4, #12]
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	4298      	cmp	r0, r3
 800ff96:	bfb8      	it	lt
 800ff98:	4618      	movlt	r0, r3
 800ff9a:	e7a3      	b.n	800fee4 <_printf_i+0x130>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	464a      	mov	r2, r9
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	47c0      	blx	r8
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	d09a      	beq.n	800fee0 <_printf_i+0x12c>
 800ffaa:	3501      	adds	r5, #1
 800ffac:	68e3      	ldr	r3, [r4, #12]
 800ffae:	9a03      	ldr	r2, [sp, #12]
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	42ab      	cmp	r3, r5
 800ffb4:	dcf2      	bgt.n	800ff9c <_printf_i+0x1e8>
 800ffb6:	e7eb      	b.n	800ff90 <_printf_i+0x1dc>
 800ffb8:	2500      	movs	r5, #0
 800ffba:	f104 0919 	add.w	r9, r4, #25
 800ffbe:	e7f5      	b.n	800ffac <_printf_i+0x1f8>
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1ac      	bne.n	800ff1e <_printf_i+0x16a>
 800ffc4:	7803      	ldrb	r3, [r0, #0]
 800ffc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffce:	e76c      	b.n	800feaa <_printf_i+0xf6>
 800ffd0:	080d520a 	.word	0x080d520a
 800ffd4:	080d521b 	.word	0x080d521b

0800ffd8 <iprintf>:
 800ffd8:	b40f      	push	{r0, r1, r2, r3}
 800ffda:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <iprintf+0x2c>)
 800ffdc:	b513      	push	{r0, r1, r4, lr}
 800ffde:	681c      	ldr	r4, [r3, #0]
 800ffe0:	b124      	cbz	r4, 800ffec <iprintf+0x14>
 800ffe2:	69a3      	ldr	r3, [r4, #24]
 800ffe4:	b913      	cbnz	r3, 800ffec <iprintf+0x14>
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f001 f826 	bl	8011038 <__sinit>
 800ffec:	ab05      	add	r3, sp, #20
 800ffee:	9a04      	ldr	r2, [sp, #16]
 800fff0:	68a1      	ldr	r1, [r4, #8]
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	4620      	mov	r0, r4
 800fff6:	f001 fc57 	bl	80118a8 <_vfiprintf_r>
 800fffa:	b002      	add	sp, #8
 800fffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010000:	b004      	add	sp, #16
 8010002:	4770      	bx	lr
 8010004:	20000714 	.word	0x20000714

08010008 <_puts_r>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	460e      	mov	r6, r1
 801000c:	4605      	mov	r5, r0
 801000e:	b118      	cbz	r0, 8010018 <_puts_r+0x10>
 8010010:	6983      	ldr	r3, [r0, #24]
 8010012:	b90b      	cbnz	r3, 8010018 <_puts_r+0x10>
 8010014:	f001 f810 	bl	8011038 <__sinit>
 8010018:	69ab      	ldr	r3, [r5, #24]
 801001a:	68ac      	ldr	r4, [r5, #8]
 801001c:	b913      	cbnz	r3, 8010024 <_puts_r+0x1c>
 801001e:	4628      	mov	r0, r5
 8010020:	f001 f80a 	bl	8011038 <__sinit>
 8010024:	4b23      	ldr	r3, [pc, #140]	; (80100b4 <_puts_r+0xac>)
 8010026:	429c      	cmp	r4, r3
 8010028:	d117      	bne.n	801005a <_puts_r+0x52>
 801002a:	686c      	ldr	r4, [r5, #4]
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	071b      	lsls	r3, r3, #28
 8010030:	d51d      	bpl.n	801006e <_puts_r+0x66>
 8010032:	6923      	ldr	r3, [r4, #16]
 8010034:	b1db      	cbz	r3, 801006e <_puts_r+0x66>
 8010036:	3e01      	subs	r6, #1
 8010038:	68a3      	ldr	r3, [r4, #8]
 801003a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801003e:	3b01      	subs	r3, #1
 8010040:	60a3      	str	r3, [r4, #8]
 8010042:	b9e9      	cbnz	r1, 8010080 <_puts_r+0x78>
 8010044:	2b00      	cmp	r3, #0
 8010046:	da2e      	bge.n	80100a6 <_puts_r+0x9e>
 8010048:	4622      	mov	r2, r4
 801004a:	210a      	movs	r1, #10
 801004c:	4628      	mov	r0, r5
 801004e:	f000 f869 	bl	8010124 <__swbuf_r>
 8010052:	3001      	adds	r0, #1
 8010054:	d011      	beq.n	801007a <_puts_r+0x72>
 8010056:	200a      	movs	r0, #10
 8010058:	e011      	b.n	801007e <_puts_r+0x76>
 801005a:	4b17      	ldr	r3, [pc, #92]	; (80100b8 <_puts_r+0xb0>)
 801005c:	429c      	cmp	r4, r3
 801005e:	d101      	bne.n	8010064 <_puts_r+0x5c>
 8010060:	68ac      	ldr	r4, [r5, #8]
 8010062:	e7e3      	b.n	801002c <_puts_r+0x24>
 8010064:	4b15      	ldr	r3, [pc, #84]	; (80100bc <_puts_r+0xb4>)
 8010066:	429c      	cmp	r4, r3
 8010068:	bf08      	it	eq
 801006a:	68ec      	ldreq	r4, [r5, #12]
 801006c:	e7de      	b.n	801002c <_puts_r+0x24>
 801006e:	4621      	mov	r1, r4
 8010070:	4628      	mov	r0, r5
 8010072:	f000 f8a9 	bl	80101c8 <__swsetup_r>
 8010076:	2800      	cmp	r0, #0
 8010078:	d0dd      	beq.n	8010036 <_puts_r+0x2e>
 801007a:	f04f 30ff 	mov.w	r0, #4294967295
 801007e:	bd70      	pop	{r4, r5, r6, pc}
 8010080:	2b00      	cmp	r3, #0
 8010082:	da04      	bge.n	801008e <_puts_r+0x86>
 8010084:	69a2      	ldr	r2, [r4, #24]
 8010086:	429a      	cmp	r2, r3
 8010088:	dc06      	bgt.n	8010098 <_puts_r+0x90>
 801008a:	290a      	cmp	r1, #10
 801008c:	d004      	beq.n	8010098 <_puts_r+0x90>
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	6022      	str	r2, [r4, #0]
 8010094:	7019      	strb	r1, [r3, #0]
 8010096:	e7cf      	b.n	8010038 <_puts_r+0x30>
 8010098:	4622      	mov	r2, r4
 801009a:	4628      	mov	r0, r5
 801009c:	f000 f842 	bl	8010124 <__swbuf_r>
 80100a0:	3001      	adds	r0, #1
 80100a2:	d1c9      	bne.n	8010038 <_puts_r+0x30>
 80100a4:	e7e9      	b.n	801007a <_puts_r+0x72>
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	200a      	movs	r0, #10
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	6022      	str	r2, [r4, #0]
 80100ae:	7018      	strb	r0, [r3, #0]
 80100b0:	e7e5      	b.n	801007e <_puts_r+0x76>
 80100b2:	bf00      	nop
 80100b4:	080d525c 	.word	0x080d525c
 80100b8:	080d527c 	.word	0x080d527c
 80100bc:	080d523c 	.word	0x080d523c

080100c0 <puts>:
 80100c0:	4b02      	ldr	r3, [pc, #8]	; (80100cc <puts+0xc>)
 80100c2:	4601      	mov	r1, r0
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	f7ff bf9f 	b.w	8010008 <_puts_r>
 80100ca:	bf00      	nop
 80100cc:	20000714 	.word	0x20000714

080100d0 <realloc>:
 80100d0:	4b02      	ldr	r3, [pc, #8]	; (80100dc <realloc+0xc>)
 80100d2:	460a      	mov	r2, r1
 80100d4:	4601      	mov	r1, r0
 80100d6:	6818      	ldr	r0, [r3, #0]
 80100d8:	f001 bb96 	b.w	8011808 <_realloc_r>
 80100dc:	20000714 	.word	0x20000714

080100e0 <_sbrk_r>:
 80100e0:	b538      	push	{r3, r4, r5, lr}
 80100e2:	4c06      	ldr	r4, [pc, #24]	; (80100fc <_sbrk_r+0x1c>)
 80100e4:	2300      	movs	r3, #0
 80100e6:	4605      	mov	r5, r0
 80100e8:	4608      	mov	r0, r1
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	f7ff f9a4 	bl	800f438 <_sbrk>
 80100f0:	1c43      	adds	r3, r0, #1
 80100f2:	d102      	bne.n	80100fa <_sbrk_r+0x1a>
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	b103      	cbz	r3, 80100fa <_sbrk_r+0x1a>
 80100f8:	602b      	str	r3, [r5, #0]
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	200070b8 	.word	0x200070b8

08010100 <strncmp>:
 8010100:	b510      	push	{r4, lr}
 8010102:	b16a      	cbz	r2, 8010120 <strncmp+0x20>
 8010104:	3901      	subs	r1, #1
 8010106:	1884      	adds	r4, r0, r2
 8010108:	f810 3b01 	ldrb.w	r3, [r0], #1
 801010c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010110:	4293      	cmp	r3, r2
 8010112:	d103      	bne.n	801011c <strncmp+0x1c>
 8010114:	42a0      	cmp	r0, r4
 8010116:	d001      	beq.n	801011c <strncmp+0x1c>
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1f5      	bne.n	8010108 <strncmp+0x8>
 801011c:	1a98      	subs	r0, r3, r2
 801011e:	bd10      	pop	{r4, pc}
 8010120:	4610      	mov	r0, r2
 8010122:	e7fc      	b.n	801011e <strncmp+0x1e>

08010124 <__swbuf_r>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	460e      	mov	r6, r1
 8010128:	4614      	mov	r4, r2
 801012a:	4605      	mov	r5, r0
 801012c:	b118      	cbz	r0, 8010136 <__swbuf_r+0x12>
 801012e:	6983      	ldr	r3, [r0, #24]
 8010130:	b90b      	cbnz	r3, 8010136 <__swbuf_r+0x12>
 8010132:	f000 ff81 	bl	8011038 <__sinit>
 8010136:	4b21      	ldr	r3, [pc, #132]	; (80101bc <__swbuf_r+0x98>)
 8010138:	429c      	cmp	r4, r3
 801013a:	d12a      	bne.n	8010192 <__swbuf_r+0x6e>
 801013c:	686c      	ldr	r4, [r5, #4]
 801013e:	69a3      	ldr	r3, [r4, #24]
 8010140:	60a3      	str	r3, [r4, #8]
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	071a      	lsls	r2, r3, #28
 8010146:	d52e      	bpl.n	80101a6 <__swbuf_r+0x82>
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	b363      	cbz	r3, 80101a6 <__swbuf_r+0x82>
 801014c:	6923      	ldr	r3, [r4, #16]
 801014e:	6820      	ldr	r0, [r4, #0]
 8010150:	1ac0      	subs	r0, r0, r3
 8010152:	6963      	ldr	r3, [r4, #20]
 8010154:	b2f6      	uxtb	r6, r6
 8010156:	4283      	cmp	r3, r0
 8010158:	4637      	mov	r7, r6
 801015a:	dc04      	bgt.n	8010166 <__swbuf_r+0x42>
 801015c:	4621      	mov	r1, r4
 801015e:	4628      	mov	r0, r5
 8010160:	f000 ff00 	bl	8010f64 <_fflush_r>
 8010164:	bb28      	cbnz	r0, 80101b2 <__swbuf_r+0x8e>
 8010166:	68a3      	ldr	r3, [r4, #8]
 8010168:	3b01      	subs	r3, #1
 801016a:	60a3      	str	r3, [r4, #8]
 801016c:	6823      	ldr	r3, [r4, #0]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	6022      	str	r2, [r4, #0]
 8010172:	701e      	strb	r6, [r3, #0]
 8010174:	6963      	ldr	r3, [r4, #20]
 8010176:	3001      	adds	r0, #1
 8010178:	4283      	cmp	r3, r0
 801017a:	d004      	beq.n	8010186 <__swbuf_r+0x62>
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	07db      	lsls	r3, r3, #31
 8010180:	d519      	bpl.n	80101b6 <__swbuf_r+0x92>
 8010182:	2e0a      	cmp	r6, #10
 8010184:	d117      	bne.n	80101b6 <__swbuf_r+0x92>
 8010186:	4621      	mov	r1, r4
 8010188:	4628      	mov	r0, r5
 801018a:	f000 feeb 	bl	8010f64 <_fflush_r>
 801018e:	b190      	cbz	r0, 80101b6 <__swbuf_r+0x92>
 8010190:	e00f      	b.n	80101b2 <__swbuf_r+0x8e>
 8010192:	4b0b      	ldr	r3, [pc, #44]	; (80101c0 <__swbuf_r+0x9c>)
 8010194:	429c      	cmp	r4, r3
 8010196:	d101      	bne.n	801019c <__swbuf_r+0x78>
 8010198:	68ac      	ldr	r4, [r5, #8]
 801019a:	e7d0      	b.n	801013e <__swbuf_r+0x1a>
 801019c:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <__swbuf_r+0xa0>)
 801019e:	429c      	cmp	r4, r3
 80101a0:	bf08      	it	eq
 80101a2:	68ec      	ldreq	r4, [r5, #12]
 80101a4:	e7cb      	b.n	801013e <__swbuf_r+0x1a>
 80101a6:	4621      	mov	r1, r4
 80101a8:	4628      	mov	r0, r5
 80101aa:	f000 f80d 	bl	80101c8 <__swsetup_r>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d0cc      	beq.n	801014c <__swbuf_r+0x28>
 80101b2:	f04f 37ff 	mov.w	r7, #4294967295
 80101b6:	4638      	mov	r0, r7
 80101b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ba:	bf00      	nop
 80101bc:	080d525c 	.word	0x080d525c
 80101c0:	080d527c 	.word	0x080d527c
 80101c4:	080d523c 	.word	0x080d523c

080101c8 <__swsetup_r>:
 80101c8:	4b32      	ldr	r3, [pc, #200]	; (8010294 <__swsetup_r+0xcc>)
 80101ca:	b570      	push	{r4, r5, r6, lr}
 80101cc:	681d      	ldr	r5, [r3, #0]
 80101ce:	4606      	mov	r6, r0
 80101d0:	460c      	mov	r4, r1
 80101d2:	b125      	cbz	r5, 80101de <__swsetup_r+0x16>
 80101d4:	69ab      	ldr	r3, [r5, #24]
 80101d6:	b913      	cbnz	r3, 80101de <__swsetup_r+0x16>
 80101d8:	4628      	mov	r0, r5
 80101da:	f000 ff2d 	bl	8011038 <__sinit>
 80101de:	4b2e      	ldr	r3, [pc, #184]	; (8010298 <__swsetup_r+0xd0>)
 80101e0:	429c      	cmp	r4, r3
 80101e2:	d10f      	bne.n	8010204 <__swsetup_r+0x3c>
 80101e4:	686c      	ldr	r4, [r5, #4]
 80101e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	0715      	lsls	r5, r2, #28
 80101ee:	d42c      	bmi.n	801024a <__swsetup_r+0x82>
 80101f0:	06d0      	lsls	r0, r2, #27
 80101f2:	d411      	bmi.n	8010218 <__swsetup_r+0x50>
 80101f4:	2209      	movs	r2, #9
 80101f6:	6032      	str	r2, [r6, #0]
 80101f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fc:	81a3      	strh	r3, [r4, #12]
 80101fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010202:	e03e      	b.n	8010282 <__swsetup_r+0xba>
 8010204:	4b25      	ldr	r3, [pc, #148]	; (801029c <__swsetup_r+0xd4>)
 8010206:	429c      	cmp	r4, r3
 8010208:	d101      	bne.n	801020e <__swsetup_r+0x46>
 801020a:	68ac      	ldr	r4, [r5, #8]
 801020c:	e7eb      	b.n	80101e6 <__swsetup_r+0x1e>
 801020e:	4b24      	ldr	r3, [pc, #144]	; (80102a0 <__swsetup_r+0xd8>)
 8010210:	429c      	cmp	r4, r3
 8010212:	bf08      	it	eq
 8010214:	68ec      	ldreq	r4, [r5, #12]
 8010216:	e7e6      	b.n	80101e6 <__swsetup_r+0x1e>
 8010218:	0751      	lsls	r1, r2, #29
 801021a:	d512      	bpl.n	8010242 <__swsetup_r+0x7a>
 801021c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801021e:	b141      	cbz	r1, 8010232 <__swsetup_r+0x6a>
 8010220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010224:	4299      	cmp	r1, r3
 8010226:	d002      	beq.n	801022e <__swsetup_r+0x66>
 8010228:	4630      	mov	r0, r6
 801022a:	f7ff f9f1 	bl	800f610 <_free_r>
 801022e:	2300      	movs	r3, #0
 8010230:	6363      	str	r3, [r4, #52]	; 0x34
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010238:	81a3      	strh	r3, [r4, #12]
 801023a:	2300      	movs	r3, #0
 801023c:	6063      	str	r3, [r4, #4]
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	6023      	str	r3, [r4, #0]
 8010242:	89a3      	ldrh	r3, [r4, #12]
 8010244:	f043 0308 	orr.w	r3, r3, #8
 8010248:	81a3      	strh	r3, [r4, #12]
 801024a:	6923      	ldr	r3, [r4, #16]
 801024c:	b94b      	cbnz	r3, 8010262 <__swsetup_r+0x9a>
 801024e:	89a3      	ldrh	r3, [r4, #12]
 8010250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010258:	d003      	beq.n	8010262 <__swsetup_r+0x9a>
 801025a:	4621      	mov	r1, r4
 801025c:	4630      	mov	r0, r6
 801025e:	f000 ffa7 	bl	80111b0 <__smakebuf_r>
 8010262:	89a2      	ldrh	r2, [r4, #12]
 8010264:	f012 0301 	ands.w	r3, r2, #1
 8010268:	d00c      	beq.n	8010284 <__swsetup_r+0xbc>
 801026a:	2300      	movs	r3, #0
 801026c:	60a3      	str	r3, [r4, #8]
 801026e:	6963      	ldr	r3, [r4, #20]
 8010270:	425b      	negs	r3, r3
 8010272:	61a3      	str	r3, [r4, #24]
 8010274:	6923      	ldr	r3, [r4, #16]
 8010276:	b953      	cbnz	r3, 801028e <__swsetup_r+0xc6>
 8010278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801027c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010280:	d1ba      	bne.n	80101f8 <__swsetup_r+0x30>
 8010282:	bd70      	pop	{r4, r5, r6, pc}
 8010284:	0792      	lsls	r2, r2, #30
 8010286:	bf58      	it	pl
 8010288:	6963      	ldrpl	r3, [r4, #20]
 801028a:	60a3      	str	r3, [r4, #8]
 801028c:	e7f2      	b.n	8010274 <__swsetup_r+0xac>
 801028e:	2000      	movs	r0, #0
 8010290:	e7f7      	b.n	8010282 <__swsetup_r+0xba>
 8010292:	bf00      	nop
 8010294:	20000714 	.word	0x20000714
 8010298:	080d525c 	.word	0x080d525c
 801029c:	080d527c 	.word	0x080d527c
 80102a0:	080d523c 	.word	0x080d523c

080102a4 <quorem>:
 80102a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	6903      	ldr	r3, [r0, #16]
 80102aa:	690c      	ldr	r4, [r1, #16]
 80102ac:	42a3      	cmp	r3, r4
 80102ae:	4680      	mov	r8, r0
 80102b0:	f2c0 8082 	blt.w	80103b8 <quorem+0x114>
 80102b4:	3c01      	subs	r4, #1
 80102b6:	f101 0714 	add.w	r7, r1, #20
 80102ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80102be:	f100 0614 	add.w	r6, r0, #20
 80102c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80102c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80102ca:	eb06 030c 	add.w	r3, r6, ip
 80102ce:	3501      	adds	r5, #1
 80102d0:	eb07 090c 	add.w	r9, r7, ip
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80102da:	b395      	cbz	r5, 8010342 <quorem+0x9e>
 80102dc:	f04f 0a00 	mov.w	sl, #0
 80102e0:	4638      	mov	r0, r7
 80102e2:	46b6      	mov	lr, r6
 80102e4:	46d3      	mov	fp, sl
 80102e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80102ea:	b293      	uxth	r3, r2
 80102ec:	fb05 a303 	mla	r3, r5, r3, sl
 80102f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	ebab 0303 	sub.w	r3, fp, r3
 80102fa:	0c12      	lsrs	r2, r2, #16
 80102fc:	f8de b000 	ldr.w	fp, [lr]
 8010300:	fb05 a202 	mla	r2, r5, r2, sl
 8010304:	fa13 f38b 	uxtah	r3, r3, fp
 8010308:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801030c:	fa1f fb82 	uxth.w	fp, r2
 8010310:	f8de 2000 	ldr.w	r2, [lr]
 8010314:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801031c:	b29b      	uxth	r3, r3
 801031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010322:	4581      	cmp	r9, r0
 8010324:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010328:	f84e 3b04 	str.w	r3, [lr], #4
 801032c:	d2db      	bcs.n	80102e6 <quorem+0x42>
 801032e:	f856 300c 	ldr.w	r3, [r6, ip]
 8010332:	b933      	cbnz	r3, 8010342 <quorem+0x9e>
 8010334:	9b01      	ldr	r3, [sp, #4]
 8010336:	3b04      	subs	r3, #4
 8010338:	429e      	cmp	r6, r3
 801033a:	461a      	mov	r2, r3
 801033c:	d330      	bcc.n	80103a0 <quorem+0xfc>
 801033e:	f8c8 4010 	str.w	r4, [r8, #16]
 8010342:	4640      	mov	r0, r8
 8010344:	f001 f98c 	bl	8011660 <__mcmp>
 8010348:	2800      	cmp	r0, #0
 801034a:	db25      	blt.n	8010398 <quorem+0xf4>
 801034c:	3501      	adds	r5, #1
 801034e:	4630      	mov	r0, r6
 8010350:	f04f 0c00 	mov.w	ip, #0
 8010354:	f857 2b04 	ldr.w	r2, [r7], #4
 8010358:	f8d0 e000 	ldr.w	lr, [r0]
 801035c:	b293      	uxth	r3, r2
 801035e:	ebac 0303 	sub.w	r3, ip, r3
 8010362:	0c12      	lsrs	r2, r2, #16
 8010364:	fa13 f38e 	uxtah	r3, r3, lr
 8010368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801036c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010370:	b29b      	uxth	r3, r3
 8010372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010376:	45b9      	cmp	r9, r7
 8010378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801037c:	f840 3b04 	str.w	r3, [r0], #4
 8010380:	d2e8      	bcs.n	8010354 <quorem+0xb0>
 8010382:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010386:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801038a:	b92a      	cbnz	r2, 8010398 <quorem+0xf4>
 801038c:	3b04      	subs	r3, #4
 801038e:	429e      	cmp	r6, r3
 8010390:	461a      	mov	r2, r3
 8010392:	d30b      	bcc.n	80103ac <quorem+0x108>
 8010394:	f8c8 4010 	str.w	r4, [r8, #16]
 8010398:	4628      	mov	r0, r5
 801039a:	b003      	add	sp, #12
 801039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a0:	6812      	ldr	r2, [r2, #0]
 80103a2:	3b04      	subs	r3, #4
 80103a4:	2a00      	cmp	r2, #0
 80103a6:	d1ca      	bne.n	801033e <quorem+0x9a>
 80103a8:	3c01      	subs	r4, #1
 80103aa:	e7c5      	b.n	8010338 <quorem+0x94>
 80103ac:	6812      	ldr	r2, [r2, #0]
 80103ae:	3b04      	subs	r3, #4
 80103b0:	2a00      	cmp	r2, #0
 80103b2:	d1ef      	bne.n	8010394 <quorem+0xf0>
 80103b4:	3c01      	subs	r4, #1
 80103b6:	e7ea      	b.n	801038e <quorem+0xea>
 80103b8:	2000      	movs	r0, #0
 80103ba:	e7ee      	b.n	801039a <quorem+0xf6>
 80103bc:	0000      	movs	r0, r0
	...

080103c0 <_dtoa_r>:
 80103c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	ec57 6b10 	vmov	r6, r7, d0
 80103c8:	b095      	sub	sp, #84	; 0x54
 80103ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80103cc:	9108      	str	r1, [sp, #32]
 80103ce:	4604      	mov	r4, r0
 80103d0:	920a      	str	r2, [sp, #40]	; 0x28
 80103d2:	9311      	str	r3, [sp, #68]	; 0x44
 80103d4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80103d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80103dc:	b93d      	cbnz	r5, 80103ee <_dtoa_r+0x2e>
 80103de:	2010      	movs	r0, #16
 80103e0:	f7ff f8e4 	bl	800f5ac <malloc>
 80103e4:	6260      	str	r0, [r4, #36]	; 0x24
 80103e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80103ea:	6005      	str	r5, [r0, #0]
 80103ec:	60c5      	str	r5, [r0, #12]
 80103ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103f0:	6819      	ldr	r1, [r3, #0]
 80103f2:	b151      	cbz	r1, 801040a <_dtoa_r+0x4a>
 80103f4:	685a      	ldr	r2, [r3, #4]
 80103f6:	604a      	str	r2, [r1, #4]
 80103f8:	2301      	movs	r3, #1
 80103fa:	4093      	lsls	r3, r2
 80103fc:	608b      	str	r3, [r1, #8]
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 ff4c 	bl	801129c <_Bfree>
 8010404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010406:	2200      	movs	r2, #0
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	1e3b      	subs	r3, r7, #0
 801040c:	bfb9      	ittee	lt
 801040e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010412:	9303      	strlt	r3, [sp, #12]
 8010414:	2300      	movge	r3, #0
 8010416:	f8c8 3000 	strge.w	r3, [r8]
 801041a:	9d03      	ldr	r5, [sp, #12]
 801041c:	4bac      	ldr	r3, [pc, #688]	; (80106d0 <_dtoa_r+0x310>)
 801041e:	bfbc      	itt	lt
 8010420:	2201      	movlt	r2, #1
 8010422:	f8c8 2000 	strlt.w	r2, [r8]
 8010426:	43ab      	bics	r3, r5
 8010428:	d11b      	bne.n	8010462 <_dtoa_r+0xa2>
 801042a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801042c:	f242 730f 	movw	r3, #9999	; 0x270f
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	9b02      	ldr	r3, [sp, #8]
 8010434:	b923      	cbnz	r3, 8010440 <_dtoa_r+0x80>
 8010436:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801043a:	2d00      	cmp	r5, #0
 801043c:	f000 84dd 	beq.w	8010dfa <_dtoa_r+0xa3a>
 8010440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010442:	b953      	cbnz	r3, 801045a <_dtoa_r+0x9a>
 8010444:	4ba3      	ldr	r3, [pc, #652]	; (80106d4 <_dtoa_r+0x314>)
 8010446:	e020      	b.n	801048a <_dtoa_r+0xca>
 8010448:	4ba3      	ldr	r3, [pc, #652]	; (80106d8 <_dtoa_r+0x318>)
 801044a:	9304      	str	r3, [sp, #16]
 801044c:	3308      	adds	r3, #8
 801044e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010450:	6013      	str	r3, [r2, #0]
 8010452:	9804      	ldr	r0, [sp, #16]
 8010454:	b015      	add	sp, #84	; 0x54
 8010456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045a:	4b9e      	ldr	r3, [pc, #632]	; (80106d4 <_dtoa_r+0x314>)
 801045c:	9304      	str	r3, [sp, #16]
 801045e:	3303      	adds	r3, #3
 8010460:	e7f5      	b.n	801044e <_dtoa_r+0x8e>
 8010462:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010472:	d10c      	bne.n	801048e <_dtoa_r+0xce>
 8010474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010476:	2301      	movs	r3, #1
 8010478:	6013      	str	r3, [r2, #0]
 801047a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 84b9 	beq.w	8010df4 <_dtoa_r+0xa34>
 8010482:	4b96      	ldr	r3, [pc, #600]	; (80106dc <_dtoa_r+0x31c>)
 8010484:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	3b01      	subs	r3, #1
 801048a:	9304      	str	r3, [sp, #16]
 801048c:	e7e1      	b.n	8010452 <_dtoa_r+0x92>
 801048e:	a913      	add	r1, sp, #76	; 0x4c
 8010490:	aa12      	add	r2, sp, #72	; 0x48
 8010492:	ed9d 0b04 	vldr	d0, [sp, #16]
 8010496:	4620      	mov	r0, r4
 8010498:	f001 f959 	bl	801174e <__d2b>
 801049c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80104a0:	9001      	str	r0, [sp, #4]
 80104a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80104a4:	2e00      	cmp	r6, #0
 80104a6:	d046      	beq.n	8010536 <_dtoa_r+0x176>
 80104a8:	9805      	ldr	r0, [sp, #20]
 80104aa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80104ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104b2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80104b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80104ba:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80104be:	2700      	movs	r7, #0
 80104c0:	ee07 aa90 	vmov	s15, sl
 80104c4:	ec43 2b16 	vmov	d6, r2, r3
 80104c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80104cc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80106b8 <_dtoa_r+0x2f8>
 80104d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80104d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80104d8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80106c0 <_dtoa_r+0x300>
 80104dc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80104e0:	eeb0 7b46 	vmov.f64	d7, d6
 80104e4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80106c8 <_dtoa_r+0x308>
 80104e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80104ec:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80104f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80104f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f8:	ee16 ba90 	vmov	fp, s13
 80104fc:	d508      	bpl.n	8010510 <_dtoa_r+0x150>
 80104fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010502:	eeb4 6b47 	vcmp.f64	d6, d7
 8010506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801050a:	bf18      	it	ne
 801050c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010510:	f1bb 0f16 	cmp.w	fp, #22
 8010514:	d834      	bhi.n	8010580 <_dtoa_r+0x1c0>
 8010516:	4b72      	ldr	r3, [pc, #456]	; (80106e0 <_dtoa_r+0x320>)
 8010518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801051c:	ed93 7b00 	vldr	d7, [r3]
 8010520:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052c:	dd01      	ble.n	8010532 <_dtoa_r+0x172>
 801052e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010532:	2300      	movs	r3, #0
 8010534:	e025      	b.n	8010582 <_dtoa_r+0x1c2>
 8010536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010538:	eb01 0a03 	add.w	sl, r1, r3
 801053c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8010540:	2b20      	cmp	r3, #32
 8010542:	dd17      	ble.n	8010574 <_dtoa_r+0x1b4>
 8010544:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8010548:	9a02      	ldr	r2, [sp, #8]
 801054a:	409d      	lsls	r5, r3
 801054c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8010550:	fa22 f303 	lsr.w	r3, r2, r3
 8010554:	432b      	orrs	r3, r5
 8010556:	ee07 3a90 	vmov	s15, r3
 801055a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801055e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010562:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010566:	9805      	ldr	r0, [sp, #20]
 8010568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801056c:	2701      	movs	r7, #1
 801056e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8010572:	e7a5      	b.n	80104c0 <_dtoa_r+0x100>
 8010574:	9a02      	ldr	r2, [sp, #8]
 8010576:	f1c3 0320 	rsb	r3, r3, #32
 801057a:	fa02 f303 	lsl.w	r3, r2, r3
 801057e:	e7ea      	b.n	8010556 <_dtoa_r+0x196>
 8010580:	2301      	movs	r3, #1
 8010582:	eba1 0a0a 	sub.w	sl, r1, sl
 8010586:	9310      	str	r3, [sp, #64]	; 0x40
 8010588:	f1ba 0301 	subs.w	r3, sl, #1
 801058c:	9307      	str	r3, [sp, #28]
 801058e:	bf43      	ittte	mi
 8010590:	2300      	movmi	r3, #0
 8010592:	f1ca 0a01 	rsbmi	sl, sl, #1
 8010596:	9307      	strmi	r3, [sp, #28]
 8010598:	f04f 0a00 	movpl.w	sl, #0
 801059c:	f1bb 0f00 	cmp.w	fp, #0
 80105a0:	db19      	blt.n	80105d6 <_dtoa_r+0x216>
 80105a2:	9b07      	ldr	r3, [sp, #28]
 80105a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80105a8:	445b      	add	r3, fp
 80105aa:	9307      	str	r3, [sp, #28]
 80105ac:	f04f 0800 	mov.w	r8, #0
 80105b0:	9b08      	ldr	r3, [sp, #32]
 80105b2:	2b09      	cmp	r3, #9
 80105b4:	d866      	bhi.n	8010684 <_dtoa_r+0x2c4>
 80105b6:	2b05      	cmp	r3, #5
 80105b8:	bfc4      	itt	gt
 80105ba:	3b04      	subgt	r3, #4
 80105bc:	9308      	strgt	r3, [sp, #32]
 80105be:	9b08      	ldr	r3, [sp, #32]
 80105c0:	f1a3 0302 	sub.w	r3, r3, #2
 80105c4:	bfcc      	ite	gt
 80105c6:	2500      	movgt	r5, #0
 80105c8:	2501      	movle	r5, #1
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d866      	bhi.n	801069c <_dtoa_r+0x2dc>
 80105ce:	e8df f003 	tbb	[pc, r3]
 80105d2:	5755      	.short	0x5755
 80105d4:	4909      	.short	0x4909
 80105d6:	2300      	movs	r3, #0
 80105d8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80105dc:	f1cb 0800 	rsb	r8, fp, #0
 80105e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80105e2:	e7e5      	b.n	80105b0 <_dtoa_r+0x1f0>
 80105e4:	2301      	movs	r3, #1
 80105e6:	9309      	str	r3, [sp, #36]	; 0x24
 80105e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	dd59      	ble.n	80106a2 <_dtoa_r+0x2e2>
 80105ee:	9306      	str	r3, [sp, #24]
 80105f0:	4699      	mov	r9, r3
 80105f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80105f4:	2200      	movs	r2, #0
 80105f6:	6072      	str	r2, [r6, #4]
 80105f8:	2204      	movs	r2, #4
 80105fa:	f102 0014 	add.w	r0, r2, #20
 80105fe:	4298      	cmp	r0, r3
 8010600:	6871      	ldr	r1, [r6, #4]
 8010602:	d953      	bls.n	80106ac <_dtoa_r+0x2ec>
 8010604:	4620      	mov	r0, r4
 8010606:	f000 fe15 	bl	8011234 <_Balloc>
 801060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801060c:	6030      	str	r0, [r6, #0]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	f1b9 0f0e 	cmp.w	r9, #14
 8010616:	f200 80c2 	bhi.w	801079e <_dtoa_r+0x3de>
 801061a:	2d00      	cmp	r5, #0
 801061c:	f000 80bf 	beq.w	801079e <_dtoa_r+0x3de>
 8010620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010624:	f1bb 0f00 	cmp.w	fp, #0
 8010628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801062c:	f340 80e6 	ble.w	80107fc <_dtoa_r+0x43c>
 8010630:	4a2b      	ldr	r2, [pc, #172]	; (80106e0 <_dtoa_r+0x320>)
 8010632:	f00b 030f 	and.w	r3, fp, #15
 8010636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801063a:	ed93 7b00 	vldr	d7, [r3]
 801063e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8010642:	06da      	lsls	r2, r3, #27
 8010644:	f140 80d8 	bpl.w	80107f8 <_dtoa_r+0x438>
 8010648:	4a26      	ldr	r2, [pc, #152]	; (80106e4 <_dtoa_r+0x324>)
 801064a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801064e:	ed92 6b08 	vldr	d6, [r2, #32]
 8010652:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010656:	ed8d 6b02 	vstr	d6, [sp, #8]
 801065a:	f003 030f 	and.w	r3, r3, #15
 801065e:	2203      	movs	r2, #3
 8010660:	4920      	ldr	r1, [pc, #128]	; (80106e4 <_dtoa_r+0x324>)
 8010662:	e04a      	b.n	80106fa <_dtoa_r+0x33a>
 8010664:	2301      	movs	r3, #1
 8010666:	9309      	str	r3, [sp, #36]	; 0x24
 8010668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801066a:	445b      	add	r3, fp
 801066c:	f103 0901 	add.w	r9, r3, #1
 8010670:	9306      	str	r3, [sp, #24]
 8010672:	464b      	mov	r3, r9
 8010674:	2b01      	cmp	r3, #1
 8010676:	bfb8      	it	lt
 8010678:	2301      	movlt	r3, #1
 801067a:	e7ba      	b.n	80105f2 <_dtoa_r+0x232>
 801067c:	2300      	movs	r3, #0
 801067e:	e7b2      	b.n	80105e6 <_dtoa_r+0x226>
 8010680:	2300      	movs	r3, #0
 8010682:	e7f0      	b.n	8010666 <_dtoa_r+0x2a6>
 8010684:	2501      	movs	r5, #1
 8010686:	2300      	movs	r3, #0
 8010688:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801068c:	f04f 33ff 	mov.w	r3, #4294967295
 8010690:	9306      	str	r3, [sp, #24]
 8010692:	4699      	mov	r9, r3
 8010694:	2200      	movs	r2, #0
 8010696:	2312      	movs	r3, #18
 8010698:	920a      	str	r2, [sp, #40]	; 0x28
 801069a:	e7aa      	b.n	80105f2 <_dtoa_r+0x232>
 801069c:	2301      	movs	r3, #1
 801069e:	9309      	str	r3, [sp, #36]	; 0x24
 80106a0:	e7f4      	b.n	801068c <_dtoa_r+0x2cc>
 80106a2:	2301      	movs	r3, #1
 80106a4:	9306      	str	r3, [sp, #24]
 80106a6:	4699      	mov	r9, r3
 80106a8:	461a      	mov	r2, r3
 80106aa:	e7f5      	b.n	8010698 <_dtoa_r+0x2d8>
 80106ac:	3101      	adds	r1, #1
 80106ae:	6071      	str	r1, [r6, #4]
 80106b0:	0052      	lsls	r2, r2, #1
 80106b2:	e7a2      	b.n	80105fa <_dtoa_r+0x23a>
 80106b4:	f3af 8000 	nop.w
 80106b8:	636f4361 	.word	0x636f4361
 80106bc:	3fd287a7 	.word	0x3fd287a7
 80106c0:	8b60c8b3 	.word	0x8b60c8b3
 80106c4:	3fc68a28 	.word	0x3fc68a28
 80106c8:	509f79fb 	.word	0x509f79fb
 80106cc:	3fd34413 	.word	0x3fd34413
 80106d0:	7ff00000 	.word	0x7ff00000
 80106d4:	080d5235 	.word	0x080d5235
 80106d8:	080d522c 	.word	0x080d522c
 80106dc:	080d5209 	.word	0x080d5209
 80106e0:	080d52c8 	.word	0x080d52c8
 80106e4:	080d52a0 	.word	0x080d52a0
 80106e8:	07de      	lsls	r6, r3, #31
 80106ea:	d504      	bpl.n	80106f6 <_dtoa_r+0x336>
 80106ec:	ed91 6b00 	vldr	d6, [r1]
 80106f0:	3201      	adds	r2, #1
 80106f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80106f6:	105b      	asrs	r3, r3, #1
 80106f8:	3108      	adds	r1, #8
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1f4      	bne.n	80106e8 <_dtoa_r+0x328>
 80106fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010702:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010706:	ed8d 7b02 	vstr	d7, [sp, #8]
 801070a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801070c:	2b00      	cmp	r3, #0
 801070e:	f000 80a7 	beq.w	8010860 <_dtoa_r+0x4a0>
 8010712:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010716:	ed9d 7b02 	vldr	d7, [sp, #8]
 801071a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010722:	f140 809d 	bpl.w	8010860 <_dtoa_r+0x4a0>
 8010726:	f1b9 0f00 	cmp.w	r9, #0
 801072a:	f000 8099 	beq.w	8010860 <_dtoa_r+0x4a0>
 801072e:	9b06      	ldr	r3, [sp, #24]
 8010730:	2b00      	cmp	r3, #0
 8010732:	dd30      	ble.n	8010796 <_dtoa_r+0x3d6>
 8010734:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010738:	ee27 7b06 	vmul.f64	d7, d7, d6
 801073c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010740:	9d06      	ldr	r5, [sp, #24]
 8010742:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010746:	3201      	adds	r2, #1
 8010748:	ed9d 6b02 	vldr	d6, [sp, #8]
 801074c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010750:	ee07 2a90 	vmov	s15, r2
 8010754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010758:	eea7 5b06 	vfma.f64	d5, d7, d6
 801075c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010760:	9a03      	ldr	r2, [sp, #12]
 8010762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010766:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801076a:	2d00      	cmp	r5, #0
 801076c:	d17b      	bne.n	8010866 <_dtoa_r+0x4a6>
 801076e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010772:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010776:	ec41 0b17 	vmov	d7, r0, r1
 801077a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	f300 8253 	bgt.w	8010c2c <_dtoa_r+0x86c>
 8010786:	eeb1 7b47 	vneg.f64	d7, d7
 801078a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010792:	f100 8249 	bmi.w	8010c28 <_dtoa_r+0x868>
 8010796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801079a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801079e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f2c0 8119 	blt.w	80109d8 <_dtoa_r+0x618>
 80107a6:	f1bb 0f0e 	cmp.w	fp, #14
 80107aa:	f300 8115 	bgt.w	80109d8 <_dtoa_r+0x618>
 80107ae:	4bc3      	ldr	r3, [pc, #780]	; (8010abc <_dtoa_r+0x6fc>)
 80107b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107b4:	ed93 6b00 	vldr	d6, [r3]
 80107b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f280 80ba 	bge.w	8010934 <_dtoa_r+0x574>
 80107c0:	f1b9 0f00 	cmp.w	r9, #0
 80107c4:	f300 80b6 	bgt.w	8010934 <_dtoa_r+0x574>
 80107c8:	f040 822d 	bne.w	8010c26 <_dtoa_r+0x866>
 80107cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80107d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80107d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e0:	464d      	mov	r5, r9
 80107e2:	464f      	mov	r7, r9
 80107e4:	f280 8204 	bge.w	8010bf0 <_dtoa_r+0x830>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	9a04      	ldr	r2, [sp, #16]
 80107ec:	1c5e      	adds	r6, r3, #1
 80107ee:	2331      	movs	r3, #49	; 0x31
 80107f0:	7013      	strb	r3, [r2, #0]
 80107f2:	f10b 0b01 	add.w	fp, fp, #1
 80107f6:	e1ff      	b.n	8010bf8 <_dtoa_r+0x838>
 80107f8:	2202      	movs	r2, #2
 80107fa:	e731      	b.n	8010660 <_dtoa_r+0x2a0>
 80107fc:	d02e      	beq.n	801085c <_dtoa_r+0x49c>
 80107fe:	f1cb 0300 	rsb	r3, fp, #0
 8010802:	4aae      	ldr	r2, [pc, #696]	; (8010abc <_dtoa_r+0x6fc>)
 8010804:	f003 010f 	and.w	r1, r3, #15
 8010808:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801080c:	ed92 7b00 	vldr	d7, [r2]
 8010810:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8010814:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010818:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801081c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8010820:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010824:	49a6      	ldr	r1, [pc, #664]	; (8010ac0 <_dtoa_r+0x700>)
 8010826:	111b      	asrs	r3, r3, #4
 8010828:	2000      	movs	r0, #0
 801082a:	2202      	movs	r2, #2
 801082c:	b93b      	cbnz	r3, 801083e <_dtoa_r+0x47e>
 801082e:	2800      	cmp	r0, #0
 8010830:	f43f af6b 	beq.w	801070a <_dtoa_r+0x34a>
 8010834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801083c:	e765      	b.n	801070a <_dtoa_r+0x34a>
 801083e:	07dd      	lsls	r5, r3, #31
 8010840:	d509      	bpl.n	8010856 <_dtoa_r+0x496>
 8010842:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010846:	ed91 7b00 	vldr	d7, [r1]
 801084a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801084e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010852:	3201      	adds	r2, #1
 8010854:	2001      	movs	r0, #1
 8010856:	105b      	asrs	r3, r3, #1
 8010858:	3108      	adds	r1, #8
 801085a:	e7e7      	b.n	801082c <_dtoa_r+0x46c>
 801085c:	2202      	movs	r2, #2
 801085e:	e754      	b.n	801070a <_dtoa_r+0x34a>
 8010860:	465b      	mov	r3, fp
 8010862:	464d      	mov	r5, r9
 8010864:	e770      	b.n	8010748 <_dtoa_r+0x388>
 8010866:	4a95      	ldr	r2, [pc, #596]	; (8010abc <_dtoa_r+0x6fc>)
 8010868:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801086c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010872:	ec41 0b17 	vmov	d7, r0, r1
 8010876:	b35a      	cbz	r2, 80108d0 <_dtoa_r+0x510>
 8010878:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801087c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010880:	9e04      	ldr	r6, [sp, #16]
 8010882:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010886:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801088a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801088e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010892:	ee14 2a90 	vmov	r2, s9
 8010896:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801089a:	3230      	adds	r2, #48	; 0x30
 801089c:	ee36 6b45 	vsub.f64	d6, d6, d5
 80108a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80108a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a8:	f806 2b01 	strb.w	r2, [r6], #1
 80108ac:	d43b      	bmi.n	8010926 <_dtoa_r+0x566>
 80108ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 80108b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80108b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ba:	d472      	bmi.n	80109a2 <_dtoa_r+0x5e2>
 80108bc:	9a04      	ldr	r2, [sp, #16]
 80108be:	1ab2      	subs	r2, r6, r2
 80108c0:	4295      	cmp	r5, r2
 80108c2:	f77f af68 	ble.w	8010796 <_dtoa_r+0x3d6>
 80108c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80108ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80108ce:	e7de      	b.n	801088e <_dtoa_r+0x4ce>
 80108d0:	9a04      	ldr	r2, [sp, #16]
 80108d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80108d6:	1956      	adds	r6, r2, r5
 80108d8:	4611      	mov	r1, r2
 80108da:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80108de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80108e2:	ee14 2a90 	vmov	r2, s9
 80108e6:	3230      	adds	r2, #48	; 0x30
 80108e8:	f801 2b01 	strb.w	r2, [r1], #1
 80108ec:	42b1      	cmp	r1, r6
 80108ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80108f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80108f6:	d11a      	bne.n	801092e <_dtoa_r+0x56e>
 80108f8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80108fc:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010900:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010908:	dc4b      	bgt.n	80109a2 <_dtoa_r+0x5e2>
 801090a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801090e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010916:	f57f af3e 	bpl.w	8010796 <_dtoa_r+0x3d6>
 801091a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801091e:	2a30      	cmp	r2, #48	; 0x30
 8010920:	f106 31ff 	add.w	r1, r6, #4294967295
 8010924:	d001      	beq.n	801092a <_dtoa_r+0x56a>
 8010926:	469b      	mov	fp, r3
 8010928:	e02a      	b.n	8010980 <_dtoa_r+0x5c0>
 801092a:	460e      	mov	r6, r1
 801092c:	e7f5      	b.n	801091a <_dtoa_r+0x55a>
 801092e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010932:	e7d4      	b.n	80108de <_dtoa_r+0x51e>
 8010934:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010938:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801093c:	9e04      	ldr	r6, [sp, #16]
 801093e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010942:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010946:	ee15 3a10 	vmov	r3, s10
 801094a:	3330      	adds	r3, #48	; 0x30
 801094c:	f806 3b01 	strb.w	r3, [r6], #1
 8010950:	9b04      	ldr	r3, [sp, #16]
 8010952:	1af3      	subs	r3, r6, r3
 8010954:	4599      	cmp	r9, r3
 8010956:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801095a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801095e:	d133      	bne.n	80109c8 <_dtoa_r+0x608>
 8010960:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010964:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801096c:	dc18      	bgt.n	80109a0 <_dtoa_r+0x5e0>
 801096e:	eeb4 7b46 	vcmp.f64	d7, d6
 8010972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010976:	d103      	bne.n	8010980 <_dtoa_r+0x5c0>
 8010978:	ee15 3a10 	vmov	r3, s10
 801097c:	07db      	lsls	r3, r3, #31
 801097e:	d40f      	bmi.n	80109a0 <_dtoa_r+0x5e0>
 8010980:	9901      	ldr	r1, [sp, #4]
 8010982:	4620      	mov	r0, r4
 8010984:	f000 fc8a 	bl	801129c <_Bfree>
 8010988:	2300      	movs	r3, #0
 801098a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801098c:	7033      	strb	r3, [r6, #0]
 801098e:	f10b 0301 	add.w	r3, fp, #1
 8010992:	6013      	str	r3, [r2, #0]
 8010994:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010996:	2b00      	cmp	r3, #0
 8010998:	f43f ad5b 	beq.w	8010452 <_dtoa_r+0x92>
 801099c:	601e      	str	r6, [r3, #0]
 801099e:	e558      	b.n	8010452 <_dtoa_r+0x92>
 80109a0:	465b      	mov	r3, fp
 80109a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80109a6:	2939      	cmp	r1, #57	; 0x39
 80109a8:	f106 32ff 	add.w	r2, r6, #4294967295
 80109ac:	d106      	bne.n	80109bc <_dtoa_r+0x5fc>
 80109ae:	9904      	ldr	r1, [sp, #16]
 80109b0:	4291      	cmp	r1, r2
 80109b2:	d107      	bne.n	80109c4 <_dtoa_r+0x604>
 80109b4:	2230      	movs	r2, #48	; 0x30
 80109b6:	700a      	strb	r2, [r1, #0]
 80109b8:	3301      	adds	r3, #1
 80109ba:	460a      	mov	r2, r1
 80109bc:	7811      	ldrb	r1, [r2, #0]
 80109be:	3101      	adds	r1, #1
 80109c0:	7011      	strb	r1, [r2, #0]
 80109c2:	e7b0      	b.n	8010926 <_dtoa_r+0x566>
 80109c4:	4616      	mov	r6, r2
 80109c6:	e7ec      	b.n	80109a2 <_dtoa_r+0x5e2>
 80109c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80109cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d4:	d1b3      	bne.n	801093e <_dtoa_r+0x57e>
 80109d6:	e7d3      	b.n	8010980 <_dtoa_r+0x5c0>
 80109d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109da:	2a00      	cmp	r2, #0
 80109dc:	f000 808d 	beq.w	8010afa <_dtoa_r+0x73a>
 80109e0:	9a08      	ldr	r2, [sp, #32]
 80109e2:	2a01      	cmp	r2, #1
 80109e4:	dc72      	bgt.n	8010acc <_dtoa_r+0x70c>
 80109e6:	2f00      	cmp	r7, #0
 80109e8:	d06c      	beq.n	8010ac4 <_dtoa_r+0x704>
 80109ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80109ee:	4645      	mov	r5, r8
 80109f0:	4656      	mov	r6, sl
 80109f2:	9a07      	ldr	r2, [sp, #28]
 80109f4:	2101      	movs	r1, #1
 80109f6:	441a      	add	r2, r3
 80109f8:	4620      	mov	r0, r4
 80109fa:	449a      	add	sl, r3
 80109fc:	9207      	str	r2, [sp, #28]
 80109fe:	f000 fced 	bl	80113dc <__i2b>
 8010a02:	4607      	mov	r7, r0
 8010a04:	2e00      	cmp	r6, #0
 8010a06:	dd0b      	ble.n	8010a20 <_dtoa_r+0x660>
 8010a08:	9b07      	ldr	r3, [sp, #28]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dd08      	ble.n	8010a20 <_dtoa_r+0x660>
 8010a0e:	42b3      	cmp	r3, r6
 8010a10:	9a07      	ldr	r2, [sp, #28]
 8010a12:	bfa8      	it	ge
 8010a14:	4633      	movge	r3, r6
 8010a16:	ebaa 0a03 	sub.w	sl, sl, r3
 8010a1a:	1af6      	subs	r6, r6, r3
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	9307      	str	r3, [sp, #28]
 8010a20:	f1b8 0f00 	cmp.w	r8, #0
 8010a24:	d01d      	beq.n	8010a62 <_dtoa_r+0x6a2>
 8010a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d06a      	beq.n	8010b02 <_dtoa_r+0x742>
 8010a2c:	b18d      	cbz	r5, 8010a52 <_dtoa_r+0x692>
 8010a2e:	4639      	mov	r1, r7
 8010a30:	462a      	mov	r2, r5
 8010a32:	4620      	mov	r0, r4
 8010a34:	f000 fd72 	bl	801151c <__pow5mult>
 8010a38:	9a01      	ldr	r2, [sp, #4]
 8010a3a:	4601      	mov	r1, r0
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f000 fcd5 	bl	80113ee <__multiply>
 8010a44:	9901      	ldr	r1, [sp, #4]
 8010a46:	900c      	str	r0, [sp, #48]	; 0x30
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 fc27 	bl	801129c <_Bfree>
 8010a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	ebb8 0205 	subs.w	r2, r8, r5
 8010a56:	d004      	beq.n	8010a62 <_dtoa_r+0x6a2>
 8010a58:	9901      	ldr	r1, [sp, #4]
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f000 fd5e 	bl	801151c <__pow5mult>
 8010a60:	9001      	str	r0, [sp, #4]
 8010a62:	2101      	movs	r1, #1
 8010a64:	4620      	mov	r0, r4
 8010a66:	f000 fcb9 	bl	80113dc <__i2b>
 8010a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a6c:	4605      	mov	r5, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 81ca 	beq.w	8010e08 <_dtoa_r+0xa48>
 8010a74:	461a      	mov	r2, r3
 8010a76:	4601      	mov	r1, r0
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f000 fd4f 	bl	801151c <__pow5mult>
 8010a7e:	9b08      	ldr	r3, [sp, #32]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	4605      	mov	r5, r0
 8010a84:	dc44      	bgt.n	8010b10 <_dtoa_r+0x750>
 8010a86:	9b02      	ldr	r3, [sp, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d13c      	bne.n	8010b06 <_dtoa_r+0x746>
 8010a8c:	9b03      	ldr	r3, [sp, #12]
 8010a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d137      	bne.n	8010b06 <_dtoa_r+0x746>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a9c:	0d1b      	lsrs	r3, r3, #20
 8010a9e:	051b      	lsls	r3, r3, #20
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d033      	beq.n	8010b0c <_dtoa_r+0x74c>
 8010aa4:	9b07      	ldr	r3, [sp, #28]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	f10a 0a01 	add.w	sl, sl, #1
 8010aac:	9307      	str	r3, [sp, #28]
 8010aae:	f04f 0801 	mov.w	r8, #1
 8010ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ab4:	bb73      	cbnz	r3, 8010b14 <_dtoa_r+0x754>
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	e034      	b.n	8010b24 <_dtoa_r+0x764>
 8010aba:	bf00      	nop
 8010abc:	080d52c8 	.word	0x080d52c8
 8010ac0:	080d52a0 	.word	0x080d52a0
 8010ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010aca:	e790      	b.n	80109ee <_dtoa_r+0x62e>
 8010acc:	f109 35ff 	add.w	r5, r9, #4294967295
 8010ad0:	45a8      	cmp	r8, r5
 8010ad2:	bfbf      	itttt	lt
 8010ad4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8010ad6:	eba5 0808 	sublt.w	r8, r5, r8
 8010ada:	4443      	addlt	r3, r8
 8010adc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8010ade:	bfb6      	itet	lt
 8010ae0:	46a8      	movlt	r8, r5
 8010ae2:	eba8 0505 	subge.w	r5, r8, r5
 8010ae6:	2500      	movlt	r5, #0
 8010ae8:	f1b9 0f00 	cmp.w	r9, #0
 8010aec:	bfb9      	ittee	lt
 8010aee:	ebaa 0609 	sublt.w	r6, sl, r9
 8010af2:	2300      	movlt	r3, #0
 8010af4:	4656      	movge	r6, sl
 8010af6:	464b      	movge	r3, r9
 8010af8:	e77b      	b.n	80109f2 <_dtoa_r+0x632>
 8010afa:	4645      	mov	r5, r8
 8010afc:	4656      	mov	r6, sl
 8010afe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b00:	e780      	b.n	8010a04 <_dtoa_r+0x644>
 8010b02:	4642      	mov	r2, r8
 8010b04:	e7a8      	b.n	8010a58 <_dtoa_r+0x698>
 8010b06:	f04f 0800 	mov.w	r8, #0
 8010b0a:	e7d2      	b.n	8010ab2 <_dtoa_r+0x6f2>
 8010b0c:	4698      	mov	r8, r3
 8010b0e:	e7d0      	b.n	8010ab2 <_dtoa_r+0x6f2>
 8010b10:	f04f 0800 	mov.w	r8, #0
 8010b14:	692b      	ldr	r3, [r5, #16]
 8010b16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010b1a:	6918      	ldr	r0, [r3, #16]
 8010b1c:	f000 fc10 	bl	8011340 <__hi0bits>
 8010b20:	f1c0 0020 	rsb	r0, r0, #32
 8010b24:	9b07      	ldr	r3, [sp, #28]
 8010b26:	4418      	add	r0, r3
 8010b28:	f010 001f 	ands.w	r0, r0, #31
 8010b2c:	d047      	beq.n	8010bbe <_dtoa_r+0x7fe>
 8010b2e:	f1c0 0320 	rsb	r3, r0, #32
 8010b32:	2b04      	cmp	r3, #4
 8010b34:	dd3b      	ble.n	8010bae <_dtoa_r+0x7ee>
 8010b36:	9b07      	ldr	r3, [sp, #28]
 8010b38:	f1c0 001c 	rsb	r0, r0, #28
 8010b3c:	4482      	add	sl, r0
 8010b3e:	4406      	add	r6, r0
 8010b40:	4403      	add	r3, r0
 8010b42:	9307      	str	r3, [sp, #28]
 8010b44:	f1ba 0f00 	cmp.w	sl, #0
 8010b48:	dd05      	ble.n	8010b56 <_dtoa_r+0x796>
 8010b4a:	4652      	mov	r2, sl
 8010b4c:	9901      	ldr	r1, [sp, #4]
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f000 fd32 	bl	80115b8 <__lshift>
 8010b54:	9001      	str	r0, [sp, #4]
 8010b56:	9b07      	ldr	r3, [sp, #28]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	dd05      	ble.n	8010b68 <_dtoa_r+0x7a8>
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fd29 	bl	80115b8 <__lshift>
 8010b66:	4605      	mov	r5, r0
 8010b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b6a:	b353      	cbz	r3, 8010bc2 <_dtoa_r+0x802>
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	9801      	ldr	r0, [sp, #4]
 8010b70:	f000 fd76 	bl	8011660 <__mcmp>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	da24      	bge.n	8010bc2 <_dtoa_r+0x802>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	220a      	movs	r2, #10
 8010b7c:	9901      	ldr	r1, [sp, #4]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f000 fba3 	bl	80112ca <__multadd>
 8010b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b86:	9001      	str	r0, [sp, #4]
 8010b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 8142 	beq.w	8010e16 <_dtoa_r+0xa56>
 8010b92:	2300      	movs	r3, #0
 8010b94:	4639      	mov	r1, r7
 8010b96:	220a      	movs	r2, #10
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f000 fb96 	bl	80112ca <__multadd>
 8010b9e:	9b06      	ldr	r3, [sp, #24]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	4607      	mov	r7, r0
 8010ba4:	dc4b      	bgt.n	8010c3e <_dtoa_r+0x87e>
 8010ba6:	9b08      	ldr	r3, [sp, #32]
 8010ba8:	2b02      	cmp	r3, #2
 8010baa:	dd48      	ble.n	8010c3e <_dtoa_r+0x87e>
 8010bac:	e011      	b.n	8010bd2 <_dtoa_r+0x812>
 8010bae:	d0c9      	beq.n	8010b44 <_dtoa_r+0x784>
 8010bb0:	9a07      	ldr	r2, [sp, #28]
 8010bb2:	331c      	adds	r3, #28
 8010bb4:	441a      	add	r2, r3
 8010bb6:	449a      	add	sl, r3
 8010bb8:	441e      	add	r6, r3
 8010bba:	4613      	mov	r3, r2
 8010bbc:	e7c1      	b.n	8010b42 <_dtoa_r+0x782>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	e7f6      	b.n	8010bb0 <_dtoa_r+0x7f0>
 8010bc2:	f1b9 0f00 	cmp.w	r9, #0
 8010bc6:	dc34      	bgt.n	8010c32 <_dtoa_r+0x872>
 8010bc8:	9b08      	ldr	r3, [sp, #32]
 8010bca:	2b02      	cmp	r3, #2
 8010bcc:	dd31      	ble.n	8010c32 <_dtoa_r+0x872>
 8010bce:	f8cd 9018 	str.w	r9, [sp, #24]
 8010bd2:	9b06      	ldr	r3, [sp, #24]
 8010bd4:	b963      	cbnz	r3, 8010bf0 <_dtoa_r+0x830>
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	2205      	movs	r2, #5
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 fb75 	bl	80112ca <__multadd>
 8010be0:	4601      	mov	r1, r0
 8010be2:	4605      	mov	r5, r0
 8010be4:	9801      	ldr	r0, [sp, #4]
 8010be6:	f000 fd3b 	bl	8011660 <__mcmp>
 8010bea:	2800      	cmp	r0, #0
 8010bec:	f73f adfc 	bgt.w	80107e8 <_dtoa_r+0x428>
 8010bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bf2:	9e04      	ldr	r6, [sp, #16]
 8010bf4:	ea6f 0b03 	mvn.w	fp, r3
 8010bf8:	f04f 0900 	mov.w	r9, #0
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 fb4c 	bl	801129c <_Bfree>
 8010c04:	2f00      	cmp	r7, #0
 8010c06:	f43f aebb 	beq.w	8010980 <_dtoa_r+0x5c0>
 8010c0a:	f1b9 0f00 	cmp.w	r9, #0
 8010c0e:	d005      	beq.n	8010c1c <_dtoa_r+0x85c>
 8010c10:	45b9      	cmp	r9, r7
 8010c12:	d003      	beq.n	8010c1c <_dtoa_r+0x85c>
 8010c14:	4649      	mov	r1, r9
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 fb40 	bl	801129c <_Bfree>
 8010c1c:	4639      	mov	r1, r7
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f000 fb3c 	bl	801129c <_Bfree>
 8010c24:	e6ac      	b.n	8010980 <_dtoa_r+0x5c0>
 8010c26:	2500      	movs	r5, #0
 8010c28:	462f      	mov	r7, r5
 8010c2a:	e7e1      	b.n	8010bf0 <_dtoa_r+0x830>
 8010c2c:	469b      	mov	fp, r3
 8010c2e:	462f      	mov	r7, r5
 8010c30:	e5da      	b.n	80107e8 <_dtoa_r+0x428>
 8010c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c34:	f8cd 9018 	str.w	r9, [sp, #24]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 80f3 	beq.w	8010e24 <_dtoa_r+0xa64>
 8010c3e:	2e00      	cmp	r6, #0
 8010c40:	dd05      	ble.n	8010c4e <_dtoa_r+0x88e>
 8010c42:	4639      	mov	r1, r7
 8010c44:	4632      	mov	r2, r6
 8010c46:	4620      	mov	r0, r4
 8010c48:	f000 fcb6 	bl	80115b8 <__lshift>
 8010c4c:	4607      	mov	r7, r0
 8010c4e:	f1b8 0f00 	cmp.w	r8, #0
 8010c52:	d04c      	beq.n	8010cee <_dtoa_r+0x92e>
 8010c54:	6879      	ldr	r1, [r7, #4]
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 faec 	bl	8011234 <_Balloc>
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	3202      	adds	r2, #2
 8010c60:	4606      	mov	r6, r0
 8010c62:	0092      	lsls	r2, r2, #2
 8010c64:	f107 010c 	add.w	r1, r7, #12
 8010c68:	300c      	adds	r0, #12
 8010c6a:	f7fe fcbe 	bl	800f5ea <memcpy>
 8010c6e:	2201      	movs	r2, #1
 8010c70:	4631      	mov	r1, r6
 8010c72:	4620      	mov	r0, r4
 8010c74:	f000 fca0 	bl	80115b8 <__lshift>
 8010c78:	9b02      	ldr	r3, [sp, #8]
 8010c7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010c7e:	f003 0301 	and.w	r3, r3, #1
 8010c82:	46b9      	mov	r9, r7
 8010c84:	9307      	str	r3, [sp, #28]
 8010c86:	4607      	mov	r7, r0
 8010c88:	4629      	mov	r1, r5
 8010c8a:	9801      	ldr	r0, [sp, #4]
 8010c8c:	f7ff fb0a 	bl	80102a4 <quorem>
 8010c90:	4649      	mov	r1, r9
 8010c92:	4606      	mov	r6, r0
 8010c94:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010c98:	9801      	ldr	r0, [sp, #4]
 8010c9a:	f000 fce1 	bl	8011660 <__mcmp>
 8010c9e:	463a      	mov	r2, r7
 8010ca0:	9002      	str	r0, [sp, #8]
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 fcf5 	bl	8011694 <__mdiff>
 8010caa:	68c3      	ldr	r3, [r0, #12]
 8010cac:	4602      	mov	r2, r0
 8010cae:	bb03      	cbnz	r3, 8010cf2 <_dtoa_r+0x932>
 8010cb0:	4601      	mov	r1, r0
 8010cb2:	9009      	str	r0, [sp, #36]	; 0x24
 8010cb4:	9801      	ldr	r0, [sp, #4]
 8010cb6:	f000 fcd3 	bl	8011660 <__mcmp>
 8010cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc4:	f000 faea 	bl	801129c <_Bfree>
 8010cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cca:	b9a3      	cbnz	r3, 8010cf6 <_dtoa_r+0x936>
 8010ccc:	9a08      	ldr	r2, [sp, #32]
 8010cce:	b992      	cbnz	r2, 8010cf6 <_dtoa_r+0x936>
 8010cd0:	9a07      	ldr	r2, [sp, #28]
 8010cd2:	b982      	cbnz	r2, 8010cf6 <_dtoa_r+0x936>
 8010cd4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010cd8:	d029      	beq.n	8010d2e <_dtoa_r+0x96e>
 8010cda:	9b02      	ldr	r3, [sp, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dd01      	ble.n	8010ce4 <_dtoa_r+0x924>
 8010ce0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8010ce4:	f10a 0601 	add.w	r6, sl, #1
 8010ce8:	f88a 8000 	strb.w	r8, [sl]
 8010cec:	e786      	b.n	8010bfc <_dtoa_r+0x83c>
 8010cee:	4638      	mov	r0, r7
 8010cf0:	e7c2      	b.n	8010c78 <_dtoa_r+0x8b8>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e7e3      	b.n	8010cbe <_dtoa_r+0x8fe>
 8010cf6:	9a02      	ldr	r2, [sp, #8]
 8010cf8:	2a00      	cmp	r2, #0
 8010cfa:	db04      	blt.n	8010d06 <_dtoa_r+0x946>
 8010cfc:	d124      	bne.n	8010d48 <_dtoa_r+0x988>
 8010cfe:	9a08      	ldr	r2, [sp, #32]
 8010d00:	bb12      	cbnz	r2, 8010d48 <_dtoa_r+0x988>
 8010d02:	9a07      	ldr	r2, [sp, #28]
 8010d04:	bb02      	cbnz	r2, 8010d48 <_dtoa_r+0x988>
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	ddec      	ble.n	8010ce4 <_dtoa_r+0x924>
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	9901      	ldr	r1, [sp, #4]
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f000 fc52 	bl	80115b8 <__lshift>
 8010d14:	4629      	mov	r1, r5
 8010d16:	9001      	str	r0, [sp, #4]
 8010d18:	f000 fca2 	bl	8011660 <__mcmp>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	dc03      	bgt.n	8010d28 <_dtoa_r+0x968>
 8010d20:	d1e0      	bne.n	8010ce4 <_dtoa_r+0x924>
 8010d22:	f018 0f01 	tst.w	r8, #1
 8010d26:	d0dd      	beq.n	8010ce4 <_dtoa_r+0x924>
 8010d28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010d2c:	d1d8      	bne.n	8010ce0 <_dtoa_r+0x920>
 8010d2e:	2339      	movs	r3, #57	; 0x39
 8010d30:	f10a 0601 	add.w	r6, sl, #1
 8010d34:	f88a 3000 	strb.w	r3, [sl]
 8010d38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d3c:	2b39      	cmp	r3, #57	; 0x39
 8010d3e:	f106 32ff 	add.w	r2, r6, #4294967295
 8010d42:	d04c      	beq.n	8010dde <_dtoa_r+0xa1e>
 8010d44:	3301      	adds	r3, #1
 8010d46:	e051      	b.n	8010dec <_dtoa_r+0xa2c>
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f10a 0601 	add.w	r6, sl, #1
 8010d4e:	dd05      	ble.n	8010d5c <_dtoa_r+0x99c>
 8010d50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010d54:	d0eb      	beq.n	8010d2e <_dtoa_r+0x96e>
 8010d56:	f108 0801 	add.w	r8, r8, #1
 8010d5a:	e7c5      	b.n	8010ce8 <_dtoa_r+0x928>
 8010d5c:	9b04      	ldr	r3, [sp, #16]
 8010d5e:	9a06      	ldr	r2, [sp, #24]
 8010d60:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010d64:	1af3      	subs	r3, r6, r3
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d021      	beq.n	8010dae <_dtoa_r+0x9ee>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	220a      	movs	r2, #10
 8010d6e:	9901      	ldr	r1, [sp, #4]
 8010d70:	4620      	mov	r0, r4
 8010d72:	f000 faaa 	bl	80112ca <__multadd>
 8010d76:	45b9      	cmp	r9, r7
 8010d78:	9001      	str	r0, [sp, #4]
 8010d7a:	f04f 0300 	mov.w	r3, #0
 8010d7e:	f04f 020a 	mov.w	r2, #10
 8010d82:	4649      	mov	r1, r9
 8010d84:	4620      	mov	r0, r4
 8010d86:	d105      	bne.n	8010d94 <_dtoa_r+0x9d4>
 8010d88:	f000 fa9f 	bl	80112ca <__multadd>
 8010d8c:	4681      	mov	r9, r0
 8010d8e:	4607      	mov	r7, r0
 8010d90:	46b2      	mov	sl, r6
 8010d92:	e779      	b.n	8010c88 <_dtoa_r+0x8c8>
 8010d94:	f000 fa99 	bl	80112ca <__multadd>
 8010d98:	4639      	mov	r1, r7
 8010d9a:	4681      	mov	r9, r0
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	220a      	movs	r2, #10
 8010da0:	4620      	mov	r0, r4
 8010da2:	f000 fa92 	bl	80112ca <__multadd>
 8010da6:	4607      	mov	r7, r0
 8010da8:	e7f2      	b.n	8010d90 <_dtoa_r+0x9d0>
 8010daa:	f04f 0900 	mov.w	r9, #0
 8010dae:	2201      	movs	r2, #1
 8010db0:	9901      	ldr	r1, [sp, #4]
 8010db2:	4620      	mov	r0, r4
 8010db4:	f000 fc00 	bl	80115b8 <__lshift>
 8010db8:	4629      	mov	r1, r5
 8010dba:	9001      	str	r0, [sp, #4]
 8010dbc:	f000 fc50 	bl	8011660 <__mcmp>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	dcb9      	bgt.n	8010d38 <_dtoa_r+0x978>
 8010dc4:	d102      	bne.n	8010dcc <_dtoa_r+0xa0c>
 8010dc6:	f018 0f01 	tst.w	r8, #1
 8010dca:	d1b5      	bne.n	8010d38 <_dtoa_r+0x978>
 8010dcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010dd0:	2b30      	cmp	r3, #48	; 0x30
 8010dd2:	f106 32ff 	add.w	r2, r6, #4294967295
 8010dd6:	f47f af11 	bne.w	8010bfc <_dtoa_r+0x83c>
 8010dda:	4616      	mov	r6, r2
 8010ddc:	e7f6      	b.n	8010dcc <_dtoa_r+0xa0c>
 8010dde:	9b04      	ldr	r3, [sp, #16]
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d105      	bne.n	8010df0 <_dtoa_r+0xa30>
 8010de4:	9a04      	ldr	r2, [sp, #16]
 8010de6:	f10b 0b01 	add.w	fp, fp, #1
 8010dea:	2331      	movs	r3, #49	; 0x31
 8010dec:	7013      	strb	r3, [r2, #0]
 8010dee:	e705      	b.n	8010bfc <_dtoa_r+0x83c>
 8010df0:	4616      	mov	r6, r2
 8010df2:	e7a1      	b.n	8010d38 <_dtoa_r+0x978>
 8010df4:	4b16      	ldr	r3, [pc, #88]	; (8010e50 <_dtoa_r+0xa90>)
 8010df6:	f7ff bb48 	b.w	801048a <_dtoa_r+0xca>
 8010dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f47f ab23 	bne.w	8010448 <_dtoa_r+0x88>
 8010e02:	4b14      	ldr	r3, [pc, #80]	; (8010e54 <_dtoa_r+0xa94>)
 8010e04:	f7ff bb41 	b.w	801048a <_dtoa_r+0xca>
 8010e08:	9b08      	ldr	r3, [sp, #32]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	f77f ae3b 	ble.w	8010a86 <_dtoa_r+0x6c6>
 8010e10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8010e14:	e64f      	b.n	8010ab6 <_dtoa_r+0x6f6>
 8010e16:	9b06      	ldr	r3, [sp, #24]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	dc03      	bgt.n	8010e24 <_dtoa_r+0xa64>
 8010e1c:	9b08      	ldr	r3, [sp, #32]
 8010e1e:	2b02      	cmp	r3, #2
 8010e20:	f73f aed7 	bgt.w	8010bd2 <_dtoa_r+0x812>
 8010e24:	9e04      	ldr	r6, [sp, #16]
 8010e26:	9801      	ldr	r0, [sp, #4]
 8010e28:	4629      	mov	r1, r5
 8010e2a:	f7ff fa3b 	bl	80102a4 <quorem>
 8010e2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010e32:	f806 8b01 	strb.w	r8, [r6], #1
 8010e36:	9b04      	ldr	r3, [sp, #16]
 8010e38:	9a06      	ldr	r2, [sp, #24]
 8010e3a:	1af3      	subs	r3, r6, r3
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	ddb4      	ble.n	8010daa <_dtoa_r+0x9ea>
 8010e40:	2300      	movs	r3, #0
 8010e42:	220a      	movs	r2, #10
 8010e44:	9901      	ldr	r1, [sp, #4]
 8010e46:	4620      	mov	r0, r4
 8010e48:	f000 fa3f 	bl	80112ca <__multadd>
 8010e4c:	9001      	str	r0, [sp, #4]
 8010e4e:	e7ea      	b.n	8010e26 <_dtoa_r+0xa66>
 8010e50:	080d5208 	.word	0x080d5208
 8010e54:	080d522c 	.word	0x080d522c

08010e58 <__sflush_r>:
 8010e58:	898a      	ldrh	r2, [r1, #12]
 8010e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5e:	4605      	mov	r5, r0
 8010e60:	0710      	lsls	r0, r2, #28
 8010e62:	460c      	mov	r4, r1
 8010e64:	d458      	bmi.n	8010f18 <__sflush_r+0xc0>
 8010e66:	684b      	ldr	r3, [r1, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	dc05      	bgt.n	8010e78 <__sflush_r+0x20>
 8010e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	dc02      	bgt.n	8010e78 <__sflush_r+0x20>
 8010e72:	2000      	movs	r0, #0
 8010e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e7a:	2e00      	cmp	r6, #0
 8010e7c:	d0f9      	beq.n	8010e72 <__sflush_r+0x1a>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e84:	682f      	ldr	r7, [r5, #0]
 8010e86:	6a21      	ldr	r1, [r4, #32]
 8010e88:	602b      	str	r3, [r5, #0]
 8010e8a:	d032      	beq.n	8010ef2 <__sflush_r+0x9a>
 8010e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	075a      	lsls	r2, r3, #29
 8010e92:	d505      	bpl.n	8010ea0 <__sflush_r+0x48>
 8010e94:	6863      	ldr	r3, [r4, #4]
 8010e96:	1ac0      	subs	r0, r0, r3
 8010e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e9a:	b10b      	cbz	r3, 8010ea0 <__sflush_r+0x48>
 8010e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e9e:	1ac0      	subs	r0, r0, r3
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ea6:	6a21      	ldr	r1, [r4, #32]
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	47b0      	blx	r6
 8010eac:	1c43      	adds	r3, r0, #1
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	d106      	bne.n	8010ec0 <__sflush_r+0x68>
 8010eb2:	6829      	ldr	r1, [r5, #0]
 8010eb4:	291d      	cmp	r1, #29
 8010eb6:	d848      	bhi.n	8010f4a <__sflush_r+0xf2>
 8010eb8:	4a29      	ldr	r2, [pc, #164]	; (8010f60 <__sflush_r+0x108>)
 8010eba:	40ca      	lsrs	r2, r1
 8010ebc:	07d6      	lsls	r6, r2, #31
 8010ebe:	d544      	bpl.n	8010f4a <__sflush_r+0xf2>
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	6062      	str	r2, [r4, #4]
 8010ec4:	04d9      	lsls	r1, r3, #19
 8010ec6:	6922      	ldr	r2, [r4, #16]
 8010ec8:	6022      	str	r2, [r4, #0]
 8010eca:	d504      	bpl.n	8010ed6 <__sflush_r+0x7e>
 8010ecc:	1c42      	adds	r2, r0, #1
 8010ece:	d101      	bne.n	8010ed4 <__sflush_r+0x7c>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	b903      	cbnz	r3, 8010ed6 <__sflush_r+0x7e>
 8010ed4:	6560      	str	r0, [r4, #84]	; 0x54
 8010ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ed8:	602f      	str	r7, [r5, #0]
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d0c9      	beq.n	8010e72 <__sflush_r+0x1a>
 8010ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ee2:	4299      	cmp	r1, r3
 8010ee4:	d002      	beq.n	8010eec <__sflush_r+0x94>
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7fe fb92 	bl	800f610 <_free_r>
 8010eec:	2000      	movs	r0, #0
 8010eee:	6360      	str	r0, [r4, #52]	; 0x34
 8010ef0:	e7c0      	b.n	8010e74 <__sflush_r+0x1c>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	47b0      	blx	r6
 8010ef8:	1c41      	adds	r1, r0, #1
 8010efa:	d1c8      	bne.n	8010e8e <__sflush_r+0x36>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d0c5      	beq.n	8010e8e <__sflush_r+0x36>
 8010f02:	2b1d      	cmp	r3, #29
 8010f04:	d001      	beq.n	8010f0a <__sflush_r+0xb2>
 8010f06:	2b16      	cmp	r3, #22
 8010f08:	d101      	bne.n	8010f0e <__sflush_r+0xb6>
 8010f0a:	602f      	str	r7, [r5, #0]
 8010f0c:	e7b1      	b.n	8010e72 <__sflush_r+0x1a>
 8010f0e:	89a3      	ldrh	r3, [r4, #12]
 8010f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f14:	81a3      	strh	r3, [r4, #12]
 8010f16:	e7ad      	b.n	8010e74 <__sflush_r+0x1c>
 8010f18:	690f      	ldr	r7, [r1, #16]
 8010f1a:	2f00      	cmp	r7, #0
 8010f1c:	d0a9      	beq.n	8010e72 <__sflush_r+0x1a>
 8010f1e:	0793      	lsls	r3, r2, #30
 8010f20:	680e      	ldr	r6, [r1, #0]
 8010f22:	bf08      	it	eq
 8010f24:	694b      	ldreq	r3, [r1, #20]
 8010f26:	600f      	str	r7, [r1, #0]
 8010f28:	bf18      	it	ne
 8010f2a:	2300      	movne	r3, #0
 8010f2c:	eba6 0807 	sub.w	r8, r6, r7
 8010f30:	608b      	str	r3, [r1, #8]
 8010f32:	f1b8 0f00 	cmp.w	r8, #0
 8010f36:	dd9c      	ble.n	8010e72 <__sflush_r+0x1a>
 8010f38:	4643      	mov	r3, r8
 8010f3a:	463a      	mov	r2, r7
 8010f3c:	6a21      	ldr	r1, [r4, #32]
 8010f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f40:	4628      	mov	r0, r5
 8010f42:	47b0      	blx	r6
 8010f44:	2800      	cmp	r0, #0
 8010f46:	dc06      	bgt.n	8010f56 <__sflush_r+0xfe>
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	f04f 30ff 	mov.w	r0, #4294967295
 8010f54:	e78e      	b.n	8010e74 <__sflush_r+0x1c>
 8010f56:	4407      	add	r7, r0
 8010f58:	eba8 0800 	sub.w	r8, r8, r0
 8010f5c:	e7e9      	b.n	8010f32 <__sflush_r+0xda>
 8010f5e:	bf00      	nop
 8010f60:	20400001 	.word	0x20400001

08010f64 <_fflush_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	690b      	ldr	r3, [r1, #16]
 8010f68:	4605      	mov	r5, r0
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	b1db      	cbz	r3, 8010fa6 <_fflush_r+0x42>
 8010f6e:	b118      	cbz	r0, 8010f78 <_fflush_r+0x14>
 8010f70:	6983      	ldr	r3, [r0, #24]
 8010f72:	b90b      	cbnz	r3, 8010f78 <_fflush_r+0x14>
 8010f74:	f000 f860 	bl	8011038 <__sinit>
 8010f78:	4b0c      	ldr	r3, [pc, #48]	; (8010fac <_fflush_r+0x48>)
 8010f7a:	429c      	cmp	r4, r3
 8010f7c:	d109      	bne.n	8010f92 <_fflush_r+0x2e>
 8010f7e:	686c      	ldr	r4, [r5, #4]
 8010f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f84:	b17b      	cbz	r3, 8010fa6 <_fflush_r+0x42>
 8010f86:	4621      	mov	r1, r4
 8010f88:	4628      	mov	r0, r5
 8010f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f8e:	f7ff bf63 	b.w	8010e58 <__sflush_r>
 8010f92:	4b07      	ldr	r3, [pc, #28]	; (8010fb0 <_fflush_r+0x4c>)
 8010f94:	429c      	cmp	r4, r3
 8010f96:	d101      	bne.n	8010f9c <_fflush_r+0x38>
 8010f98:	68ac      	ldr	r4, [r5, #8]
 8010f9a:	e7f1      	b.n	8010f80 <_fflush_r+0x1c>
 8010f9c:	4b05      	ldr	r3, [pc, #20]	; (8010fb4 <_fflush_r+0x50>)
 8010f9e:	429c      	cmp	r4, r3
 8010fa0:	bf08      	it	eq
 8010fa2:	68ec      	ldreq	r4, [r5, #12]
 8010fa4:	e7ec      	b.n	8010f80 <_fflush_r+0x1c>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	bd38      	pop	{r3, r4, r5, pc}
 8010faa:	bf00      	nop
 8010fac:	080d525c 	.word	0x080d525c
 8010fb0:	080d527c 	.word	0x080d527c
 8010fb4:	080d523c 	.word	0x080d523c

08010fb8 <std>:
 8010fb8:	2300      	movs	r3, #0
 8010fba:	b510      	push	{r4, lr}
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8010fc2:	6083      	str	r3, [r0, #8]
 8010fc4:	8181      	strh	r1, [r0, #12]
 8010fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8010fc8:	81c2      	strh	r2, [r0, #14]
 8010fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fce:	6183      	str	r3, [r0, #24]
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	2208      	movs	r2, #8
 8010fd4:	305c      	adds	r0, #92	; 0x5c
 8010fd6:	f7fe fb13 	bl	800f600 <memset>
 8010fda:	4b05      	ldr	r3, [pc, #20]	; (8010ff0 <std+0x38>)
 8010fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8010fde:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <std+0x3c>)
 8010fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010fe2:	4b05      	ldr	r3, [pc, #20]	; (8010ff8 <std+0x40>)
 8010fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010fe6:	4b05      	ldr	r3, [pc, #20]	; (8010ffc <std+0x44>)
 8010fe8:	6224      	str	r4, [r4, #32]
 8010fea:	6323      	str	r3, [r4, #48]	; 0x30
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	bf00      	nop
 8010ff0:	08011ad5 	.word	0x08011ad5
 8010ff4:	08011af7 	.word	0x08011af7
 8010ff8:	08011b2f 	.word	0x08011b2f
 8010ffc:	08011b53 	.word	0x08011b53

08011000 <_cleanup_r>:
 8011000:	4901      	ldr	r1, [pc, #4]	; (8011008 <_cleanup_r+0x8>)
 8011002:	f000 b885 	b.w	8011110 <_fwalk_reent>
 8011006:	bf00      	nop
 8011008:	08010f65 	.word	0x08010f65

0801100c <__sfmoreglue>:
 801100c:	b570      	push	{r4, r5, r6, lr}
 801100e:	1e4a      	subs	r2, r1, #1
 8011010:	2568      	movs	r5, #104	; 0x68
 8011012:	4355      	muls	r5, r2
 8011014:	460e      	mov	r6, r1
 8011016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801101a:	f7fe fb47 	bl	800f6ac <_malloc_r>
 801101e:	4604      	mov	r4, r0
 8011020:	b140      	cbz	r0, 8011034 <__sfmoreglue+0x28>
 8011022:	2100      	movs	r1, #0
 8011024:	e9c0 1600 	strd	r1, r6, [r0]
 8011028:	300c      	adds	r0, #12
 801102a:	60a0      	str	r0, [r4, #8]
 801102c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011030:	f7fe fae6 	bl	800f600 <memset>
 8011034:	4620      	mov	r0, r4
 8011036:	bd70      	pop	{r4, r5, r6, pc}

08011038 <__sinit>:
 8011038:	6983      	ldr	r3, [r0, #24]
 801103a:	b510      	push	{r4, lr}
 801103c:	4604      	mov	r4, r0
 801103e:	bb33      	cbnz	r3, 801108e <__sinit+0x56>
 8011040:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011044:	6503      	str	r3, [r0, #80]	; 0x50
 8011046:	4b12      	ldr	r3, [pc, #72]	; (8011090 <__sinit+0x58>)
 8011048:	4a12      	ldr	r2, [pc, #72]	; (8011094 <__sinit+0x5c>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6282      	str	r2, [r0, #40]	; 0x28
 801104e:	4298      	cmp	r0, r3
 8011050:	bf04      	itt	eq
 8011052:	2301      	moveq	r3, #1
 8011054:	6183      	streq	r3, [r0, #24]
 8011056:	f000 f81f 	bl	8011098 <__sfp>
 801105a:	6060      	str	r0, [r4, #4]
 801105c:	4620      	mov	r0, r4
 801105e:	f000 f81b 	bl	8011098 <__sfp>
 8011062:	60a0      	str	r0, [r4, #8]
 8011064:	4620      	mov	r0, r4
 8011066:	f000 f817 	bl	8011098 <__sfp>
 801106a:	2200      	movs	r2, #0
 801106c:	60e0      	str	r0, [r4, #12]
 801106e:	2104      	movs	r1, #4
 8011070:	6860      	ldr	r0, [r4, #4]
 8011072:	f7ff ffa1 	bl	8010fb8 <std>
 8011076:	2201      	movs	r2, #1
 8011078:	2109      	movs	r1, #9
 801107a:	68a0      	ldr	r0, [r4, #8]
 801107c:	f7ff ff9c 	bl	8010fb8 <std>
 8011080:	2202      	movs	r2, #2
 8011082:	2112      	movs	r1, #18
 8011084:	68e0      	ldr	r0, [r4, #12]
 8011086:	f7ff ff97 	bl	8010fb8 <std>
 801108a:	2301      	movs	r3, #1
 801108c:	61a3      	str	r3, [r4, #24]
 801108e:	bd10      	pop	{r4, pc}
 8011090:	080d51f4 	.word	0x080d51f4
 8011094:	08011001 	.word	0x08011001

08011098 <__sfp>:
 8011098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109a:	4b1b      	ldr	r3, [pc, #108]	; (8011108 <__sfp+0x70>)
 801109c:	681e      	ldr	r6, [r3, #0]
 801109e:	69b3      	ldr	r3, [r6, #24]
 80110a0:	4607      	mov	r7, r0
 80110a2:	b913      	cbnz	r3, 80110aa <__sfp+0x12>
 80110a4:	4630      	mov	r0, r6
 80110a6:	f7ff ffc7 	bl	8011038 <__sinit>
 80110aa:	3648      	adds	r6, #72	; 0x48
 80110ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	d503      	bpl.n	80110bc <__sfp+0x24>
 80110b4:	6833      	ldr	r3, [r6, #0]
 80110b6:	b133      	cbz	r3, 80110c6 <__sfp+0x2e>
 80110b8:	6836      	ldr	r6, [r6, #0]
 80110ba:	e7f7      	b.n	80110ac <__sfp+0x14>
 80110bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110c0:	b16d      	cbz	r5, 80110de <__sfp+0x46>
 80110c2:	3468      	adds	r4, #104	; 0x68
 80110c4:	e7f4      	b.n	80110b0 <__sfp+0x18>
 80110c6:	2104      	movs	r1, #4
 80110c8:	4638      	mov	r0, r7
 80110ca:	f7ff ff9f 	bl	801100c <__sfmoreglue>
 80110ce:	6030      	str	r0, [r6, #0]
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d1f1      	bne.n	80110b8 <__sfp+0x20>
 80110d4:	230c      	movs	r3, #12
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	4604      	mov	r4, r0
 80110da:	4620      	mov	r0, r4
 80110dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110de:	4b0b      	ldr	r3, [pc, #44]	; (801110c <__sfp+0x74>)
 80110e0:	6665      	str	r5, [r4, #100]	; 0x64
 80110e2:	e9c4 5500 	strd	r5, r5, [r4]
 80110e6:	60a5      	str	r5, [r4, #8]
 80110e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80110ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80110f0:	2208      	movs	r2, #8
 80110f2:	4629      	mov	r1, r5
 80110f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110f8:	f7fe fa82 	bl	800f600 <memset>
 80110fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011104:	e7e9      	b.n	80110da <__sfp+0x42>
 8011106:	bf00      	nop
 8011108:	080d51f4 	.word	0x080d51f4
 801110c:	ffff0001 	.word	0xffff0001

08011110 <_fwalk_reent>:
 8011110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011114:	4680      	mov	r8, r0
 8011116:	4689      	mov	r9, r1
 8011118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801111c:	2600      	movs	r6, #0
 801111e:	b914      	cbnz	r4, 8011126 <_fwalk_reent+0x16>
 8011120:	4630      	mov	r0, r6
 8011122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011126:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801112a:	3f01      	subs	r7, #1
 801112c:	d501      	bpl.n	8011132 <_fwalk_reent+0x22>
 801112e:	6824      	ldr	r4, [r4, #0]
 8011130:	e7f5      	b.n	801111e <_fwalk_reent+0xe>
 8011132:	89ab      	ldrh	r3, [r5, #12]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d907      	bls.n	8011148 <_fwalk_reent+0x38>
 8011138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801113c:	3301      	adds	r3, #1
 801113e:	d003      	beq.n	8011148 <_fwalk_reent+0x38>
 8011140:	4629      	mov	r1, r5
 8011142:	4640      	mov	r0, r8
 8011144:	47c8      	blx	r9
 8011146:	4306      	orrs	r6, r0
 8011148:	3568      	adds	r5, #104	; 0x68
 801114a:	e7ee      	b.n	801112a <_fwalk_reent+0x1a>

0801114c <_localeconv_r>:
 801114c:	4b04      	ldr	r3, [pc, #16]	; (8011160 <_localeconv_r+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6a18      	ldr	r0, [r3, #32]
 8011152:	4b04      	ldr	r3, [pc, #16]	; (8011164 <_localeconv_r+0x18>)
 8011154:	2800      	cmp	r0, #0
 8011156:	bf08      	it	eq
 8011158:	4618      	moveq	r0, r3
 801115a:	30f0      	adds	r0, #240	; 0xf0
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	20000714 	.word	0x20000714
 8011164:	20000778 	.word	0x20000778

08011168 <__swhatbuf_r>:
 8011168:	b570      	push	{r4, r5, r6, lr}
 801116a:	460e      	mov	r6, r1
 801116c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011170:	2900      	cmp	r1, #0
 8011172:	b096      	sub	sp, #88	; 0x58
 8011174:	4614      	mov	r4, r2
 8011176:	461d      	mov	r5, r3
 8011178:	da07      	bge.n	801118a <__swhatbuf_r+0x22>
 801117a:	2300      	movs	r3, #0
 801117c:	602b      	str	r3, [r5, #0]
 801117e:	89b3      	ldrh	r3, [r6, #12]
 8011180:	061a      	lsls	r2, r3, #24
 8011182:	d410      	bmi.n	80111a6 <__swhatbuf_r+0x3e>
 8011184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011188:	e00e      	b.n	80111a8 <__swhatbuf_r+0x40>
 801118a:	466a      	mov	r2, sp
 801118c:	f000 fd08 	bl	8011ba0 <_fstat_r>
 8011190:	2800      	cmp	r0, #0
 8011192:	dbf2      	blt.n	801117a <__swhatbuf_r+0x12>
 8011194:	9a01      	ldr	r2, [sp, #4]
 8011196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801119a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801119e:	425a      	negs	r2, r3
 80111a0:	415a      	adcs	r2, r3
 80111a2:	602a      	str	r2, [r5, #0]
 80111a4:	e7ee      	b.n	8011184 <__swhatbuf_r+0x1c>
 80111a6:	2340      	movs	r3, #64	; 0x40
 80111a8:	2000      	movs	r0, #0
 80111aa:	6023      	str	r3, [r4, #0]
 80111ac:	b016      	add	sp, #88	; 0x58
 80111ae:	bd70      	pop	{r4, r5, r6, pc}

080111b0 <__smakebuf_r>:
 80111b0:	898b      	ldrh	r3, [r1, #12]
 80111b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111b4:	079d      	lsls	r5, r3, #30
 80111b6:	4606      	mov	r6, r0
 80111b8:	460c      	mov	r4, r1
 80111ba:	d507      	bpl.n	80111cc <__smakebuf_r+0x1c>
 80111bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	6123      	str	r3, [r4, #16]
 80111c4:	2301      	movs	r3, #1
 80111c6:	6163      	str	r3, [r4, #20]
 80111c8:	b002      	add	sp, #8
 80111ca:	bd70      	pop	{r4, r5, r6, pc}
 80111cc:	ab01      	add	r3, sp, #4
 80111ce:	466a      	mov	r2, sp
 80111d0:	f7ff ffca 	bl	8011168 <__swhatbuf_r>
 80111d4:	9900      	ldr	r1, [sp, #0]
 80111d6:	4605      	mov	r5, r0
 80111d8:	4630      	mov	r0, r6
 80111da:	f7fe fa67 	bl	800f6ac <_malloc_r>
 80111de:	b948      	cbnz	r0, 80111f4 <__smakebuf_r+0x44>
 80111e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e4:	059a      	lsls	r2, r3, #22
 80111e6:	d4ef      	bmi.n	80111c8 <__smakebuf_r+0x18>
 80111e8:	f023 0303 	bic.w	r3, r3, #3
 80111ec:	f043 0302 	orr.w	r3, r3, #2
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	e7e3      	b.n	80111bc <__smakebuf_r+0xc>
 80111f4:	4b0d      	ldr	r3, [pc, #52]	; (801122c <__smakebuf_r+0x7c>)
 80111f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	6020      	str	r0, [r4, #0]
 80111fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	9b00      	ldr	r3, [sp, #0]
 8011204:	6163      	str	r3, [r4, #20]
 8011206:	9b01      	ldr	r3, [sp, #4]
 8011208:	6120      	str	r0, [r4, #16]
 801120a:	b15b      	cbz	r3, 8011224 <__smakebuf_r+0x74>
 801120c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011210:	4630      	mov	r0, r6
 8011212:	f000 fcd7 	bl	8011bc4 <_isatty_r>
 8011216:	b128      	cbz	r0, 8011224 <__smakebuf_r+0x74>
 8011218:	89a3      	ldrh	r3, [r4, #12]
 801121a:	f023 0303 	bic.w	r3, r3, #3
 801121e:	f043 0301 	orr.w	r3, r3, #1
 8011222:	81a3      	strh	r3, [r4, #12]
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	431d      	orrs	r5, r3
 8011228:	81a5      	strh	r5, [r4, #12]
 801122a:	e7cd      	b.n	80111c8 <__smakebuf_r+0x18>
 801122c:	08011001 	.word	0x08011001

08011230 <__malloc_lock>:
 8011230:	4770      	bx	lr

08011232 <__malloc_unlock>:
 8011232:	4770      	bx	lr

08011234 <_Balloc>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011238:	4604      	mov	r4, r0
 801123a:	460e      	mov	r6, r1
 801123c:	b93d      	cbnz	r5, 801124e <_Balloc+0x1a>
 801123e:	2010      	movs	r0, #16
 8011240:	f7fe f9b4 	bl	800f5ac <malloc>
 8011244:	6260      	str	r0, [r4, #36]	; 0x24
 8011246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801124a:	6005      	str	r5, [r0, #0]
 801124c:	60c5      	str	r5, [r0, #12]
 801124e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011250:	68eb      	ldr	r3, [r5, #12]
 8011252:	b183      	cbz	r3, 8011276 <_Balloc+0x42>
 8011254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801125c:	b9b8      	cbnz	r0, 801128e <_Balloc+0x5a>
 801125e:	2101      	movs	r1, #1
 8011260:	fa01 f506 	lsl.w	r5, r1, r6
 8011264:	1d6a      	adds	r2, r5, #5
 8011266:	0092      	lsls	r2, r2, #2
 8011268:	4620      	mov	r0, r4
 801126a:	f000 fabf 	bl	80117ec <_calloc_r>
 801126e:	b160      	cbz	r0, 801128a <_Balloc+0x56>
 8011270:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011274:	e00e      	b.n	8011294 <_Balloc+0x60>
 8011276:	2221      	movs	r2, #33	; 0x21
 8011278:	2104      	movs	r1, #4
 801127a:	4620      	mov	r0, r4
 801127c:	f000 fab6 	bl	80117ec <_calloc_r>
 8011280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011282:	60e8      	str	r0, [r5, #12]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1e4      	bne.n	8011254 <_Balloc+0x20>
 801128a:	2000      	movs	r0, #0
 801128c:	bd70      	pop	{r4, r5, r6, pc}
 801128e:	6802      	ldr	r2, [r0, #0]
 8011290:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011294:	2300      	movs	r3, #0
 8011296:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801129a:	e7f7      	b.n	801128c <_Balloc+0x58>

0801129c <_Bfree>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80112a0:	4606      	mov	r6, r0
 80112a2:	460d      	mov	r5, r1
 80112a4:	b93c      	cbnz	r4, 80112b6 <_Bfree+0x1a>
 80112a6:	2010      	movs	r0, #16
 80112a8:	f7fe f980 	bl	800f5ac <malloc>
 80112ac:	6270      	str	r0, [r6, #36]	; 0x24
 80112ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112b2:	6004      	str	r4, [r0, #0]
 80112b4:	60c4      	str	r4, [r0, #12]
 80112b6:	b13d      	cbz	r5, 80112c8 <_Bfree+0x2c>
 80112b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80112ba:	686a      	ldr	r2, [r5, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112c2:	6029      	str	r1, [r5, #0]
 80112c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80112c8:	bd70      	pop	{r4, r5, r6, pc}

080112ca <__multadd>:
 80112ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ce:	690d      	ldr	r5, [r1, #16]
 80112d0:	461f      	mov	r7, r3
 80112d2:	4606      	mov	r6, r0
 80112d4:	460c      	mov	r4, r1
 80112d6:	f101 0c14 	add.w	ip, r1, #20
 80112da:	2300      	movs	r3, #0
 80112dc:	f8dc 0000 	ldr.w	r0, [ip]
 80112e0:	b281      	uxth	r1, r0
 80112e2:	fb02 7101 	mla	r1, r2, r1, r7
 80112e6:	0c0f      	lsrs	r7, r1, #16
 80112e8:	0c00      	lsrs	r0, r0, #16
 80112ea:	fb02 7000 	mla	r0, r2, r0, r7
 80112ee:	b289      	uxth	r1, r1
 80112f0:	3301      	adds	r3, #1
 80112f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80112f6:	429d      	cmp	r5, r3
 80112f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80112fc:	f84c 1b04 	str.w	r1, [ip], #4
 8011300:	dcec      	bgt.n	80112dc <__multadd+0x12>
 8011302:	b1d7      	cbz	r7, 801133a <__multadd+0x70>
 8011304:	68a3      	ldr	r3, [r4, #8]
 8011306:	42ab      	cmp	r3, r5
 8011308:	dc12      	bgt.n	8011330 <__multadd+0x66>
 801130a:	6861      	ldr	r1, [r4, #4]
 801130c:	4630      	mov	r0, r6
 801130e:	3101      	adds	r1, #1
 8011310:	f7ff ff90 	bl	8011234 <_Balloc>
 8011314:	6922      	ldr	r2, [r4, #16]
 8011316:	3202      	adds	r2, #2
 8011318:	f104 010c 	add.w	r1, r4, #12
 801131c:	4680      	mov	r8, r0
 801131e:	0092      	lsls	r2, r2, #2
 8011320:	300c      	adds	r0, #12
 8011322:	f7fe f962 	bl	800f5ea <memcpy>
 8011326:	4621      	mov	r1, r4
 8011328:	4630      	mov	r0, r6
 801132a:	f7ff ffb7 	bl	801129c <_Bfree>
 801132e:	4644      	mov	r4, r8
 8011330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011334:	3501      	adds	r5, #1
 8011336:	615f      	str	r7, [r3, #20]
 8011338:	6125      	str	r5, [r4, #16]
 801133a:	4620      	mov	r0, r4
 801133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011340 <__hi0bits>:
 8011340:	0c02      	lsrs	r2, r0, #16
 8011342:	0412      	lsls	r2, r2, #16
 8011344:	4603      	mov	r3, r0
 8011346:	b9b2      	cbnz	r2, 8011376 <__hi0bits+0x36>
 8011348:	0403      	lsls	r3, r0, #16
 801134a:	2010      	movs	r0, #16
 801134c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011350:	bf04      	itt	eq
 8011352:	021b      	lsleq	r3, r3, #8
 8011354:	3008      	addeq	r0, #8
 8011356:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801135a:	bf04      	itt	eq
 801135c:	011b      	lsleq	r3, r3, #4
 801135e:	3004      	addeq	r0, #4
 8011360:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011364:	bf04      	itt	eq
 8011366:	009b      	lsleq	r3, r3, #2
 8011368:	3002      	addeq	r0, #2
 801136a:	2b00      	cmp	r3, #0
 801136c:	db06      	blt.n	801137c <__hi0bits+0x3c>
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	d503      	bpl.n	801137a <__hi0bits+0x3a>
 8011372:	3001      	adds	r0, #1
 8011374:	4770      	bx	lr
 8011376:	2000      	movs	r0, #0
 8011378:	e7e8      	b.n	801134c <__hi0bits+0xc>
 801137a:	2020      	movs	r0, #32
 801137c:	4770      	bx	lr

0801137e <__lo0bits>:
 801137e:	6803      	ldr	r3, [r0, #0]
 8011380:	f013 0207 	ands.w	r2, r3, #7
 8011384:	4601      	mov	r1, r0
 8011386:	d00b      	beq.n	80113a0 <__lo0bits+0x22>
 8011388:	07da      	lsls	r2, r3, #31
 801138a:	d423      	bmi.n	80113d4 <__lo0bits+0x56>
 801138c:	0798      	lsls	r0, r3, #30
 801138e:	bf49      	itett	mi
 8011390:	085b      	lsrmi	r3, r3, #1
 8011392:	089b      	lsrpl	r3, r3, #2
 8011394:	2001      	movmi	r0, #1
 8011396:	600b      	strmi	r3, [r1, #0]
 8011398:	bf5c      	itt	pl
 801139a:	600b      	strpl	r3, [r1, #0]
 801139c:	2002      	movpl	r0, #2
 801139e:	4770      	bx	lr
 80113a0:	b298      	uxth	r0, r3
 80113a2:	b9a8      	cbnz	r0, 80113d0 <__lo0bits+0x52>
 80113a4:	0c1b      	lsrs	r3, r3, #16
 80113a6:	2010      	movs	r0, #16
 80113a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113ac:	bf04      	itt	eq
 80113ae:	0a1b      	lsreq	r3, r3, #8
 80113b0:	3008      	addeq	r0, #8
 80113b2:	071a      	lsls	r2, r3, #28
 80113b4:	bf04      	itt	eq
 80113b6:	091b      	lsreq	r3, r3, #4
 80113b8:	3004      	addeq	r0, #4
 80113ba:	079a      	lsls	r2, r3, #30
 80113bc:	bf04      	itt	eq
 80113be:	089b      	lsreq	r3, r3, #2
 80113c0:	3002      	addeq	r0, #2
 80113c2:	07da      	lsls	r2, r3, #31
 80113c4:	d402      	bmi.n	80113cc <__lo0bits+0x4e>
 80113c6:	085b      	lsrs	r3, r3, #1
 80113c8:	d006      	beq.n	80113d8 <__lo0bits+0x5a>
 80113ca:	3001      	adds	r0, #1
 80113cc:	600b      	str	r3, [r1, #0]
 80113ce:	4770      	bx	lr
 80113d0:	4610      	mov	r0, r2
 80113d2:	e7e9      	b.n	80113a8 <__lo0bits+0x2a>
 80113d4:	2000      	movs	r0, #0
 80113d6:	4770      	bx	lr
 80113d8:	2020      	movs	r0, #32
 80113da:	4770      	bx	lr

080113dc <__i2b>:
 80113dc:	b510      	push	{r4, lr}
 80113de:	460c      	mov	r4, r1
 80113e0:	2101      	movs	r1, #1
 80113e2:	f7ff ff27 	bl	8011234 <_Balloc>
 80113e6:	2201      	movs	r2, #1
 80113e8:	6144      	str	r4, [r0, #20]
 80113ea:	6102      	str	r2, [r0, #16]
 80113ec:	bd10      	pop	{r4, pc}

080113ee <__multiply>:
 80113ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f2:	4614      	mov	r4, r2
 80113f4:	690a      	ldr	r2, [r1, #16]
 80113f6:	6923      	ldr	r3, [r4, #16]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	bfb8      	it	lt
 80113fc:	460b      	movlt	r3, r1
 80113fe:	4688      	mov	r8, r1
 8011400:	bfbc      	itt	lt
 8011402:	46a0      	movlt	r8, r4
 8011404:	461c      	movlt	r4, r3
 8011406:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801140a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801140e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011412:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011416:	eb07 0609 	add.w	r6, r7, r9
 801141a:	42b3      	cmp	r3, r6
 801141c:	bfb8      	it	lt
 801141e:	3101      	addlt	r1, #1
 8011420:	f7ff ff08 	bl	8011234 <_Balloc>
 8011424:	f100 0514 	add.w	r5, r0, #20
 8011428:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801142c:	462b      	mov	r3, r5
 801142e:	2200      	movs	r2, #0
 8011430:	4573      	cmp	r3, lr
 8011432:	d316      	bcc.n	8011462 <__multiply+0x74>
 8011434:	f104 0214 	add.w	r2, r4, #20
 8011438:	f108 0114 	add.w	r1, r8, #20
 801143c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011440:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	9b00      	ldr	r3, [sp, #0]
 8011448:	9201      	str	r2, [sp, #4]
 801144a:	4293      	cmp	r3, r2
 801144c:	d80c      	bhi.n	8011468 <__multiply+0x7a>
 801144e:	2e00      	cmp	r6, #0
 8011450:	dd03      	ble.n	801145a <__multiply+0x6c>
 8011452:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011456:	2b00      	cmp	r3, #0
 8011458:	d05d      	beq.n	8011516 <__multiply+0x128>
 801145a:	6106      	str	r6, [r0, #16]
 801145c:	b003      	add	sp, #12
 801145e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011462:	f843 2b04 	str.w	r2, [r3], #4
 8011466:	e7e3      	b.n	8011430 <__multiply+0x42>
 8011468:	f8b2 b000 	ldrh.w	fp, [r2]
 801146c:	f1bb 0f00 	cmp.w	fp, #0
 8011470:	d023      	beq.n	80114ba <__multiply+0xcc>
 8011472:	4689      	mov	r9, r1
 8011474:	46ac      	mov	ip, r5
 8011476:	f04f 0800 	mov.w	r8, #0
 801147a:	f859 4b04 	ldr.w	r4, [r9], #4
 801147e:	f8dc a000 	ldr.w	sl, [ip]
 8011482:	b2a3      	uxth	r3, r4
 8011484:	fa1f fa8a 	uxth.w	sl, sl
 8011488:	fb0b a303 	mla	r3, fp, r3, sl
 801148c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011490:	f8dc 4000 	ldr.w	r4, [ip]
 8011494:	4443      	add	r3, r8
 8011496:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801149a:	fb0b 840a 	mla	r4, fp, sl, r8
 801149e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80114a2:	46e2      	mov	sl, ip
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80114aa:	454f      	cmp	r7, r9
 80114ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80114b0:	f84a 3b04 	str.w	r3, [sl], #4
 80114b4:	d82b      	bhi.n	801150e <__multiply+0x120>
 80114b6:	f8cc 8004 	str.w	r8, [ip, #4]
 80114ba:	9b01      	ldr	r3, [sp, #4]
 80114bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80114c0:	3204      	adds	r2, #4
 80114c2:	f1ba 0f00 	cmp.w	sl, #0
 80114c6:	d020      	beq.n	801150a <__multiply+0x11c>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	4689      	mov	r9, r1
 80114cc:	46a8      	mov	r8, r5
 80114ce:	f04f 0b00 	mov.w	fp, #0
 80114d2:	f8b9 c000 	ldrh.w	ip, [r9]
 80114d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80114da:	fb0a 440c 	mla	r4, sl, ip, r4
 80114de:	445c      	add	r4, fp
 80114e0:	46c4      	mov	ip, r8
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80114e8:	f84c 3b04 	str.w	r3, [ip], #4
 80114ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80114f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80114f4:	0c1b      	lsrs	r3, r3, #16
 80114f6:	fb0a b303 	mla	r3, sl, r3, fp
 80114fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80114fe:	454f      	cmp	r7, r9
 8011500:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011504:	d805      	bhi.n	8011512 <__multiply+0x124>
 8011506:	f8c8 3004 	str.w	r3, [r8, #4]
 801150a:	3504      	adds	r5, #4
 801150c:	e79b      	b.n	8011446 <__multiply+0x58>
 801150e:	46d4      	mov	ip, sl
 8011510:	e7b3      	b.n	801147a <__multiply+0x8c>
 8011512:	46e0      	mov	r8, ip
 8011514:	e7dd      	b.n	80114d2 <__multiply+0xe4>
 8011516:	3e01      	subs	r6, #1
 8011518:	e799      	b.n	801144e <__multiply+0x60>
	...

0801151c <__pow5mult>:
 801151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011520:	4615      	mov	r5, r2
 8011522:	f012 0203 	ands.w	r2, r2, #3
 8011526:	4606      	mov	r6, r0
 8011528:	460f      	mov	r7, r1
 801152a:	d007      	beq.n	801153c <__pow5mult+0x20>
 801152c:	3a01      	subs	r2, #1
 801152e:	4c21      	ldr	r4, [pc, #132]	; (80115b4 <__pow5mult+0x98>)
 8011530:	2300      	movs	r3, #0
 8011532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011536:	f7ff fec8 	bl	80112ca <__multadd>
 801153a:	4607      	mov	r7, r0
 801153c:	10ad      	asrs	r5, r5, #2
 801153e:	d035      	beq.n	80115ac <__pow5mult+0x90>
 8011540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011542:	b93c      	cbnz	r4, 8011554 <__pow5mult+0x38>
 8011544:	2010      	movs	r0, #16
 8011546:	f7fe f831 	bl	800f5ac <malloc>
 801154a:	6270      	str	r0, [r6, #36]	; 0x24
 801154c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011550:	6004      	str	r4, [r0, #0]
 8011552:	60c4      	str	r4, [r0, #12]
 8011554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801155c:	b94c      	cbnz	r4, 8011572 <__pow5mult+0x56>
 801155e:	f240 2171 	movw	r1, #625	; 0x271
 8011562:	4630      	mov	r0, r6
 8011564:	f7ff ff3a 	bl	80113dc <__i2b>
 8011568:	2300      	movs	r3, #0
 801156a:	f8c8 0008 	str.w	r0, [r8, #8]
 801156e:	4604      	mov	r4, r0
 8011570:	6003      	str	r3, [r0, #0]
 8011572:	f04f 0800 	mov.w	r8, #0
 8011576:	07eb      	lsls	r3, r5, #31
 8011578:	d50a      	bpl.n	8011590 <__pow5mult+0x74>
 801157a:	4639      	mov	r1, r7
 801157c:	4622      	mov	r2, r4
 801157e:	4630      	mov	r0, r6
 8011580:	f7ff ff35 	bl	80113ee <__multiply>
 8011584:	4639      	mov	r1, r7
 8011586:	4681      	mov	r9, r0
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff fe87 	bl	801129c <_Bfree>
 801158e:	464f      	mov	r7, r9
 8011590:	106d      	asrs	r5, r5, #1
 8011592:	d00b      	beq.n	80115ac <__pow5mult+0x90>
 8011594:	6820      	ldr	r0, [r4, #0]
 8011596:	b938      	cbnz	r0, 80115a8 <__pow5mult+0x8c>
 8011598:	4622      	mov	r2, r4
 801159a:	4621      	mov	r1, r4
 801159c:	4630      	mov	r0, r6
 801159e:	f7ff ff26 	bl	80113ee <__multiply>
 80115a2:	6020      	str	r0, [r4, #0]
 80115a4:	f8c0 8000 	str.w	r8, [r0]
 80115a8:	4604      	mov	r4, r0
 80115aa:	e7e4      	b.n	8011576 <__pow5mult+0x5a>
 80115ac:	4638      	mov	r0, r7
 80115ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115b2:	bf00      	nop
 80115b4:	080d5390 	.word	0x080d5390

080115b8 <__lshift>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	460c      	mov	r4, r1
 80115be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	6849      	ldr	r1, [r1, #4]
 80115c6:	eb0a 0903 	add.w	r9, sl, r3
 80115ca:	68a3      	ldr	r3, [r4, #8]
 80115cc:	4607      	mov	r7, r0
 80115ce:	4616      	mov	r6, r2
 80115d0:	f109 0501 	add.w	r5, r9, #1
 80115d4:	42ab      	cmp	r3, r5
 80115d6:	db32      	blt.n	801163e <__lshift+0x86>
 80115d8:	4638      	mov	r0, r7
 80115da:	f7ff fe2b 	bl	8011234 <_Balloc>
 80115de:	2300      	movs	r3, #0
 80115e0:	4680      	mov	r8, r0
 80115e2:	f100 0114 	add.w	r1, r0, #20
 80115e6:	461a      	mov	r2, r3
 80115e8:	4553      	cmp	r3, sl
 80115ea:	db2b      	blt.n	8011644 <__lshift+0x8c>
 80115ec:	6920      	ldr	r0, [r4, #16]
 80115ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115f2:	f104 0314 	add.w	r3, r4, #20
 80115f6:	f016 021f 	ands.w	r2, r6, #31
 80115fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011602:	d025      	beq.n	8011650 <__lshift+0x98>
 8011604:	f1c2 0e20 	rsb	lr, r2, #32
 8011608:	2000      	movs	r0, #0
 801160a:	681e      	ldr	r6, [r3, #0]
 801160c:	468a      	mov	sl, r1
 801160e:	4096      	lsls	r6, r2
 8011610:	4330      	orrs	r0, r6
 8011612:	f84a 0b04 	str.w	r0, [sl], #4
 8011616:	f853 0b04 	ldr.w	r0, [r3], #4
 801161a:	459c      	cmp	ip, r3
 801161c:	fa20 f00e 	lsr.w	r0, r0, lr
 8011620:	d814      	bhi.n	801164c <__lshift+0x94>
 8011622:	6048      	str	r0, [r1, #4]
 8011624:	b108      	cbz	r0, 801162a <__lshift+0x72>
 8011626:	f109 0502 	add.w	r5, r9, #2
 801162a:	3d01      	subs	r5, #1
 801162c:	4638      	mov	r0, r7
 801162e:	f8c8 5010 	str.w	r5, [r8, #16]
 8011632:	4621      	mov	r1, r4
 8011634:	f7ff fe32 	bl	801129c <_Bfree>
 8011638:	4640      	mov	r0, r8
 801163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163e:	3101      	adds	r1, #1
 8011640:	005b      	lsls	r3, r3, #1
 8011642:	e7c7      	b.n	80115d4 <__lshift+0x1c>
 8011644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011648:	3301      	adds	r3, #1
 801164a:	e7cd      	b.n	80115e8 <__lshift+0x30>
 801164c:	4651      	mov	r1, sl
 801164e:	e7dc      	b.n	801160a <__lshift+0x52>
 8011650:	3904      	subs	r1, #4
 8011652:	f853 2b04 	ldr.w	r2, [r3], #4
 8011656:	f841 2f04 	str.w	r2, [r1, #4]!
 801165a:	459c      	cmp	ip, r3
 801165c:	d8f9      	bhi.n	8011652 <__lshift+0x9a>
 801165e:	e7e4      	b.n	801162a <__lshift+0x72>

08011660 <__mcmp>:
 8011660:	6903      	ldr	r3, [r0, #16]
 8011662:	690a      	ldr	r2, [r1, #16]
 8011664:	1a9b      	subs	r3, r3, r2
 8011666:	b530      	push	{r4, r5, lr}
 8011668:	d10c      	bne.n	8011684 <__mcmp+0x24>
 801166a:	0092      	lsls	r2, r2, #2
 801166c:	3014      	adds	r0, #20
 801166e:	3114      	adds	r1, #20
 8011670:	1884      	adds	r4, r0, r2
 8011672:	4411      	add	r1, r2
 8011674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801167c:	4295      	cmp	r5, r2
 801167e:	d003      	beq.n	8011688 <__mcmp+0x28>
 8011680:	d305      	bcc.n	801168e <__mcmp+0x2e>
 8011682:	2301      	movs	r3, #1
 8011684:	4618      	mov	r0, r3
 8011686:	bd30      	pop	{r4, r5, pc}
 8011688:	42a0      	cmp	r0, r4
 801168a:	d3f3      	bcc.n	8011674 <__mcmp+0x14>
 801168c:	e7fa      	b.n	8011684 <__mcmp+0x24>
 801168e:	f04f 33ff 	mov.w	r3, #4294967295
 8011692:	e7f7      	b.n	8011684 <__mcmp+0x24>

08011694 <__mdiff>:
 8011694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011698:	460d      	mov	r5, r1
 801169a:	4607      	mov	r7, r0
 801169c:	4611      	mov	r1, r2
 801169e:	4628      	mov	r0, r5
 80116a0:	4614      	mov	r4, r2
 80116a2:	f7ff ffdd 	bl	8011660 <__mcmp>
 80116a6:	1e06      	subs	r6, r0, #0
 80116a8:	d108      	bne.n	80116bc <__mdiff+0x28>
 80116aa:	4631      	mov	r1, r6
 80116ac:	4638      	mov	r0, r7
 80116ae:	f7ff fdc1 	bl	8011234 <_Balloc>
 80116b2:	2301      	movs	r3, #1
 80116b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80116b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116bc:	bfa4      	itt	ge
 80116be:	4623      	movge	r3, r4
 80116c0:	462c      	movge	r4, r5
 80116c2:	4638      	mov	r0, r7
 80116c4:	6861      	ldr	r1, [r4, #4]
 80116c6:	bfa6      	itte	ge
 80116c8:	461d      	movge	r5, r3
 80116ca:	2600      	movge	r6, #0
 80116cc:	2601      	movlt	r6, #1
 80116ce:	f7ff fdb1 	bl	8011234 <_Balloc>
 80116d2:	692b      	ldr	r3, [r5, #16]
 80116d4:	60c6      	str	r6, [r0, #12]
 80116d6:	6926      	ldr	r6, [r4, #16]
 80116d8:	f105 0914 	add.w	r9, r5, #20
 80116dc:	f104 0214 	add.w	r2, r4, #20
 80116e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80116e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80116e8:	f100 0514 	add.w	r5, r0, #20
 80116ec:	f04f 0e00 	mov.w	lr, #0
 80116f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80116f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80116f8:	fa1e f18a 	uxtah	r1, lr, sl
 80116fc:	b2a3      	uxth	r3, r4
 80116fe:	1ac9      	subs	r1, r1, r3
 8011700:	0c23      	lsrs	r3, r4, #16
 8011702:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011706:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801170a:	b289      	uxth	r1, r1
 801170c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011710:	45c8      	cmp	r8, r9
 8011712:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011716:	4694      	mov	ip, r2
 8011718:	f845 3b04 	str.w	r3, [r5], #4
 801171c:	d8e8      	bhi.n	80116f0 <__mdiff+0x5c>
 801171e:	45bc      	cmp	ip, r7
 8011720:	d304      	bcc.n	801172c <__mdiff+0x98>
 8011722:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011726:	b183      	cbz	r3, 801174a <__mdiff+0xb6>
 8011728:	6106      	str	r6, [r0, #16]
 801172a:	e7c5      	b.n	80116b8 <__mdiff+0x24>
 801172c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011730:	fa1e f381 	uxtah	r3, lr, r1
 8011734:	141a      	asrs	r2, r3, #16
 8011736:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801173a:	b29b      	uxth	r3, r3
 801173c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011740:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011744:	f845 3b04 	str.w	r3, [r5], #4
 8011748:	e7e9      	b.n	801171e <__mdiff+0x8a>
 801174a:	3e01      	subs	r6, #1
 801174c:	e7e9      	b.n	8011722 <__mdiff+0x8e>

0801174e <__d2b>:
 801174e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011752:	460e      	mov	r6, r1
 8011754:	2101      	movs	r1, #1
 8011756:	ec59 8b10 	vmov	r8, r9, d0
 801175a:	4615      	mov	r5, r2
 801175c:	f7ff fd6a 	bl	8011234 <_Balloc>
 8011760:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011764:	4607      	mov	r7, r0
 8011766:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801176a:	bb34      	cbnz	r4, 80117ba <__d2b+0x6c>
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	f1b8 0300 	subs.w	r3, r8, #0
 8011772:	d027      	beq.n	80117c4 <__d2b+0x76>
 8011774:	a802      	add	r0, sp, #8
 8011776:	f840 3d08 	str.w	r3, [r0, #-8]!
 801177a:	f7ff fe00 	bl	801137e <__lo0bits>
 801177e:	9900      	ldr	r1, [sp, #0]
 8011780:	b1f0      	cbz	r0, 80117c0 <__d2b+0x72>
 8011782:	9a01      	ldr	r2, [sp, #4]
 8011784:	f1c0 0320 	rsb	r3, r0, #32
 8011788:	fa02 f303 	lsl.w	r3, r2, r3
 801178c:	430b      	orrs	r3, r1
 801178e:	40c2      	lsrs	r2, r0
 8011790:	617b      	str	r3, [r7, #20]
 8011792:	9201      	str	r2, [sp, #4]
 8011794:	9b01      	ldr	r3, [sp, #4]
 8011796:	61bb      	str	r3, [r7, #24]
 8011798:	2b00      	cmp	r3, #0
 801179a:	bf14      	ite	ne
 801179c:	2102      	movne	r1, #2
 801179e:	2101      	moveq	r1, #1
 80117a0:	6139      	str	r1, [r7, #16]
 80117a2:	b1c4      	cbz	r4, 80117d6 <__d2b+0x88>
 80117a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80117a8:	4404      	add	r4, r0
 80117aa:	6034      	str	r4, [r6, #0]
 80117ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80117b0:	6028      	str	r0, [r5, #0]
 80117b2:	4638      	mov	r0, r7
 80117b4:	b003      	add	sp, #12
 80117b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117be:	e7d5      	b.n	801176c <__d2b+0x1e>
 80117c0:	6179      	str	r1, [r7, #20]
 80117c2:	e7e7      	b.n	8011794 <__d2b+0x46>
 80117c4:	a801      	add	r0, sp, #4
 80117c6:	f7ff fdda 	bl	801137e <__lo0bits>
 80117ca:	9b01      	ldr	r3, [sp, #4]
 80117cc:	617b      	str	r3, [r7, #20]
 80117ce:	2101      	movs	r1, #1
 80117d0:	6139      	str	r1, [r7, #16]
 80117d2:	3020      	adds	r0, #32
 80117d4:	e7e5      	b.n	80117a2 <__d2b+0x54>
 80117d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80117da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80117de:	6030      	str	r0, [r6, #0]
 80117e0:	6918      	ldr	r0, [r3, #16]
 80117e2:	f7ff fdad 	bl	8011340 <__hi0bits>
 80117e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80117ea:	e7e1      	b.n	80117b0 <__d2b+0x62>

080117ec <_calloc_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	fb02 f401 	mul.w	r4, r2, r1
 80117f2:	4621      	mov	r1, r4
 80117f4:	f7fd ff5a 	bl	800f6ac <_malloc_r>
 80117f8:	4605      	mov	r5, r0
 80117fa:	b118      	cbz	r0, 8011804 <_calloc_r+0x18>
 80117fc:	4622      	mov	r2, r4
 80117fe:	2100      	movs	r1, #0
 8011800:	f7fd fefe 	bl	800f600 <memset>
 8011804:	4628      	mov	r0, r5
 8011806:	bd38      	pop	{r3, r4, r5, pc}

08011808 <_realloc_r>:
 8011808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801180a:	4607      	mov	r7, r0
 801180c:	4614      	mov	r4, r2
 801180e:	460e      	mov	r6, r1
 8011810:	b921      	cbnz	r1, 801181c <_realloc_r+0x14>
 8011812:	4611      	mov	r1, r2
 8011814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011818:	f7fd bf48 	b.w	800f6ac <_malloc_r>
 801181c:	b922      	cbnz	r2, 8011828 <_realloc_r+0x20>
 801181e:	f7fd fef7 	bl	800f610 <_free_r>
 8011822:	4625      	mov	r5, r4
 8011824:	4628      	mov	r0, r5
 8011826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011828:	f000 fa00 	bl	8011c2c <_malloc_usable_size_r>
 801182c:	42a0      	cmp	r0, r4
 801182e:	d20f      	bcs.n	8011850 <_realloc_r+0x48>
 8011830:	4621      	mov	r1, r4
 8011832:	4638      	mov	r0, r7
 8011834:	f7fd ff3a 	bl	800f6ac <_malloc_r>
 8011838:	4605      	mov	r5, r0
 801183a:	2800      	cmp	r0, #0
 801183c:	d0f2      	beq.n	8011824 <_realloc_r+0x1c>
 801183e:	4631      	mov	r1, r6
 8011840:	4622      	mov	r2, r4
 8011842:	f7fd fed2 	bl	800f5ea <memcpy>
 8011846:	4631      	mov	r1, r6
 8011848:	4638      	mov	r0, r7
 801184a:	f7fd fee1 	bl	800f610 <_free_r>
 801184e:	e7e9      	b.n	8011824 <_realloc_r+0x1c>
 8011850:	4635      	mov	r5, r6
 8011852:	e7e7      	b.n	8011824 <_realloc_r+0x1c>

08011854 <__sfputc_r>:
 8011854:	6893      	ldr	r3, [r2, #8]
 8011856:	3b01      	subs	r3, #1
 8011858:	2b00      	cmp	r3, #0
 801185a:	b410      	push	{r4}
 801185c:	6093      	str	r3, [r2, #8]
 801185e:	da08      	bge.n	8011872 <__sfputc_r+0x1e>
 8011860:	6994      	ldr	r4, [r2, #24]
 8011862:	42a3      	cmp	r3, r4
 8011864:	db01      	blt.n	801186a <__sfputc_r+0x16>
 8011866:	290a      	cmp	r1, #10
 8011868:	d103      	bne.n	8011872 <__sfputc_r+0x1e>
 801186a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801186e:	f7fe bc59 	b.w	8010124 <__swbuf_r>
 8011872:	6813      	ldr	r3, [r2, #0]
 8011874:	1c58      	adds	r0, r3, #1
 8011876:	6010      	str	r0, [r2, #0]
 8011878:	7019      	strb	r1, [r3, #0]
 801187a:	4608      	mov	r0, r1
 801187c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011880:	4770      	bx	lr

08011882 <__sfputs_r>:
 8011882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011884:	4606      	mov	r6, r0
 8011886:	460f      	mov	r7, r1
 8011888:	4614      	mov	r4, r2
 801188a:	18d5      	adds	r5, r2, r3
 801188c:	42ac      	cmp	r4, r5
 801188e:	d101      	bne.n	8011894 <__sfputs_r+0x12>
 8011890:	2000      	movs	r0, #0
 8011892:	e007      	b.n	80118a4 <__sfputs_r+0x22>
 8011894:	463a      	mov	r2, r7
 8011896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189a:	4630      	mov	r0, r6
 801189c:	f7ff ffda 	bl	8011854 <__sfputc_r>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d1f3      	bne.n	801188c <__sfputs_r+0xa>
 80118a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118a8 <_vfiprintf_r>:
 80118a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ac:	460c      	mov	r4, r1
 80118ae:	b09d      	sub	sp, #116	; 0x74
 80118b0:	4617      	mov	r7, r2
 80118b2:	461d      	mov	r5, r3
 80118b4:	4606      	mov	r6, r0
 80118b6:	b118      	cbz	r0, 80118c0 <_vfiprintf_r+0x18>
 80118b8:	6983      	ldr	r3, [r0, #24]
 80118ba:	b90b      	cbnz	r3, 80118c0 <_vfiprintf_r+0x18>
 80118bc:	f7ff fbbc 	bl	8011038 <__sinit>
 80118c0:	4b7c      	ldr	r3, [pc, #496]	; (8011ab4 <_vfiprintf_r+0x20c>)
 80118c2:	429c      	cmp	r4, r3
 80118c4:	d158      	bne.n	8011978 <_vfiprintf_r+0xd0>
 80118c6:	6874      	ldr	r4, [r6, #4]
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	0718      	lsls	r0, r3, #28
 80118cc:	d55e      	bpl.n	801198c <_vfiprintf_r+0xe4>
 80118ce:	6923      	ldr	r3, [r4, #16]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d05b      	beq.n	801198c <_vfiprintf_r+0xe4>
 80118d4:	2300      	movs	r3, #0
 80118d6:	9309      	str	r3, [sp, #36]	; 0x24
 80118d8:	2320      	movs	r3, #32
 80118da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118de:	2330      	movs	r3, #48	; 0x30
 80118e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118e4:	9503      	str	r5, [sp, #12]
 80118e6:	f04f 0b01 	mov.w	fp, #1
 80118ea:	46b8      	mov	r8, r7
 80118ec:	4645      	mov	r5, r8
 80118ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118f2:	b10b      	cbz	r3, 80118f8 <_vfiprintf_r+0x50>
 80118f4:	2b25      	cmp	r3, #37	; 0x25
 80118f6:	d154      	bne.n	80119a2 <_vfiprintf_r+0xfa>
 80118f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80118fc:	d00b      	beq.n	8011916 <_vfiprintf_r+0x6e>
 80118fe:	4653      	mov	r3, sl
 8011900:	463a      	mov	r2, r7
 8011902:	4621      	mov	r1, r4
 8011904:	4630      	mov	r0, r6
 8011906:	f7ff ffbc 	bl	8011882 <__sfputs_r>
 801190a:	3001      	adds	r0, #1
 801190c:	f000 80c2 	beq.w	8011a94 <_vfiprintf_r+0x1ec>
 8011910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011912:	4453      	add	r3, sl
 8011914:	9309      	str	r3, [sp, #36]	; 0x24
 8011916:	f898 3000 	ldrb.w	r3, [r8]
 801191a:	2b00      	cmp	r3, #0
 801191c:	f000 80ba 	beq.w	8011a94 <_vfiprintf_r+0x1ec>
 8011920:	2300      	movs	r3, #0
 8011922:	f04f 32ff 	mov.w	r2, #4294967295
 8011926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801192a:	9304      	str	r3, [sp, #16]
 801192c:	9307      	str	r3, [sp, #28]
 801192e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011932:	931a      	str	r3, [sp, #104]	; 0x68
 8011934:	46a8      	mov	r8, r5
 8011936:	2205      	movs	r2, #5
 8011938:	f818 1b01 	ldrb.w	r1, [r8], #1
 801193c:	485e      	ldr	r0, [pc, #376]	; (8011ab8 <_vfiprintf_r+0x210>)
 801193e:	f7f4 fab7 	bl	8005eb0 <memchr>
 8011942:	9b04      	ldr	r3, [sp, #16]
 8011944:	bb78      	cbnz	r0, 80119a6 <_vfiprintf_r+0xfe>
 8011946:	06d9      	lsls	r1, r3, #27
 8011948:	bf44      	itt	mi
 801194a:	2220      	movmi	r2, #32
 801194c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011950:	071a      	lsls	r2, r3, #28
 8011952:	bf44      	itt	mi
 8011954:	222b      	movmi	r2, #43	; 0x2b
 8011956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801195a:	782a      	ldrb	r2, [r5, #0]
 801195c:	2a2a      	cmp	r2, #42	; 0x2a
 801195e:	d02a      	beq.n	80119b6 <_vfiprintf_r+0x10e>
 8011960:	9a07      	ldr	r2, [sp, #28]
 8011962:	46a8      	mov	r8, r5
 8011964:	2000      	movs	r0, #0
 8011966:	250a      	movs	r5, #10
 8011968:	4641      	mov	r1, r8
 801196a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801196e:	3b30      	subs	r3, #48	; 0x30
 8011970:	2b09      	cmp	r3, #9
 8011972:	d969      	bls.n	8011a48 <_vfiprintf_r+0x1a0>
 8011974:	b360      	cbz	r0, 80119d0 <_vfiprintf_r+0x128>
 8011976:	e024      	b.n	80119c2 <_vfiprintf_r+0x11a>
 8011978:	4b50      	ldr	r3, [pc, #320]	; (8011abc <_vfiprintf_r+0x214>)
 801197a:	429c      	cmp	r4, r3
 801197c:	d101      	bne.n	8011982 <_vfiprintf_r+0xda>
 801197e:	68b4      	ldr	r4, [r6, #8]
 8011980:	e7a2      	b.n	80118c8 <_vfiprintf_r+0x20>
 8011982:	4b4f      	ldr	r3, [pc, #316]	; (8011ac0 <_vfiprintf_r+0x218>)
 8011984:	429c      	cmp	r4, r3
 8011986:	bf08      	it	eq
 8011988:	68f4      	ldreq	r4, [r6, #12]
 801198a:	e79d      	b.n	80118c8 <_vfiprintf_r+0x20>
 801198c:	4621      	mov	r1, r4
 801198e:	4630      	mov	r0, r6
 8011990:	f7fe fc1a 	bl	80101c8 <__swsetup_r>
 8011994:	2800      	cmp	r0, #0
 8011996:	d09d      	beq.n	80118d4 <_vfiprintf_r+0x2c>
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	b01d      	add	sp, #116	; 0x74
 801199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a2:	46a8      	mov	r8, r5
 80119a4:	e7a2      	b.n	80118ec <_vfiprintf_r+0x44>
 80119a6:	4a44      	ldr	r2, [pc, #272]	; (8011ab8 <_vfiprintf_r+0x210>)
 80119a8:	1a80      	subs	r0, r0, r2
 80119aa:	fa0b f000 	lsl.w	r0, fp, r0
 80119ae:	4318      	orrs	r0, r3
 80119b0:	9004      	str	r0, [sp, #16]
 80119b2:	4645      	mov	r5, r8
 80119b4:	e7be      	b.n	8011934 <_vfiprintf_r+0x8c>
 80119b6:	9a03      	ldr	r2, [sp, #12]
 80119b8:	1d11      	adds	r1, r2, #4
 80119ba:	6812      	ldr	r2, [r2, #0]
 80119bc:	9103      	str	r1, [sp, #12]
 80119be:	2a00      	cmp	r2, #0
 80119c0:	db01      	blt.n	80119c6 <_vfiprintf_r+0x11e>
 80119c2:	9207      	str	r2, [sp, #28]
 80119c4:	e004      	b.n	80119d0 <_vfiprintf_r+0x128>
 80119c6:	4252      	negs	r2, r2
 80119c8:	f043 0302 	orr.w	r3, r3, #2
 80119cc:	9207      	str	r2, [sp, #28]
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	f898 3000 	ldrb.w	r3, [r8]
 80119d4:	2b2e      	cmp	r3, #46	; 0x2e
 80119d6:	d10e      	bne.n	80119f6 <_vfiprintf_r+0x14e>
 80119d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80119dc:	2b2a      	cmp	r3, #42	; 0x2a
 80119de:	d138      	bne.n	8011a52 <_vfiprintf_r+0x1aa>
 80119e0:	9b03      	ldr	r3, [sp, #12]
 80119e2:	1d1a      	adds	r2, r3, #4
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	9203      	str	r2, [sp, #12]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	bfb8      	it	lt
 80119ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80119f0:	f108 0802 	add.w	r8, r8, #2
 80119f4:	9305      	str	r3, [sp, #20]
 80119f6:	4d33      	ldr	r5, [pc, #204]	; (8011ac4 <_vfiprintf_r+0x21c>)
 80119f8:	f898 1000 	ldrb.w	r1, [r8]
 80119fc:	2203      	movs	r2, #3
 80119fe:	4628      	mov	r0, r5
 8011a00:	f7f4 fa56 	bl	8005eb0 <memchr>
 8011a04:	b140      	cbz	r0, 8011a18 <_vfiprintf_r+0x170>
 8011a06:	2340      	movs	r3, #64	; 0x40
 8011a08:	1b40      	subs	r0, r0, r5
 8011a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8011a0e:	9b04      	ldr	r3, [sp, #16]
 8011a10:	4303      	orrs	r3, r0
 8011a12:	f108 0801 	add.w	r8, r8, #1
 8011a16:	9304      	str	r3, [sp, #16]
 8011a18:	f898 1000 	ldrb.w	r1, [r8]
 8011a1c:	482a      	ldr	r0, [pc, #168]	; (8011ac8 <_vfiprintf_r+0x220>)
 8011a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a22:	2206      	movs	r2, #6
 8011a24:	f108 0701 	add.w	r7, r8, #1
 8011a28:	f7f4 fa42 	bl	8005eb0 <memchr>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d037      	beq.n	8011aa0 <_vfiprintf_r+0x1f8>
 8011a30:	4b26      	ldr	r3, [pc, #152]	; (8011acc <_vfiprintf_r+0x224>)
 8011a32:	bb1b      	cbnz	r3, 8011a7c <_vfiprintf_r+0x1d4>
 8011a34:	9b03      	ldr	r3, [sp, #12]
 8011a36:	3307      	adds	r3, #7
 8011a38:	f023 0307 	bic.w	r3, r3, #7
 8011a3c:	3308      	adds	r3, #8
 8011a3e:	9303      	str	r3, [sp, #12]
 8011a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a42:	444b      	add	r3, r9
 8011a44:	9309      	str	r3, [sp, #36]	; 0x24
 8011a46:	e750      	b.n	80118ea <_vfiprintf_r+0x42>
 8011a48:	fb05 3202 	mla	r2, r5, r2, r3
 8011a4c:	2001      	movs	r0, #1
 8011a4e:	4688      	mov	r8, r1
 8011a50:	e78a      	b.n	8011968 <_vfiprintf_r+0xc0>
 8011a52:	2300      	movs	r3, #0
 8011a54:	f108 0801 	add.w	r8, r8, #1
 8011a58:	9305      	str	r3, [sp, #20]
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	250a      	movs	r5, #10
 8011a5e:	4640      	mov	r0, r8
 8011a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a64:	3a30      	subs	r2, #48	; 0x30
 8011a66:	2a09      	cmp	r2, #9
 8011a68:	d903      	bls.n	8011a72 <_vfiprintf_r+0x1ca>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d0c3      	beq.n	80119f6 <_vfiprintf_r+0x14e>
 8011a6e:	9105      	str	r1, [sp, #20]
 8011a70:	e7c1      	b.n	80119f6 <_vfiprintf_r+0x14e>
 8011a72:	fb05 2101 	mla	r1, r5, r1, r2
 8011a76:	2301      	movs	r3, #1
 8011a78:	4680      	mov	r8, r0
 8011a7a:	e7f0      	b.n	8011a5e <_vfiprintf_r+0x1b6>
 8011a7c:	ab03      	add	r3, sp, #12
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	4622      	mov	r2, r4
 8011a82:	4b13      	ldr	r3, [pc, #76]	; (8011ad0 <_vfiprintf_r+0x228>)
 8011a84:	a904      	add	r1, sp, #16
 8011a86:	4630      	mov	r0, r6
 8011a88:	f7fd fef2 	bl	800f870 <_printf_float>
 8011a8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011a90:	4681      	mov	r9, r0
 8011a92:	d1d5      	bne.n	8011a40 <_vfiprintf_r+0x198>
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	065b      	lsls	r3, r3, #25
 8011a98:	f53f af7e 	bmi.w	8011998 <_vfiprintf_r+0xf0>
 8011a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a9e:	e77d      	b.n	801199c <_vfiprintf_r+0xf4>
 8011aa0:	ab03      	add	r3, sp, #12
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	; (8011ad0 <_vfiprintf_r+0x228>)
 8011aa8:	a904      	add	r1, sp, #16
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f7fe f982 	bl	800fdb4 <_printf_i>
 8011ab0:	e7ec      	b.n	8011a8c <_vfiprintf_r+0x1e4>
 8011ab2:	bf00      	nop
 8011ab4:	080d525c 	.word	0x080d525c
 8011ab8:	080d539c 	.word	0x080d539c
 8011abc:	080d527c 	.word	0x080d527c
 8011ac0:	080d523c 	.word	0x080d523c
 8011ac4:	080d53a2 	.word	0x080d53a2
 8011ac8:	080d53a6 	.word	0x080d53a6
 8011acc:	0800f871 	.word	0x0800f871
 8011ad0:	08011883 	.word	0x08011883

08011ad4 <__sread>:
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	460c      	mov	r4, r1
 8011ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011adc:	f000 f8ae 	bl	8011c3c <_read_r>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	bfab      	itete	ge
 8011ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ae8:	181b      	addge	r3, r3, r0
 8011aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aee:	bfac      	ite	ge
 8011af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011af2:	81a3      	strhlt	r3, [r4, #12]
 8011af4:	bd10      	pop	{r4, pc}

08011af6 <__swrite>:
 8011af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011afa:	461f      	mov	r7, r3
 8011afc:	898b      	ldrh	r3, [r1, #12]
 8011afe:	05db      	lsls	r3, r3, #23
 8011b00:	4605      	mov	r5, r0
 8011b02:	460c      	mov	r4, r1
 8011b04:	4616      	mov	r6, r2
 8011b06:	d505      	bpl.n	8011b14 <__swrite+0x1e>
 8011b08:	2302      	movs	r3, #2
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b10:	f000 f868 	bl	8011be4 <_lseek_r>
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b1e:	81a3      	strh	r3, [r4, #12]
 8011b20:	4632      	mov	r2, r6
 8011b22:	463b      	mov	r3, r7
 8011b24:	4628      	mov	r0, r5
 8011b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2a:	f000 b817 	b.w	8011b5c <_write_r>

08011b2e <__sseek>:
 8011b2e:	b510      	push	{r4, lr}
 8011b30:	460c      	mov	r4, r1
 8011b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b36:	f000 f855 	bl	8011be4 <_lseek_r>
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	89a3      	ldrh	r3, [r4, #12]
 8011b3e:	bf15      	itete	ne
 8011b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b4a:	81a3      	strheq	r3, [r4, #12]
 8011b4c:	bf18      	it	ne
 8011b4e:	81a3      	strhne	r3, [r4, #12]
 8011b50:	bd10      	pop	{r4, pc}

08011b52 <__sclose>:
 8011b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b56:	f000 b813 	b.w	8011b80 <_close_r>
	...

08011b5c <_write_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4c07      	ldr	r4, [pc, #28]	; (8011b7c <_write_r+0x20>)
 8011b60:	4605      	mov	r5, r0
 8011b62:	4608      	mov	r0, r1
 8011b64:	4611      	mov	r1, r2
 8011b66:	2200      	movs	r2, #0
 8011b68:	6022      	str	r2, [r4, #0]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	f7f8 fcb0 	bl	800a4d0 <_write>
 8011b70:	1c43      	adds	r3, r0, #1
 8011b72:	d102      	bne.n	8011b7a <_write_r+0x1e>
 8011b74:	6823      	ldr	r3, [r4, #0]
 8011b76:	b103      	cbz	r3, 8011b7a <_write_r+0x1e>
 8011b78:	602b      	str	r3, [r5, #0]
 8011b7a:	bd38      	pop	{r3, r4, r5, pc}
 8011b7c:	200070b8 	.word	0x200070b8

08011b80 <_close_r>:
 8011b80:	b538      	push	{r3, r4, r5, lr}
 8011b82:	4c06      	ldr	r4, [pc, #24]	; (8011b9c <_close_r+0x1c>)
 8011b84:	2300      	movs	r3, #0
 8011b86:	4605      	mov	r5, r0
 8011b88:	4608      	mov	r0, r1
 8011b8a:	6023      	str	r3, [r4, #0]
 8011b8c:	f7fd fc1f 	bl	800f3ce <_close>
 8011b90:	1c43      	adds	r3, r0, #1
 8011b92:	d102      	bne.n	8011b9a <_close_r+0x1a>
 8011b94:	6823      	ldr	r3, [r4, #0]
 8011b96:	b103      	cbz	r3, 8011b9a <_close_r+0x1a>
 8011b98:	602b      	str	r3, [r5, #0]
 8011b9a:	bd38      	pop	{r3, r4, r5, pc}
 8011b9c:	200070b8 	.word	0x200070b8

08011ba0 <_fstat_r>:
 8011ba0:	b538      	push	{r3, r4, r5, lr}
 8011ba2:	4c07      	ldr	r4, [pc, #28]	; (8011bc0 <_fstat_r+0x20>)
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	4605      	mov	r5, r0
 8011ba8:	4608      	mov	r0, r1
 8011baa:	4611      	mov	r1, r2
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	f7fd fc1a 	bl	800f3e6 <_fstat>
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	d102      	bne.n	8011bbc <_fstat_r+0x1c>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	b103      	cbz	r3, 8011bbc <_fstat_r+0x1c>
 8011bba:	602b      	str	r3, [r5, #0]
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
 8011bbe:	bf00      	nop
 8011bc0:	200070b8 	.word	0x200070b8

08011bc4 <_isatty_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	4c06      	ldr	r4, [pc, #24]	; (8011be0 <_isatty_r+0x1c>)
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4605      	mov	r5, r0
 8011bcc:	4608      	mov	r0, r1
 8011bce:	6023      	str	r3, [r4, #0]
 8011bd0:	f7fd fc19 	bl	800f406 <_isatty>
 8011bd4:	1c43      	adds	r3, r0, #1
 8011bd6:	d102      	bne.n	8011bde <_isatty_r+0x1a>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	b103      	cbz	r3, 8011bde <_isatty_r+0x1a>
 8011bdc:	602b      	str	r3, [r5, #0]
 8011bde:	bd38      	pop	{r3, r4, r5, pc}
 8011be0:	200070b8 	.word	0x200070b8

08011be4 <_lseek_r>:
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	4c07      	ldr	r4, [pc, #28]	; (8011c04 <_lseek_r+0x20>)
 8011be8:	4605      	mov	r5, r0
 8011bea:	4608      	mov	r0, r1
 8011bec:	4611      	mov	r1, r2
 8011bee:	2200      	movs	r2, #0
 8011bf0:	6022      	str	r2, [r4, #0]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	f7fd fc12 	bl	800f41c <_lseek>
 8011bf8:	1c43      	adds	r3, r0, #1
 8011bfa:	d102      	bne.n	8011c02 <_lseek_r+0x1e>
 8011bfc:	6823      	ldr	r3, [r4, #0]
 8011bfe:	b103      	cbz	r3, 8011c02 <_lseek_r+0x1e>
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	bd38      	pop	{r3, r4, r5, pc}
 8011c04:	200070b8 	.word	0x200070b8

08011c08 <__ascii_mbtowc>:
 8011c08:	b082      	sub	sp, #8
 8011c0a:	b901      	cbnz	r1, 8011c0e <__ascii_mbtowc+0x6>
 8011c0c:	a901      	add	r1, sp, #4
 8011c0e:	b142      	cbz	r2, 8011c22 <__ascii_mbtowc+0x1a>
 8011c10:	b14b      	cbz	r3, 8011c26 <__ascii_mbtowc+0x1e>
 8011c12:	7813      	ldrb	r3, [r2, #0]
 8011c14:	600b      	str	r3, [r1, #0]
 8011c16:	7812      	ldrb	r2, [r2, #0]
 8011c18:	1c10      	adds	r0, r2, #0
 8011c1a:	bf18      	it	ne
 8011c1c:	2001      	movne	r0, #1
 8011c1e:	b002      	add	sp, #8
 8011c20:	4770      	bx	lr
 8011c22:	4610      	mov	r0, r2
 8011c24:	e7fb      	b.n	8011c1e <__ascii_mbtowc+0x16>
 8011c26:	f06f 0001 	mvn.w	r0, #1
 8011c2a:	e7f8      	b.n	8011c1e <__ascii_mbtowc+0x16>

08011c2c <_malloc_usable_size_r>:
 8011c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c30:	1f18      	subs	r0, r3, #4
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	bfbc      	itt	lt
 8011c36:	580b      	ldrlt	r3, [r1, r0]
 8011c38:	18c0      	addlt	r0, r0, r3
 8011c3a:	4770      	bx	lr

08011c3c <_read_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4c07      	ldr	r4, [pc, #28]	; (8011c5c <_read_r+0x20>)
 8011c40:	4605      	mov	r5, r0
 8011c42:	4608      	mov	r0, r1
 8011c44:	4611      	mov	r1, r2
 8011c46:	2200      	movs	r2, #0
 8011c48:	6022      	str	r2, [r4, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f7fd fba2 	bl	800f394 <_read>
 8011c50:	1c43      	adds	r3, r0, #1
 8011c52:	d102      	bne.n	8011c5a <_read_r+0x1e>
 8011c54:	6823      	ldr	r3, [r4, #0]
 8011c56:	b103      	cbz	r3, 8011c5a <_read_r+0x1e>
 8011c58:	602b      	str	r3, [r5, #0]
 8011c5a:	bd38      	pop	{r3, r4, r5, pc}
 8011c5c:	200070b8 	.word	0x200070b8

08011c60 <__ascii_wctomb>:
 8011c60:	b149      	cbz	r1, 8011c76 <__ascii_wctomb+0x16>
 8011c62:	2aff      	cmp	r2, #255	; 0xff
 8011c64:	bf85      	ittet	hi
 8011c66:	238a      	movhi	r3, #138	; 0x8a
 8011c68:	6003      	strhi	r3, [r0, #0]
 8011c6a:	700a      	strbls	r2, [r1, #0]
 8011c6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011c70:	bf98      	it	ls
 8011c72:	2001      	movls	r0, #1
 8011c74:	4770      	bx	lr
 8011c76:	4608      	mov	r0, r1
 8011c78:	4770      	bx	lr
	...

08011c7c <expf>:
 8011c7c:	ee10 2a10 	vmov	r2, s0
 8011c80:	f240 412a 	movw	r1, #1066	; 0x42a
 8011c84:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8011c88:	428b      	cmp	r3, r1
 8011c8a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 8011c8e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8011c92:	d92e      	bls.n	8011cf2 <expf+0x76>
 8011c94:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8011c98:	d061      	beq.n	8011d5e <expf+0xe2>
 8011c9a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8011c9e:	d304      	bcc.n	8011caa <expf+0x2e>
 8011ca0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011ca4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8011ca8:	4770      	bx	lr
 8011caa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011d64 <expf+0xe8>
 8011cae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb6:	dd04      	ble.n	8011cc2 <expf+0x46>
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8011cbe:	f000 ba91 	b.w	80121e4 <__math_oflowf>
 8011cc2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011d68 <expf+0xec>
 8011cc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cce:	d504      	bpl.n	8011cda <expf+0x5e>
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8011cd6:	f000 ba79 	b.w	80121cc <__math_uflowf>
 8011cda:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011d6c <expf+0xf0>
 8011cde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce6:	d504      	bpl.n	8011cf2 <expf+0x76>
 8011ce8:	2000      	movs	r0, #0
 8011cea:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8011cee:	f000 ba73 	b.w	80121d8 <__math_may_uflowf>
 8011cf2:	491f      	ldr	r1, [pc, #124]	; (8011d70 <expf+0xf4>)
 8011cf4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cf8:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 8011cfc:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8011d00:	eeb0 4b47 	vmov.f64	d4, d7
 8011d04:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011d08:	ec55 4b14 	vmov	r4, r5, d4
 8011d0c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8011d10:	f004 021f 	and.w	r2, r4, #31
 8011d14:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011d18:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011d1c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 8011d20:	e9d2 4500 	ldrd	r4, r5, [r2]
 8011d24:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011d28:	ee14 0a10 	vmov	r0, s8
 8011d2c:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 8011d30:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 8011d34:	f04f 0b00 	mov.w	fp, #0
 8011d38:	eb1b 0204 	adds.w	r2, fp, r4
 8011d3c:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 8011d40:	eb4c 0305 	adc.w	r3, ip, r5
 8011d44:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011d48:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011d4c:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011d50:	ec43 2b17 	vmov	d7, r2, r3
 8011d54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011d5c:	e7a2      	b.n	8011ca4 <expf+0x28>
 8011d5e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8011d74 <expf+0xf8>
 8011d62:	e79f      	b.n	8011ca4 <expf+0x28>
 8011d64:	42b17217 	.word	0x42b17217
 8011d68:	c2cff1b4 	.word	0xc2cff1b4
 8011d6c:	c2ce8ecf 	.word	0xc2ce8ecf
 8011d70:	080d54b8 	.word	0x080d54b8
 8011d74:	00000000 	.word	0x00000000

08011d78 <logf>:
 8011d78:	ee10 3a10 	vmov	r3, s0
 8011d7c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011d80:	b410      	push	{r4}
 8011d82:	d057      	beq.n	8011e34 <logf+0xbc>
 8011d84:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8011d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8011d8c:	d31a      	bcc.n	8011dc4 <logf+0x4c>
 8011d8e:	005a      	lsls	r2, r3, #1
 8011d90:	d104      	bne.n	8011d9c <logf+0x24>
 8011d92:	2001      	movs	r0, #1
 8011d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d98:	f000 ba2a 	b.w	80121f0 <__math_divzerof>
 8011d9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011da0:	d045      	beq.n	8011e2e <logf+0xb6>
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	db02      	blt.n	8011dac <logf+0x34>
 8011da6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011daa:	d303      	bcc.n	8011db4 <logf+0x3c>
 8011dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011db0:	f000 ba2e 	b.w	8012210 <__math_invalidf>
 8011db4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011e3c <logf+0xc4>
 8011db8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011dbc:	ee10 3a10 	vmov	r3, s0
 8011dc0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8011dc4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8011dc8:	491d      	ldr	r1, [pc, #116]	; (8011e40 <logf+0xc8>)
 8011dca:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011dce:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8011dd2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8011dd6:	0dd4      	lsrs	r4, r2, #23
 8011dd8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8011ddc:	05e4      	lsls	r4, r4, #23
 8011dde:	ed90 5b00 	vldr	d5, [r0]
 8011de2:	1b1b      	subs	r3, r3, r4
 8011de4:	ee07 3a90 	vmov	s15, r3
 8011de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011dec:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011df0:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8011df4:	ee26 3b06 	vmul.f64	d3, d6, d6
 8011df8:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8011dfc:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011e00:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8011e04:	15d2      	asrs	r2, r2, #23
 8011e06:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 8011e0a:	eea5 7b03 	vfma.f64	d7, d5, d3
 8011e0e:	eeb0 5b47 	vmov.f64	d5, d7
 8011e12:	ed90 0b02 	vldr	d0, [r0, #8]
 8011e16:	ee07 2a90 	vmov	s15, r2
 8011e1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e1e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8011e22:	ee30 0b06 	vadd.f64	d0, d0, d6
 8011e26:	eea3 0b05 	vfma.f64	d0, d3, d5
 8011e2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011e44 <logf+0xcc>
 8011e38:	e7f9      	b.n	8011e2e <logf+0xb6>
 8011e3a:	bf00      	nop
 8011e3c:	4b000000 	.word	0x4b000000
 8011e40:	080d5600 	.word	0x080d5600
 8011e44:	00000000 	.word	0x00000000

08011e48 <checkint>:
 8011e48:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011e4c:	2b7e      	cmp	r3, #126	; 0x7e
 8011e4e:	dd10      	ble.n	8011e72 <checkint+0x2a>
 8011e50:	2b96      	cmp	r3, #150	; 0x96
 8011e52:	dc0c      	bgt.n	8011e6e <checkint+0x26>
 8011e54:	2201      	movs	r2, #1
 8011e56:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e5e:	1e5a      	subs	r2, r3, #1
 8011e60:	4202      	tst	r2, r0
 8011e62:	d106      	bne.n	8011e72 <checkint+0x2a>
 8011e64:	4203      	tst	r3, r0
 8011e66:	bf0c      	ite	eq
 8011e68:	2002      	moveq	r0, #2
 8011e6a:	2001      	movne	r0, #1
 8011e6c:	4770      	bx	lr
 8011e6e:	2002      	movs	r0, #2
 8011e70:	4770      	bx	lr
 8011e72:	2000      	movs	r0, #0
 8011e74:	4770      	bx	lr
	...

08011e78 <powf>:
 8011e78:	ee10 1a10 	vmov	r1, s0
 8011e7c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8011e80:	ee10 4a90 	vmov	r4, s1
 8011e84:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8011e88:	0062      	lsls	r2, r4, #1
 8011e8a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011e8e:	eef0 4a60 	vmov.f32	s9, s1
 8011e92:	f102 30ff 	add.w	r0, r2, #4294967295
 8011e96:	4b92      	ldr	r3, [pc, #584]	; (80120e0 <powf+0x268>)
 8011e98:	d255      	bcs.n	8011f46 <powf+0xce>
 8011e9a:	4298      	cmp	r0, r3
 8011e9c:	d855      	bhi.n	8011f4a <powf+0xd2>
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8011ea4:	4a8f      	ldr	r2, [pc, #572]	; (80120e4 <powf+0x26c>)
 8011ea6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8011eaa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8011eae:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8011eb2:	0ddb      	lsrs	r3, r3, #23
 8011eb4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8011eb8:	05db      	lsls	r3, r3, #23
 8011eba:	ed94 6b00 	vldr	d6, [r4]
 8011ebe:	1ac9      	subs	r1, r1, r3
 8011ec0:	ee07 1a90 	vmov	s15, r1
 8011ec4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8011ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011ecc:	eea6 2b07 	vfma.f64	d2, d6, d7
 8011ed0:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8011ed4:	ee22 6b02 	vmul.f64	d6, d2, d2
 8011ed8:	eea2 7b05 	vfma.f64	d7, d2, d5
 8011edc:	15db      	asrs	r3, r3, #23
 8011ede:	ed94 5b02 	vldr	d5, [r4, #8]
 8011ee2:	ee00 3a10 	vmov	s0, r3
 8011ee6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011eea:	ee30 0b05 	vadd.f64	d0, d0, d5
 8011eee:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8011ef2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8011ef6:	eea2 0b05 	vfma.f64	d0, d2, d5
 8011efa:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8011efe:	eea2 5b03 	vfma.f64	d5, d2, d3
 8011f02:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011f06:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011f0a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011f0e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8011f12:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011f16:	ee10 3a90 	vmov	r3, s1
 8011f1a:	2500      	movs	r5, #0
 8011f1c:	0bda      	lsrs	r2, r3, #15
 8011f1e:	2300      	movs	r3, #0
 8011f20:	b292      	uxth	r2, r2
 8011f22:	f248 04be 	movw	r4, #32958	; 0x80be
 8011f26:	429d      	cmp	r5, r3
 8011f28:	bf08      	it	eq
 8011f2a:	4294      	cmpeq	r4, r2
 8011f2c:	f080 8094 	bcs.w	8012058 <powf+0x1e0>
 8011f30:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80120c8 <powf+0x250>
 8011f34:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3c:	dd76      	ble.n	801202c <powf+0x1b4>
 8011f3e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011f42:	f000 b94f 	b.w	80121e4 <__math_oflowf>
 8011f46:	4298      	cmp	r0, r3
 8011f48:	d92d      	bls.n	8011fa6 <powf+0x12e>
 8011f4a:	b952      	cbnz	r2, 8011f62 <powf+0xea>
 8011f4c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8011f56:	f240 80ae 	bls.w	80120b6 <powf+0x23e>
 8011f5a:	ee30 0a24 	vadd.f32	s0, s0, s9
 8011f5e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8011f62:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011f66:	d105      	bne.n	8011f74 <powf+0xfc>
 8011f68:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011f6c:	0064      	lsls	r4, r4, #1
 8011f6e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011f72:	e7f0      	b.n	8011f56 <powf+0xde>
 8011f74:	004b      	lsls	r3, r1, #1
 8011f76:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8011f7a:	d8ee      	bhi.n	8011f5a <powf+0xe2>
 8011f7c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011f80:	d1eb      	bne.n	8011f5a <powf+0xe2>
 8011f82:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011f86:	f000 8096 	beq.w	80120b6 <powf+0x23e>
 8011f8a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011f8e:	ea6f 0404 	mvn.w	r4, r4
 8011f92:	bf34      	ite	cc
 8011f94:	2300      	movcc	r3, #0
 8011f96:	2301      	movcs	r3, #1
 8011f98:	0fe4      	lsrs	r4, r4, #31
 8011f9a:	42a3      	cmp	r3, r4
 8011f9c:	f040 808e 	bne.w	80120bc <powf+0x244>
 8011fa0:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8011fa4:	e7db      	b.n	8011f5e <powf+0xe6>
 8011fa6:	004d      	lsls	r5, r1, #1
 8011fa8:	1e6a      	subs	r2, r5, #1
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d91b      	bls.n	8011fe6 <powf+0x16e>
 8011fae:	2900      	cmp	r1, #0
 8011fb0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011fb4:	da0e      	bge.n	8011fd4 <powf+0x15c>
 8011fb6:	ee10 0a90 	vmov	r0, s1
 8011fba:	f7ff ff45 	bl	8011e48 <checkint>
 8011fbe:	2801      	cmp	r0, #1
 8011fc0:	d108      	bne.n	8011fd4 <powf+0x15c>
 8011fc2:	eeb1 0a40 	vneg.f32	s0, s0
 8011fc6:	b93d      	cbnz	r5, 8011fd8 <powf+0x160>
 8011fc8:	2c00      	cmp	r4, #0
 8011fca:	dac8      	bge.n	8011f5e <powf+0xe6>
 8011fcc:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011fd0:	f000 b90e 	b.w	80121f0 <__math_divzerof>
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	e7f6      	b.n	8011fc6 <powf+0x14e>
 8011fd8:	2c00      	cmp	r4, #0
 8011fda:	dac0      	bge.n	8011f5e <powf+0xe6>
 8011fdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011fe0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011fe4:	e7bb      	b.n	8011f5e <powf+0xe6>
 8011fe6:	2900      	cmp	r1, #0
 8011fe8:	da1e      	bge.n	8012028 <powf+0x1b0>
 8011fea:	ee10 0a90 	vmov	r0, s1
 8011fee:	f7ff ff2b 	bl	8011e48 <checkint>
 8011ff2:	b918      	cbnz	r0, 8011ffc <powf+0x184>
 8011ff4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8011ff8:	f000 b90a 	b.w	8012210 <__math_invalidf>
 8011ffc:	2801      	cmp	r0, #1
 8011ffe:	bf0c      	ite	eq
 8012000:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8012004:	2000      	movne	r0, #0
 8012006:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801200a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801200e:	f4bf af47 	bcs.w	8011ea0 <powf+0x28>
 8012012:	eddf 0a35 	vldr	s1, [pc, #212]	; 80120e8 <powf+0x270>
 8012016:	ee20 0a20 	vmul.f32	s0, s0, s1
 801201a:	ee10 3a10 	vmov	r3, s0
 801201e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012022:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8012026:	e73b      	b.n	8011ea0 <powf+0x28>
 8012028:	2000      	movs	r0, #0
 801202a:	e7ee      	b.n	801200a <powf+0x192>
 801202c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80120d0 <powf+0x258>
 8012030:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012038:	d803      	bhi.n	8012042 <powf+0x1ca>
 801203a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 801203e:	f000 b8c5 	b.w	80121cc <__math_uflowf>
 8012042:	ed9f 7b25 	vldr	d7, [pc, #148]	; 80120d8 <powf+0x260>
 8012046:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204e:	d503      	bpl.n	8012058 <powf+0x1e0>
 8012050:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8012054:	f000 b8c0 	b.w	80121d8 <__math_may_uflowf>
 8012058:	4924      	ldr	r1, [pc, #144]	; (80120ec <powf+0x274>)
 801205a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 801205e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8012062:	ec55 4b16 	vmov	r4, r5, d6
 8012066:	ee36 7b47 	vsub.f64	d7, d6, d7
 801206a:	f004 021f 	and.w	r2, r4, #31
 801206e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012072:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8012076:	ee30 0b47 	vsub.f64	d0, d0, d7
 801207a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801207e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8012082:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012086:	1824      	adds	r4, r4, r0
 8012088:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801208c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8012090:	2000      	movs	r0, #0
 8012092:	1982      	adds	r2, r0, r6
 8012094:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8012098:	eb41 0307 	adc.w	r3, r1, r7
 801209c:	eea0 6b05 	vfma.f64	d6, d0, d5
 80120a0:	ee20 0b00 	vmul.f64	d0, d0, d0
 80120a4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80120a8:	ec43 2b16 	vmov	d6, r2, r3
 80120ac:	ee27 0b06 	vmul.f64	d0, d7, d6
 80120b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80120b4:	e753      	b.n	8011f5e <powf+0xe6>
 80120b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80120ba:	e750      	b.n	8011f5e <powf+0xe6>
 80120bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80120f0 <powf+0x278>
 80120c0:	e74d      	b.n	8011f5e <powf+0xe6>
 80120c2:	bf00      	nop
 80120c4:	f3af 8000 	nop.w
 80120c8:	ffd1d571 	.word	0xffd1d571
 80120cc:	405fffff 	.word	0x405fffff
 80120d0:	00000000 	.word	0x00000000
 80120d4:	c062c000 	.word	0xc062c000
 80120d8:	00000000 	.word	0x00000000
 80120dc:	c062a000 	.word	0xc062a000
 80120e0:	fefffffe 	.word	0xfefffffe
 80120e4:	080d5720 	.word	0x080d5720
 80120e8:	4b000000 	.word	0x4b000000
 80120ec:	080d54b8 	.word	0x080d54b8
 80120f0:	00000000 	.word	0x00000000

080120f4 <tanhf>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	ee10 4a10 	vmov	r4, s0
 80120fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80120fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012102:	ed2d 8b02 	vpush	{d8}
 8012106:	eef0 7a40 	vmov.f32	s15, s0
 801210a:	db0c      	blt.n	8012126 <tanhf+0x32>
 801210c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012110:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012114:	2c00      	cmp	r4, #0
 8012116:	bfac      	ite	ge
 8012118:	ee30 0a07 	vaddge.f32	s0, s0, s14
 801211c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8012120:	ecbd 8b02 	vpop	{d8}
 8012124:	bd10      	pop	{r4, pc}
 8012126:	4a1b      	ldr	r2, [pc, #108]	; (8012194 <tanhf+0xa0>)
 8012128:	4293      	cmp	r3, r2
 801212a:	dc30      	bgt.n	801218e <tanhf+0x9a>
 801212c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8012130:	da06      	bge.n	8012140 <tanhf+0x4c>
 8012132:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012136:	ee37 0a80 	vadd.f32	s0, s15, s0
 801213a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801213e:	e7ef      	b.n	8012120 <tanhf+0x2c>
 8012140:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012144:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8012148:	db12      	blt.n	8012170 <tanhf+0x7c>
 801214a:	f000 f99b 	bl	8012484 <fabsf>
 801214e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012152:	f000 f86d 	bl	8012230 <expm1f>
 8012156:	ee30 0a08 	vadd.f32	s0, s0, s16
 801215a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801215e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012162:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012166:	2c00      	cmp	r4, #0
 8012168:	bfb8      	it	lt
 801216a:	eeb1 0a40 	vneglt.f32	s0, s0
 801216e:	e7d7      	b.n	8012120 <tanhf+0x2c>
 8012170:	f000 f988 	bl	8012484 <fabsf>
 8012174:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8012178:	ee20 0a27 	vmul.f32	s0, s0, s15
 801217c:	f000 f858 	bl	8012230 <expm1f>
 8012180:	ee70 7a08 	vadd.f32	s15, s0, s16
 8012184:	eeb1 7a40 	vneg.f32	s14, s0
 8012188:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801218c:	e7eb      	b.n	8012166 <tanhf+0x72>
 801218e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012192:	e7e8      	b.n	8012166 <tanhf+0x72>
 8012194:	41afffff 	.word	0x41afffff

08012198 <with_errnof>:
 8012198:	b510      	push	{r4, lr}
 801219a:	ed2d 8b02 	vpush	{d8}
 801219e:	eeb0 8a40 	vmov.f32	s16, s0
 80121a2:	4604      	mov	r4, r0
 80121a4:	f7fd f9d8 	bl	800f558 <__errno>
 80121a8:	eeb0 0a48 	vmov.f32	s0, s16
 80121ac:	ecbd 8b02 	vpop	{d8}
 80121b0:	6004      	str	r4, [r0, #0]
 80121b2:	bd10      	pop	{r4, pc}

080121b4 <xflowf>:
 80121b4:	b130      	cbz	r0, 80121c4 <xflowf+0x10>
 80121b6:	eef1 7a40 	vneg.f32	s15, s0
 80121ba:	2022      	movs	r0, #34	; 0x22
 80121bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80121c0:	f7ff bfea 	b.w	8012198 <with_errnof>
 80121c4:	eef0 7a40 	vmov.f32	s15, s0
 80121c8:	e7f7      	b.n	80121ba <xflowf+0x6>
	...

080121cc <__math_uflowf>:
 80121cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121d4 <__math_uflowf+0x8>
 80121d0:	f7ff bff0 	b.w	80121b4 <xflowf>
 80121d4:	10000000 	.word	0x10000000

080121d8 <__math_may_uflowf>:
 80121d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121e0 <__math_may_uflowf+0x8>
 80121dc:	f7ff bfea 	b.w	80121b4 <xflowf>
 80121e0:	1a200000 	.word	0x1a200000

080121e4 <__math_oflowf>:
 80121e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121ec <__math_oflowf+0x8>
 80121e8:	f7ff bfe4 	b.w	80121b4 <xflowf>
 80121ec:	70000000 	.word	0x70000000

080121f0 <__math_divzerof>:
 80121f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80121f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80121f8:	2800      	cmp	r0, #0
 80121fa:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80121fe:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801220c <__math_divzerof+0x1c>
 8012202:	2022      	movs	r0, #34	; 0x22
 8012204:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012208:	f7ff bfc6 	b.w	8012198 <with_errnof>
 801220c:	00000000 	.word	0x00000000

08012210 <__math_invalidf>:
 8012210:	eef0 7a40 	vmov.f32	s15, s0
 8012214:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012218:	eef4 7a67 	vcmp.f32	s15, s15
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012224:	d602      	bvs.n	801222c <__math_invalidf+0x1c>
 8012226:	2021      	movs	r0, #33	; 0x21
 8012228:	f7ff bfb6 	b.w	8012198 <with_errnof>
 801222c:	4770      	bx	lr
	...

08012230 <expm1f>:
 8012230:	ee10 2a10 	vmov	r2, s0
 8012234:	4984      	ldr	r1, [pc, #528]	; (8012448 <expm1f+0x218>)
 8012236:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801223a:	428b      	cmp	r3, r1
 801223c:	d923      	bls.n	8012286 <expm1f+0x56>
 801223e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012242:	d902      	bls.n	801224a <expm1f+0x1a>
 8012244:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012248:	4770      	bx	lr
 801224a:	d105      	bne.n	8012258 <expm1f+0x28>
 801224c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012250:	2a00      	cmp	r2, #0
 8012252:	fe20 0a27 	vselge.f32	s0, s0, s15
 8012256:	4770      	bx	lr
 8012258:	2a00      	cmp	r2, #0
 801225a:	db08      	blt.n	801226e <expm1f+0x3e>
 801225c:	4a7b      	ldr	r2, [pc, #492]	; (801244c <expm1f+0x21c>)
 801225e:	4293      	cmp	r3, r2
 8012260:	f240 80ea 	bls.w	8012438 <expm1f+0x208>
 8012264:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8012450 <expm1f+0x220>
 8012268:	ee20 0a00 	vmul.f32	s0, s0, s0
 801226c:	4770      	bx	lr
 801226e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8012454 <expm1f+0x224>
 8012272:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227e:	d554      	bpl.n	801232a <expm1f+0xfa>
 8012280:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012284:	4770      	bx	lr
 8012286:	4974      	ldr	r1, [pc, #464]	; (8012458 <expm1f+0x228>)
 8012288:	428b      	cmp	r3, r1
 801228a:	d96c      	bls.n	8012366 <expm1f+0x136>
 801228c:	4973      	ldr	r1, [pc, #460]	; (801245c <expm1f+0x22c>)
 801228e:	428b      	cmp	r3, r1
 8012290:	d84b      	bhi.n	801232a <expm1f+0xfa>
 8012292:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8012460 <expm1f+0x230>
 8012296:	2a00      	cmp	r2, #0
 8012298:	bfa7      	ittee	ge
 801229a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801229e:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8012464 <expm1f+0x234>
 80122a2:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8012468 <expm1f+0x238>
 80122a6:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 80122aa:	bfac      	ite	ge
 80122ac:	2301      	movge	r3, #1
 80122ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80122b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80122b6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80122ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80122c2:	ee20 5a25 	vmul.f32	s10, s0, s11
 80122c6:	eddf 6a69 	vldr	s13, [pc, #420]	; 801246c <expm1f+0x23c>
 80122ca:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8012470 <expm1f+0x240>
 80122ce:	ee20 7a05 	vmul.f32	s14, s0, s10
 80122d2:	eea7 6a26 	vfma.f32	s12, s14, s13
 80122d6:	eddf 6a67 	vldr	s13, [pc, #412]	; 8012474 <expm1f+0x244>
 80122da:	eee6 6a07 	vfma.f32	s13, s12, s14
 80122de:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8012478 <expm1f+0x248>
 80122e2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80122e6:	eddf 6a65 	vldr	s13, [pc, #404]	; 801247c <expm1f+0x24c>
 80122ea:	eee6 6a07 	vfma.f32	s13, s12, s14
 80122ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80122f2:	eef0 4a46 	vmov.f32	s9, s12
 80122f6:	eee6 4a87 	vfma.f32	s9, s13, s14
 80122fa:	eef0 6a64 	vmov.f32	s13, s9
 80122fe:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8012302:	eee5 4a66 	vfms.f32	s9, s10, s13
 8012306:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801230a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 801230e:	eee0 6a64 	vfms.f32	s13, s0, s9
 8012312:	eef0 4a66 	vmov.f32	s9, s13
 8012316:	eec5 6a24 	vdiv.f32	s13, s10, s9
 801231a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801231e:	bb83      	cbnz	r3, 8012382 <expm1f+0x152>
 8012320:	eef0 7a47 	vmov.f32	s15, s14
 8012324:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8012328:	e026      	b.n	8012378 <expm1f+0x148>
 801232a:	eddf 7a55 	vldr	s15, [pc, #340]	; 8012480 <expm1f+0x250>
 801232e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012332:	ee20 7a27 	vmul.f32	s14, s0, s15
 8012336:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801233a:	2a00      	cmp	r2, #0
 801233c:	fe66 7aa7 	vselge.f32	s15, s13, s15
 8012340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012344:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012460 <expm1f+0x230>
 8012348:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012464 <expm1f+0x234>
 801234c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012350:	ee17 3a90 	vmov	r3, s15
 8012354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012358:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801235c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012360:	eeb0 7a40 	vmov.f32	s14, s0
 8012364:	e7a5      	b.n	80122b2 <expm1f+0x82>
 8012366:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801236a:	d208      	bcs.n	801237e <expm1f+0x14e>
 801236c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8012450 <expm1f+0x220>
 8012370:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012374:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8012378:	ee30 0a67 	vsub.f32	s0, s0, s15
 801237c:	4770      	bx	lr
 801237e:	2300      	movs	r3, #0
 8012380:	e79d      	b.n	80122be <expm1f+0x8e>
 8012382:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801238c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012390:	d106      	bne.n	80123a0 <expm1f+0x170>
 8012392:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012396:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801239a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801239e:	4770      	bx	lr
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d118      	bne.n	80123d6 <expm1f+0x1a6>
 80123a4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80123a8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80123ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b0:	bf41      	itttt	mi
 80123b2:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 80123b6:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 80123ba:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 80123be:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 80123c2:	bf5f      	itttt	pl
 80123c4:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 80123c8:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 80123cc:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 80123d0:	eeb0 0a46 	vmovpl.f32	s0, s12
 80123d4:	4770      	bx	lr
 80123d6:	1c5a      	adds	r2, r3, #1
 80123d8:	2a39      	cmp	r2, #57	; 0x39
 80123da:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80123de:	d90b      	bls.n	80123f8 <expm1f+0x1c8>
 80123e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80123e4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80123e8:	ee10 3a10 	vmov	r3, s0
 80123ec:	440b      	add	r3, r1
 80123ee:	ee00 3a10 	vmov	s0, r3
 80123f2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80123f6:	4770      	bx	lr
 80123f8:	2b16      	cmp	r3, #22
 80123fa:	dc11      	bgt.n	8012420 <expm1f+0x1f0>
 80123fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012400:	fa42 f303 	asr.w	r3, r2, r3
 8012404:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8012408:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801240c:	ee07 3a90 	vmov	s15, r3
 8012410:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012414:	ee10 3a10 	vmov	r3, s0
 8012418:	440b      	add	r3, r1
 801241a:	ee00 3a10 	vmov	s0, r3
 801241e:	4770      	bx	lr
 8012420:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8012424:	05db      	lsls	r3, r3, #23
 8012426:	ee07 3a10 	vmov	s14, r3
 801242a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801242e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012432:	ee30 0a06 	vadd.f32	s0, s0, s12
 8012436:	e7ed      	b.n	8012414 <expm1f+0x1e4>
 8012438:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012480 <expm1f+0x250>
 801243c:	ee20 7a27 	vmul.f32	s14, s0, s15
 8012440:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012444:	e77c      	b.n	8012340 <expm1f+0x110>
 8012446:	bf00      	nop
 8012448:	4195b843 	.word	0x4195b843
 801244c:	42b17217 	.word	0x42b17217
 8012450:	7149f2ca 	.word	0x7149f2ca
 8012454:	0da24260 	.word	0x0da24260
 8012458:	3eb17218 	.word	0x3eb17218
 801245c:	3f851591 	.word	0x3f851591
 8012460:	3f317180 	.word	0x3f317180
 8012464:	3717f7d1 	.word	0x3717f7d1
 8012468:	b717f7d1 	.word	0xb717f7d1
 801246c:	b457edbb 	.word	0xb457edbb
 8012470:	36867e54 	.word	0x36867e54
 8012474:	b8a670cd 	.word	0xb8a670cd
 8012478:	3ad00d01 	.word	0x3ad00d01
 801247c:	bd088889 	.word	0xbd088889
 8012480:	3fb8aa3b 	.word	0x3fb8aa3b

08012484 <fabsf>:
 8012484:	ee10 3a10 	vmov	r3, s0
 8012488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801248c:	ee00 3a10 	vmov	s0, r3
 8012490:	4770      	bx	lr
	...

08012494 <_init>:
 8012494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012496:	bf00      	nop
 8012498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801249a:	bc08      	pop	{r3}
 801249c:	469e      	mov	lr, r3
 801249e:	4770      	bx	lr

080124a0 <_fini>:
 80124a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a2:	bf00      	nop
 80124a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124a6:	bc08      	pop	{r3}
 80124a8:	469e      	mov	lr, r3
 80124aa:	4770      	bx	lr
